// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/15/2023 03:36:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    dif
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dif_vlg_sample_tst(
	CLK,
	sampler_tx
);
input  CLK;
output sampler_tx;

reg sample;
time current_time;
always @(CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module dif_vlg_check_tst (
	VGA_B,
	VGA_G,
	VGA_HS,
	vga_i,
	vga_j,
	VGA_R,
	VGA_VS,
	sampler_rx
);
input [3:0] VGA_B;
input [3:0] VGA_G;
input  VGA_HS;
input [10:0] vga_i;
input [9:0] vga_j;
input [3:0] VGA_R;
input  VGA_VS;
input sampler_rx;

reg [3:0] VGA_B_expected;
reg [3:0] VGA_G_expected;
reg  VGA_HS_expected;
reg [10:0] vga_i_expected;
reg [9:0] vga_j_expected;
reg [3:0] VGA_R_expected;
reg  VGA_VS_expected;

reg [3:0] VGA_B_prev;
reg [3:0] VGA_G_prev;
reg  VGA_HS_prev;
reg [10:0] vga_i_prev;
reg [9:0] vga_j_prev;
reg [3:0] VGA_R_prev;
reg  VGA_VS_prev;

reg  VGA_HS_expected_prev;
reg [10:0] vga_i_expected_prev;
reg [9:0] vga_j_expected_prev;
reg  VGA_VS_expected_prev;

reg  last_VGA_HS_exp;
reg [10:0] last_vga_i_exp;
reg [9:0] last_vga_j_exp;
reg  last_VGA_VS_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	VGA_B_prev = VGA_B;
	VGA_G_prev = VGA_G;
	VGA_HS_prev = VGA_HS;
	vga_i_prev = vga_i;
	vga_j_prev = vga_j;
	VGA_R_prev = VGA_R;
	VGA_VS_prev = VGA_VS;
end

// update expected /o prevs

always @(trigger)
begin
	VGA_HS_expected_prev = VGA_HS_expected;
	vga_i_expected_prev = vga_i_expected;
	vga_j_expected_prev = vga_j_expected;
	VGA_VS_expected_prev = VGA_VS_expected;
end



// expected VGA_HS
initial
begin
	VGA_HS_expected = 1'bX;
end 
// expected vga_i[ 10 ]
initial
begin
	vga_i_expected[10] = 1'bX;
end 
// expected vga_i[ 9 ]
initial
begin
	vga_i_expected[9] = 1'bX;
end 
// expected vga_i[ 8 ]
initial
begin
	vga_i_expected[8] = 1'bX;
end 
// expected vga_i[ 7 ]
initial
begin
	vga_i_expected[7] = 1'bX;
end 
// expected vga_i[ 6 ]
initial
begin
	vga_i_expected[6] = 1'bX;
end 
// expected vga_i[ 5 ]
initial
begin
	vga_i_expected[5] = 1'bX;
end 
// expected vga_i[ 4 ]
initial
begin
	vga_i_expected[4] = 1'bX;
end 
// expected vga_i[ 3 ]
initial
begin
	vga_i_expected[3] = 1'bX;
end 
// expected vga_i[ 2 ]
initial
begin
	vga_i_expected[2] = 1'bX;
end 
// expected vga_i[ 1 ]
initial
begin
	vga_i_expected[1] = 1'bX;
end 
// expected vga_i[ 0 ]
initial
begin
	vga_i_expected[0] = 1'bX;
end 
// expected vga_j[ 9 ]
initial
begin
	vga_j_expected[9] = 1'bX;
end 
// expected vga_j[ 8 ]
initial
begin
	vga_j_expected[8] = 1'bX;
end 
// expected vga_j[ 7 ]
initial
begin
	vga_j_expected[7] = 1'bX;
end 
// expected vga_j[ 6 ]
initial
begin
	vga_j_expected[6] = 1'bX;
end 
// expected vga_j[ 5 ]
initial
begin
	vga_j_expected[5] = 1'bX;
end 
// expected vga_j[ 4 ]
initial
begin
	vga_j_expected[4] = 1'bX;
end 
// expected vga_j[ 3 ]
initial
begin
	vga_j_expected[3] = 1'bX;
end 
// expected vga_j[ 2 ]
initial
begin
	vga_j_expected[2] = 1'bX;
end 
// expected vga_j[ 1 ]
initial
begin
	vga_j_expected[1] = 1'bX;
end 
// expected vga_j[ 0 ]
initial
begin
	vga_j_expected[0] = 1'bX;
end 

// expected VGA_VS
initial
begin
	VGA_VS_expected = 1'bX;
end 
// generate trigger
always @(VGA_B_expected or VGA_B or VGA_G_expected or VGA_G or VGA_HS_expected or VGA_HS or vga_i_expected or vga_i or vga_j_expected or vga_j or VGA_R_expected or VGA_R or VGA_VS_expected or VGA_VS)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected VGA_B = %b | expected VGA_G = %b | expected VGA_HS = %b | expected vga_i = %b | expected vga_j = %b | expected VGA_R = %b | expected VGA_VS = %b | ",VGA_B_expected_prev,VGA_G_expected_prev,VGA_HS_expected_prev,vga_i_expected_prev,vga_j_expected_prev,VGA_R_expected_prev,VGA_VS_expected_prev);
	$display("| real VGA_B = %b | real VGA_G = %b | real VGA_HS = %b | real vga_i = %b | real vga_j = %b | real VGA_R = %b | real VGA_VS = %b | ",VGA_B_prev,VGA_G_prev,VGA_HS_prev,vga_i_prev,vga_j_prev,VGA_R_prev,VGA_VS_prev);
`endif
	if (
		( VGA_HS_expected_prev !== 1'bx ) && ( VGA_HS_prev !== VGA_HS_expected_prev )
		&& ((VGA_HS_expected_prev !== last_VGA_HS_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_HS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_HS_expected_prev);
		$display ("     Real value = %b", VGA_HS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_VGA_HS_exp = VGA_HS_expected_prev;
	end
	if (
		( vga_i_expected_prev[0] !== 1'bx ) && ( vga_i_prev[0] !== vga_i_expected_prev[0] )
		&& ((vga_i_expected_prev[0] !== last_vga_i_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_i[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_i_expected_prev);
		$display ("     Real value = %b", vga_i_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vga_i_exp[0] = vga_i_expected_prev[0];
	end
	if (
		( vga_i_expected_prev[1] !== 1'bx ) && ( vga_i_prev[1] !== vga_i_expected_prev[1] )
		&& ((vga_i_expected_prev[1] !== last_vga_i_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_i[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_i_expected_prev);
		$display ("     Real value = %b", vga_i_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vga_i_exp[1] = vga_i_expected_prev[1];
	end
	if (
		( vga_i_expected_prev[2] !== 1'bx ) && ( vga_i_prev[2] !== vga_i_expected_prev[2] )
		&& ((vga_i_expected_prev[2] !== last_vga_i_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_i[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_i_expected_prev);
		$display ("     Real value = %b", vga_i_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vga_i_exp[2] = vga_i_expected_prev[2];
	end
	if (
		( vga_i_expected_prev[3] !== 1'bx ) && ( vga_i_prev[3] !== vga_i_expected_prev[3] )
		&& ((vga_i_expected_prev[3] !== last_vga_i_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_i[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_i_expected_prev);
		$display ("     Real value = %b", vga_i_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vga_i_exp[3] = vga_i_expected_prev[3];
	end
	if (
		( vga_i_expected_prev[4] !== 1'bx ) && ( vga_i_prev[4] !== vga_i_expected_prev[4] )
		&& ((vga_i_expected_prev[4] !== last_vga_i_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_i[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_i_expected_prev);
		$display ("     Real value = %b", vga_i_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vga_i_exp[4] = vga_i_expected_prev[4];
	end
	if (
		( vga_i_expected_prev[5] !== 1'bx ) && ( vga_i_prev[5] !== vga_i_expected_prev[5] )
		&& ((vga_i_expected_prev[5] !== last_vga_i_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_i[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_i_expected_prev);
		$display ("     Real value = %b", vga_i_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vga_i_exp[5] = vga_i_expected_prev[5];
	end
	if (
		( vga_i_expected_prev[6] !== 1'bx ) && ( vga_i_prev[6] !== vga_i_expected_prev[6] )
		&& ((vga_i_expected_prev[6] !== last_vga_i_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_i[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_i_expected_prev);
		$display ("     Real value = %b", vga_i_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vga_i_exp[6] = vga_i_expected_prev[6];
	end
	if (
		( vga_i_expected_prev[7] !== 1'bx ) && ( vga_i_prev[7] !== vga_i_expected_prev[7] )
		&& ((vga_i_expected_prev[7] !== last_vga_i_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_i[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_i_expected_prev);
		$display ("     Real value = %b", vga_i_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vga_i_exp[7] = vga_i_expected_prev[7];
	end
	if (
		( vga_i_expected_prev[8] !== 1'bx ) && ( vga_i_prev[8] !== vga_i_expected_prev[8] )
		&& ((vga_i_expected_prev[8] !== last_vga_i_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_i[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_i_expected_prev);
		$display ("     Real value = %b", vga_i_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vga_i_exp[8] = vga_i_expected_prev[8];
	end
	if (
		( vga_i_expected_prev[9] !== 1'bx ) && ( vga_i_prev[9] !== vga_i_expected_prev[9] )
		&& ((vga_i_expected_prev[9] !== last_vga_i_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_i[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_i_expected_prev);
		$display ("     Real value = %b", vga_i_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vga_i_exp[9] = vga_i_expected_prev[9];
	end
	if (
		( vga_i_expected_prev[10] !== 1'bx ) && ( vga_i_prev[10] !== vga_i_expected_prev[10] )
		&& ((vga_i_expected_prev[10] !== last_vga_i_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_i[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_i_expected_prev);
		$display ("     Real value = %b", vga_i_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vga_i_exp[10] = vga_i_expected_prev[10];
	end
	if (
		( vga_j_expected_prev[0] !== 1'bx ) && ( vga_j_prev[0] !== vga_j_expected_prev[0] )
		&& ((vga_j_expected_prev[0] !== last_vga_j_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_j[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_j_expected_prev);
		$display ("     Real value = %b", vga_j_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vga_j_exp[0] = vga_j_expected_prev[0];
	end
	if (
		( vga_j_expected_prev[1] !== 1'bx ) && ( vga_j_prev[1] !== vga_j_expected_prev[1] )
		&& ((vga_j_expected_prev[1] !== last_vga_j_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_j[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_j_expected_prev);
		$display ("     Real value = %b", vga_j_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vga_j_exp[1] = vga_j_expected_prev[1];
	end
	if (
		( vga_j_expected_prev[2] !== 1'bx ) && ( vga_j_prev[2] !== vga_j_expected_prev[2] )
		&& ((vga_j_expected_prev[2] !== last_vga_j_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_j[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_j_expected_prev);
		$display ("     Real value = %b", vga_j_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vga_j_exp[2] = vga_j_expected_prev[2];
	end
	if (
		( vga_j_expected_prev[3] !== 1'bx ) && ( vga_j_prev[3] !== vga_j_expected_prev[3] )
		&& ((vga_j_expected_prev[3] !== last_vga_j_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_j[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_j_expected_prev);
		$display ("     Real value = %b", vga_j_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vga_j_exp[3] = vga_j_expected_prev[3];
	end
	if (
		( vga_j_expected_prev[4] !== 1'bx ) && ( vga_j_prev[4] !== vga_j_expected_prev[4] )
		&& ((vga_j_expected_prev[4] !== last_vga_j_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_j[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_j_expected_prev);
		$display ("     Real value = %b", vga_j_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vga_j_exp[4] = vga_j_expected_prev[4];
	end
	if (
		( vga_j_expected_prev[5] !== 1'bx ) && ( vga_j_prev[5] !== vga_j_expected_prev[5] )
		&& ((vga_j_expected_prev[5] !== last_vga_j_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_j[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_j_expected_prev);
		$display ("     Real value = %b", vga_j_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vga_j_exp[5] = vga_j_expected_prev[5];
	end
	if (
		( vga_j_expected_prev[6] !== 1'bx ) && ( vga_j_prev[6] !== vga_j_expected_prev[6] )
		&& ((vga_j_expected_prev[6] !== last_vga_j_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_j[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_j_expected_prev);
		$display ("     Real value = %b", vga_j_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vga_j_exp[6] = vga_j_expected_prev[6];
	end
	if (
		( vga_j_expected_prev[7] !== 1'bx ) && ( vga_j_prev[7] !== vga_j_expected_prev[7] )
		&& ((vga_j_expected_prev[7] !== last_vga_j_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_j[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_j_expected_prev);
		$display ("     Real value = %b", vga_j_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vga_j_exp[7] = vga_j_expected_prev[7];
	end
	if (
		( vga_j_expected_prev[8] !== 1'bx ) && ( vga_j_prev[8] !== vga_j_expected_prev[8] )
		&& ((vga_j_expected_prev[8] !== last_vga_j_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_j[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_j_expected_prev);
		$display ("     Real value = %b", vga_j_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vga_j_exp[8] = vga_j_expected_prev[8];
	end
	if (
		( vga_j_expected_prev[9] !== 1'bx ) && ( vga_j_prev[9] !== vga_j_expected_prev[9] )
		&& ((vga_j_expected_prev[9] !== last_vga_j_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_j[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_j_expected_prev);
		$display ("     Real value = %b", vga_j_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vga_j_exp[9] = vga_j_expected_prev[9];
	end
	if (
		( VGA_VS_expected_prev !== 1'bx ) && ( VGA_VS_prev !== VGA_VS_expected_prev )
		&& ((VGA_VS_expected_prev !== last_VGA_VS_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_VS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_VS_expected_prev);
		$display ("     Real value = %b", VGA_VS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_VGA_VS_exp = VGA_VS_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module dif_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
// wires                                               
wire [3:0] VGA_B;
wire [3:0] VGA_G;
wire VGA_HS;
wire [10:0] vga_i;
wire [9:0] vga_j;
wire [3:0] VGA_R;
wire VGA_VS;

wire sampler;                             

// assign statements (if any)                          
dif i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.VGA_B(VGA_B),
	.VGA_G(VGA_G),
	.VGA_HS(VGA_HS),
	.vga_i(vga_i),
	.vga_j(vga_j),
	.VGA_R(VGA_R),
	.VGA_VS(VGA_VS)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #50000 1'b1;
	#50000;
end 

dif_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.sampler_tx(sampler)
);

dif_vlg_check_tst tb_out(
	.VGA_B(VGA_B),
	.VGA_G(VGA_G),
	.VGA_HS(VGA_HS),
	.vga_i(vga_i),
	.vga_j(vga_j),
	.VGA_R(VGA_R),
	.VGA_VS(VGA_VS),
	.sampler_rx(sampler)
);
endmodule

