// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/08/2023 17:01:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    cmp4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cmp4_vlg_sample_tst(
	A,
	B,
	E0,
	G0,
	L0,
	sampler_tx
);
input [3:0] A;
input [3:0] B;
input  E0;
input  G0;
input  L0;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or E0 or G0 or L0)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module cmp4_vlg_check_tst (
	E1,
	G1,
	L1,
	sampler_rx
);
input  E1;
input  G1;
input  L1;
input sampler_rx;

reg  E1_expected;
reg  G1_expected;
reg  L1_expected;

reg  E1_prev;
reg  G1_prev;
reg  L1_prev;

reg  E1_expected_prev;
reg  G1_expected_prev;
reg  L1_expected_prev;

reg  last_E1_exp;
reg  last_G1_exp;
reg  last_L1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	E1_prev = E1;
	G1_prev = G1;
	L1_prev = L1;
end

// update expected /o prevs

always @(trigger)
begin
	E1_expected_prev = E1_expected;
	G1_expected_prev = G1_expected;
	L1_expected_prev = L1_expected;
end



// expected E1
initial
begin
	E1_expected = 1'bX;
	E1_expected = #999000 1'b0;
end 

// expected G1
initial
begin
	G1_expected = 1'bX;
	G1_expected = #999000 1'b0;
end 

// expected L1
initial
begin
	L1_expected = 1'bX;
	L1_expected = #999000 1'b0;
end 
// generate trigger
always @(E1_expected or E1 or G1_expected or G1 or L1_expected or L1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected E1 = %b | expected G1 = %b | expected L1 = %b | ",E1_expected_prev,G1_expected_prev,L1_expected_prev);
	$display("| real E1 = %b | real G1 = %b | real L1 = %b | ",E1_prev,G1_prev,L1_prev);
`endif
	if (
		( E1_expected_prev !== 1'bx ) && ( E1_prev !== E1_expected_prev )
		&& ((E1_expected_prev !== last_E1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E1_expected_prev);
		$display ("     Real value = %b", E1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_E1_exp = E1_expected_prev;
	end
	if (
		( G1_expected_prev !== 1'bx ) && ( G1_prev !== G1_expected_prev )
		&& ((G1_expected_prev !== last_G1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G1_expected_prev);
		$display ("     Real value = %b", G1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G1_exp = G1_expected_prev;
	end
	if (
		( L1_expected_prev !== 1'bx ) && ( L1_prev !== L1_expected_prev )
		&& ((L1_expected_prev !== last_L1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L1_expected_prev);
		$display ("     Real value = %b", L1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_L1_exp = L1_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module cmp4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A;
reg [3:0] B;
reg E0;
reg G0;
reg L0;
// wires                                               
wire E1;
wire G1;
wire L1;

wire sampler;                             

// assign statements (if any)                          
cmp4 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.E0(E0),
	.E1(E1),
	.G0(G0),
	.G1(G1),
	.L0(L0),
	.L1(L1)
);
// A[ 3 ]
always
begin
	A[3] = 1'b0;
	A[3] = #80000 1'b1;
	#80000;
end 
// A[ 2 ]
always
begin
	A[2] = 1'b0;
	A[2] = #40000 1'b1;
	#40000;
end 
// A[ 1 ]
always
begin
	A[1] = 1'b0;
	A[1] = #20000 1'b1;
	#20000;
end 
// A[ 0 ]
always
begin
	A[0] = 1'b0;
	A[0] = #10000 1'b1;
	#10000;
end 
// B[ 3 ]
initial
begin
	repeat(39)
	begin
		B[3] = 1'b0;
		B[3] = #1280000 1'b1;
		# 1280000;
	end
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	repeat(78)
	begin
		B[2] = 1'b0;
		B[2] = #640000 1'b1;
		# 640000;
	end
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	repeat(156)
	begin
		B[1] = 1'b0;
		B[1] = #320000 1'b1;
		# 320000;
	end
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	repeat(312)
	begin
		B[0] = 1'b0;
		B[0] = #160000 1'b1;
		# 160000;
	end
	B[0] = 1'b0;
end 

// E0
initial
begin
	E0 = 1'b1;
end 

// G0
initial
begin
	G0 = 1'b0;
end 

// L0
initial
begin
	L0 = 1'b0;
end 

cmp4_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.E0(E0),
	.G0(G0),
	.L0(L0),
	.sampler_tx(sampler)
);

cmp4_vlg_check_tst tb_out(
	.E1(E1),
	.G1(G1),
	.L1(L1),
	.sampler_rx(sampler)
);
endmodule

