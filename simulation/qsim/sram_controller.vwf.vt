// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/15/2023 07:52:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sram_controller
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sram_controller_vlg_sample_tst(
	ABUS,
	CLK,
	DBUS,
	LEN,
	RD,
	WR,
	sampler_tx
);
input [31:0] ABUS;
input  CLK;
input [31:0] DBUS;
input [1:0] LEN;
input  RD;
input  WR;
output sampler_tx;

reg sample;
time current_time;
always @(ABUS or CLK or DBUS or LEN or RD or WR)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sram_controller_vlg_check_tst (
	DBUS,
	sampler_rx
);
input [31:0] DBUS;
input sampler_rx;

reg [31:0] DBUS_expected;

reg [31:0] DBUS_prev;

reg [31:0] DBUS_expected_prev;

reg [31:0] last_DBUS_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	DBUS_prev = DBUS;
end

// update expected /o prevs

always @(trigger)
begin
	DBUS_expected_prev = DBUS_expected;
end


// generate trigger
always @(DBUS_expected or DBUS)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DBUS = %b | ",DBUS_expected_prev);
	$display("| real DBUS = %b | ",DBUS_prev);
`endif
	if (
		( DBUS_expected_prev[0] !== 1'bx ) && ( DBUS_prev[0] !== DBUS_expected_prev[0] )
		&& ((DBUS_expected_prev[0] !== last_DBUS_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[0] = DBUS_expected_prev[0];
	end
	if (
		( DBUS_expected_prev[1] !== 1'bx ) && ( DBUS_prev[1] !== DBUS_expected_prev[1] )
		&& ((DBUS_expected_prev[1] !== last_DBUS_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[1] = DBUS_expected_prev[1];
	end
	if (
		( DBUS_expected_prev[2] !== 1'bx ) && ( DBUS_prev[2] !== DBUS_expected_prev[2] )
		&& ((DBUS_expected_prev[2] !== last_DBUS_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[2] = DBUS_expected_prev[2];
	end
	if (
		( DBUS_expected_prev[3] !== 1'bx ) && ( DBUS_prev[3] !== DBUS_expected_prev[3] )
		&& ((DBUS_expected_prev[3] !== last_DBUS_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[3] = DBUS_expected_prev[3];
	end
	if (
		( DBUS_expected_prev[4] !== 1'bx ) && ( DBUS_prev[4] !== DBUS_expected_prev[4] )
		&& ((DBUS_expected_prev[4] !== last_DBUS_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[4] = DBUS_expected_prev[4];
	end
	if (
		( DBUS_expected_prev[5] !== 1'bx ) && ( DBUS_prev[5] !== DBUS_expected_prev[5] )
		&& ((DBUS_expected_prev[5] !== last_DBUS_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[5] = DBUS_expected_prev[5];
	end
	if (
		( DBUS_expected_prev[6] !== 1'bx ) && ( DBUS_prev[6] !== DBUS_expected_prev[6] )
		&& ((DBUS_expected_prev[6] !== last_DBUS_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[6] = DBUS_expected_prev[6];
	end
	if (
		( DBUS_expected_prev[7] !== 1'bx ) && ( DBUS_prev[7] !== DBUS_expected_prev[7] )
		&& ((DBUS_expected_prev[7] !== last_DBUS_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[7] = DBUS_expected_prev[7];
	end
	if (
		( DBUS_expected_prev[8] !== 1'bx ) && ( DBUS_prev[8] !== DBUS_expected_prev[8] )
		&& ((DBUS_expected_prev[8] !== last_DBUS_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[8] = DBUS_expected_prev[8];
	end
	if (
		( DBUS_expected_prev[9] !== 1'bx ) && ( DBUS_prev[9] !== DBUS_expected_prev[9] )
		&& ((DBUS_expected_prev[9] !== last_DBUS_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[9] = DBUS_expected_prev[9];
	end
	if (
		( DBUS_expected_prev[10] !== 1'bx ) && ( DBUS_prev[10] !== DBUS_expected_prev[10] )
		&& ((DBUS_expected_prev[10] !== last_DBUS_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[10] = DBUS_expected_prev[10];
	end
	if (
		( DBUS_expected_prev[11] !== 1'bx ) && ( DBUS_prev[11] !== DBUS_expected_prev[11] )
		&& ((DBUS_expected_prev[11] !== last_DBUS_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[11] = DBUS_expected_prev[11];
	end
	if (
		( DBUS_expected_prev[12] !== 1'bx ) && ( DBUS_prev[12] !== DBUS_expected_prev[12] )
		&& ((DBUS_expected_prev[12] !== last_DBUS_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[12] = DBUS_expected_prev[12];
	end
	if (
		( DBUS_expected_prev[13] !== 1'bx ) && ( DBUS_prev[13] !== DBUS_expected_prev[13] )
		&& ((DBUS_expected_prev[13] !== last_DBUS_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[13] = DBUS_expected_prev[13];
	end
	if (
		( DBUS_expected_prev[14] !== 1'bx ) && ( DBUS_prev[14] !== DBUS_expected_prev[14] )
		&& ((DBUS_expected_prev[14] !== last_DBUS_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[14] = DBUS_expected_prev[14];
	end
	if (
		( DBUS_expected_prev[15] !== 1'bx ) && ( DBUS_prev[15] !== DBUS_expected_prev[15] )
		&& ((DBUS_expected_prev[15] !== last_DBUS_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[15] = DBUS_expected_prev[15];
	end
	if (
		( DBUS_expected_prev[16] !== 1'bx ) && ( DBUS_prev[16] !== DBUS_expected_prev[16] )
		&& ((DBUS_expected_prev[16] !== last_DBUS_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[16] = DBUS_expected_prev[16];
	end
	if (
		( DBUS_expected_prev[17] !== 1'bx ) && ( DBUS_prev[17] !== DBUS_expected_prev[17] )
		&& ((DBUS_expected_prev[17] !== last_DBUS_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[17] = DBUS_expected_prev[17];
	end
	if (
		( DBUS_expected_prev[18] !== 1'bx ) && ( DBUS_prev[18] !== DBUS_expected_prev[18] )
		&& ((DBUS_expected_prev[18] !== last_DBUS_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[18] = DBUS_expected_prev[18];
	end
	if (
		( DBUS_expected_prev[19] !== 1'bx ) && ( DBUS_prev[19] !== DBUS_expected_prev[19] )
		&& ((DBUS_expected_prev[19] !== last_DBUS_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[19] = DBUS_expected_prev[19];
	end
	if (
		( DBUS_expected_prev[20] !== 1'bx ) && ( DBUS_prev[20] !== DBUS_expected_prev[20] )
		&& ((DBUS_expected_prev[20] !== last_DBUS_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[20] = DBUS_expected_prev[20];
	end
	if (
		( DBUS_expected_prev[21] !== 1'bx ) && ( DBUS_prev[21] !== DBUS_expected_prev[21] )
		&& ((DBUS_expected_prev[21] !== last_DBUS_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[21] = DBUS_expected_prev[21];
	end
	if (
		( DBUS_expected_prev[22] !== 1'bx ) && ( DBUS_prev[22] !== DBUS_expected_prev[22] )
		&& ((DBUS_expected_prev[22] !== last_DBUS_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[22] = DBUS_expected_prev[22];
	end
	if (
		( DBUS_expected_prev[23] !== 1'bx ) && ( DBUS_prev[23] !== DBUS_expected_prev[23] )
		&& ((DBUS_expected_prev[23] !== last_DBUS_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[23] = DBUS_expected_prev[23];
	end
	if (
		( DBUS_expected_prev[24] !== 1'bx ) && ( DBUS_prev[24] !== DBUS_expected_prev[24] )
		&& ((DBUS_expected_prev[24] !== last_DBUS_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[24] = DBUS_expected_prev[24];
	end
	if (
		( DBUS_expected_prev[25] !== 1'bx ) && ( DBUS_prev[25] !== DBUS_expected_prev[25] )
		&& ((DBUS_expected_prev[25] !== last_DBUS_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[25] = DBUS_expected_prev[25];
	end
	if (
		( DBUS_expected_prev[26] !== 1'bx ) && ( DBUS_prev[26] !== DBUS_expected_prev[26] )
		&& ((DBUS_expected_prev[26] !== last_DBUS_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[26] = DBUS_expected_prev[26];
	end
	if (
		( DBUS_expected_prev[27] !== 1'bx ) && ( DBUS_prev[27] !== DBUS_expected_prev[27] )
		&& ((DBUS_expected_prev[27] !== last_DBUS_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[27] = DBUS_expected_prev[27];
	end
	if (
		( DBUS_expected_prev[28] !== 1'bx ) && ( DBUS_prev[28] !== DBUS_expected_prev[28] )
		&& ((DBUS_expected_prev[28] !== last_DBUS_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[28] = DBUS_expected_prev[28];
	end
	if (
		( DBUS_expected_prev[29] !== 1'bx ) && ( DBUS_prev[29] !== DBUS_expected_prev[29] )
		&& ((DBUS_expected_prev[29] !== last_DBUS_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[29] = DBUS_expected_prev[29];
	end
	if (
		( DBUS_expected_prev[30] !== 1'bx ) && ( DBUS_prev[30] !== DBUS_expected_prev[30] )
		&& ((DBUS_expected_prev[30] !== last_DBUS_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[30] = DBUS_expected_prev[30];
	end
	if (
		( DBUS_expected_prev[31] !== 1'bx ) && ( DBUS_prev[31] !== DBUS_expected_prev[31] )
		&& ((DBUS_expected_prev[31] !== last_DBUS_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBUS_exp[31] = DBUS_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sram_controller_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] ABUS;
reg CLK;
reg [31:0] treg_DBUS;
reg [1:0] LEN;
reg RD;
reg WR;
// wires                                               
wire [31:0] DBUS;

wire sampler;                             

// assign statements (if any)                          
assign DBUS = treg_DBUS;
sram_controller i1 (
// port map - connection between master ports and signals/registers   
	.ABUS(ABUS),
	.CLK(CLK),
	.DBUS(DBUS),
	.LEN(LEN),
	.RD(RD),
	.WR(WR)
);
// ABUS[ 31 ]
initial
begin
	ABUS[31] = 1'b0;
end 
// ABUS[ 30 ]
initial
begin
	ABUS[30] = 1'b0;
end 
// ABUS[ 29 ]
initial
begin
	ABUS[29] = 1'b0;
end 
// ABUS[ 28 ]
initial
begin
	ABUS[28] = 1'b0;
end 
// ABUS[ 27 ]
initial
begin
	ABUS[27] = 1'b0;
end 
// ABUS[ 26 ]
initial
begin
	ABUS[26] = 1'b0;
end 
// ABUS[ 25 ]
initial
begin
	ABUS[25] = 1'b0;
end 
// ABUS[ 24 ]
initial
begin
	ABUS[24] = 1'b0;
end 
// ABUS[ 23 ]
initial
begin
	ABUS[23] = 1'b0;
end 
// ABUS[ 22 ]
initial
begin
	ABUS[22] = 1'b0;
end 
// ABUS[ 21 ]
initial
begin
	ABUS[21] = 1'b0;
end 
// ABUS[ 20 ]
initial
begin
	ABUS[20] = 1'b0;
end 
// ABUS[ 19 ]
initial
begin
	ABUS[19] = 1'b0;
end 
// ABUS[ 18 ]
initial
begin
	ABUS[18] = 1'b0;
end 
// ABUS[ 17 ]
initial
begin
	ABUS[17] = 1'b0;
end 
// ABUS[ 16 ]
initial
begin
	ABUS[16] = 1'b0;
end 
// ABUS[ 15 ]
initial
begin
	ABUS[15] = 1'b1;
	ABUS[15] = #240000 1'b0;
	ABUS[15] = #160000 1'b1;
	ABUS[15] = #230000 1'b0;
end 
// ABUS[ 14 ]
initial
begin
	ABUS[14] = 1'b1;
	ABUS[14] = #240000 1'b0;
	ABUS[14] = #160000 1'b1;
	ABUS[14] = #230000 1'b0;
end 
// ABUS[ 13 ]
initial
begin
	ABUS[13] = 1'b1;
	ABUS[13] = #240000 1'b0;
	ABUS[13] = #160000 1'b1;
	ABUS[13] = #230000 1'b0;
end 
// ABUS[ 12 ]
initial
begin
	ABUS[12] = 1'b1;
	ABUS[12] = #240000 1'b0;
	ABUS[12] = #160000 1'b1;
	ABUS[12] = #230000 1'b0;
end 
// ABUS[ 11 ]
initial
begin
	ABUS[11] = 1'b1;
	ABUS[11] = #240000 1'b0;
	ABUS[11] = #160000 1'b1;
	ABUS[11] = #230000 1'b0;
end 
// ABUS[ 10 ]
initial
begin
	ABUS[10] = 1'b1;
	ABUS[10] = #240000 1'b0;
	ABUS[10] = #160000 1'b1;
	ABUS[10] = #230000 1'b0;
end 
// ABUS[ 9 ]
initial
begin
	ABUS[9] = 1'b1;
	ABUS[9] = #240000 1'b0;
	ABUS[9] = #160000 1'b1;
	ABUS[9] = #230000 1'b0;
end 
// ABUS[ 8 ]
initial
begin
	ABUS[8] = 1'b1;
	ABUS[8] = #240000 1'b0;
	ABUS[8] = #160000 1'b1;
	ABUS[8] = #230000 1'b0;
end 
// ABUS[ 7 ]
initial
begin
	ABUS[7] = 1'b0;
end 
// ABUS[ 6 ]
initial
begin
	ABUS[6] = 1'b0;
end 
// ABUS[ 5 ]
initial
begin
	ABUS[5] = 1'b0;
end 
// ABUS[ 4 ]
initial
begin
	ABUS[4] = 1'b0;
end 
// ABUS[ 3 ]
initial
begin
	ABUS[3] = 1'b0;
end 
// ABUS[ 2 ]
initial
begin
	ABUS[2] = 1'b0;
end 
// ABUS[ 1 ]
initial
begin
	ABUS[1] = 1'b0;
end 
// ABUS[ 0 ]
initial
begin
	ABUS[0] = 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// DBUS[ 31 ]
initial
begin
	treg_DBUS[31] = 1'b1;
	treg_DBUS[31] = #240000 1'bZ;
end 
// DBUS[ 30 ]
initial
begin
	treg_DBUS[30] = 1'b0;
	treg_DBUS[30] = #240000 1'bZ;
end 
// DBUS[ 29 ]
initial
begin
	treg_DBUS[29] = 1'b1;
	treg_DBUS[29] = #240000 1'bZ;
end 
// DBUS[ 28 ]
initial
begin
	treg_DBUS[28] = 1'b0;
	treg_DBUS[28] = #240000 1'bZ;
end 
// DBUS[ 27 ]
initial
begin
	treg_DBUS[27] = 1'b1;
	treg_DBUS[27] = #240000 1'bZ;
end 
// DBUS[ 26 ]
initial
begin
	treg_DBUS[26] = 1'b0;
	treg_DBUS[26] = #240000 1'bZ;
end 
// DBUS[ 25 ]
initial
begin
	treg_DBUS[25] = 1'b1;
	treg_DBUS[25] = #240000 1'bZ;
end 
// DBUS[ 24 ]
initial
begin
	treg_DBUS[24] = 1'b1;
	treg_DBUS[24] = #240000 1'bZ;
end 
// DBUS[ 23 ]
initial
begin
	treg_DBUS[23] = 1'b1;
	treg_DBUS[23] = #240000 1'bZ;
end 
// DBUS[ 22 ]
initial
begin
	treg_DBUS[22] = 1'b1;
	treg_DBUS[22] = #240000 1'bZ;
end 
// DBUS[ 21 ]
initial
begin
	treg_DBUS[21] = 1'b0;
	treg_DBUS[21] = #240000 1'bZ;
end 
// DBUS[ 20 ]
initial
begin
	treg_DBUS[20] = 1'b0;
	treg_DBUS[20] = #240000 1'bZ;
end 
// DBUS[ 19 ]
initial
begin
	treg_DBUS[19] = 1'b1;
	treg_DBUS[19] = #240000 1'bZ;
end 
// DBUS[ 18 ]
initial
begin
	treg_DBUS[18] = 1'b1;
	treg_DBUS[18] = #240000 1'bZ;
end 
// DBUS[ 17 ]
initial
begin
	treg_DBUS[17] = 1'b0;
	treg_DBUS[17] = #240000 1'bZ;
end 
// DBUS[ 16 ]
initial
begin
	treg_DBUS[16] = 1'b1;
	treg_DBUS[16] = #240000 1'bZ;
end 
// DBUS[ 15 ]
initial
begin
	treg_DBUS[15] = 1'b1;
	treg_DBUS[15] = #240000 1'bZ;
end 
// DBUS[ 14 ]
initial
begin
	treg_DBUS[14] = 1'b0;
	treg_DBUS[14] = #240000 1'bZ;
end 
// DBUS[ 13 ]
initial
begin
	treg_DBUS[13] = 1'b1;
	treg_DBUS[13] = #240000 1'bZ;
end 
// DBUS[ 12 ]
initial
begin
	treg_DBUS[12] = 1'b0;
	treg_DBUS[12] = #240000 1'bZ;
end 
// DBUS[ 11 ]
initial
begin
	treg_DBUS[11] = 1'b1;
	treg_DBUS[11] = #240000 1'bZ;
end 
// DBUS[ 10 ]
initial
begin
	treg_DBUS[10] = 1'b0;
	treg_DBUS[10] = #240000 1'bZ;
end 
// DBUS[ 9 ]
initial
begin
	treg_DBUS[9] = 1'b1;
	treg_DBUS[9] = #240000 1'bZ;
end 
// DBUS[ 8 ]
initial
begin
	treg_DBUS[8] = 1'b1;
	treg_DBUS[8] = #240000 1'bZ;
end 
// DBUS[ 7 ]
initial
begin
	treg_DBUS[7] = 1'b1;
	treg_DBUS[7] = #240000 1'bZ;
end 
// DBUS[ 6 ]
initial
begin
	treg_DBUS[6] = 1'b1;
	treg_DBUS[6] = #240000 1'bZ;
end 
// DBUS[ 5 ]
initial
begin
	treg_DBUS[5] = 1'b0;
	treg_DBUS[5] = #240000 1'bZ;
end 
// DBUS[ 4 ]
initial
begin
	treg_DBUS[4] = 1'b0;
	treg_DBUS[4] = #240000 1'bZ;
end 
// DBUS[ 3 ]
initial
begin
	treg_DBUS[3] = 1'b1;
	treg_DBUS[3] = #240000 1'bZ;
end 
// DBUS[ 2 ]
initial
begin
	treg_DBUS[2] = 1'b1;
	treg_DBUS[2] = #240000 1'bZ;
end 
// DBUS[ 1 ]
initial
begin
	treg_DBUS[1] = 1'b0;
	treg_DBUS[1] = #240000 1'bZ;
end 
// DBUS[ 0 ]
initial
begin
	treg_DBUS[0] = 1'b1;
	treg_DBUS[0] = #240000 1'bZ;
end 
// LEN[ 1 ]
initial
begin
	LEN[1] = 1'b0;
end 
// LEN[ 0 ]
initial
begin
	LEN[0] = 1'b0;
end 

// RD
initial
begin
	RD = 1'b0;
	RD = #400000 1'b1;
	RD = #230000 1'b0;
end 

// WR
initial
begin
	WR = 1'b1;
	WR = #240000 1'b0;
end 

sram_controller_vlg_sample_tst tb_sample (
	.ABUS(ABUS),
	.CLK(CLK),
	.DBUS(DBUS),
	.LEN(LEN),
	.RD(RD),
	.WR(WR),
	.sampler_tx(sampler)
);

sram_controller_vlg_check_tst tb_out(
	.DBUS(DBUS),
	.sampler_rx(sampler)
);
endmodule

