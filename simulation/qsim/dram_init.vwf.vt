// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/04/2023 03:05:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    dram_init
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dram_init_vlg_sample_tst(
	CLK,
	sampler_tx
);
input  CLK;
output sampler_tx;

reg sample;
time current_time;
always @(CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module dram_init_vlg_check_tst (
	A,
	AUTO_REFRESH,
	CNT,
	init_done,
	init_end,
	LOAD_MODE_REGISTER,
	PRECHARGE,
	sampler_rx
);
input [11:0] A;
input  AUTO_REFRESH;
input [12:0] CNT;
input  init_done;
input  init_end;
input  LOAD_MODE_REGISTER;
input  PRECHARGE;
input sampler_rx;

reg [11:0] A_expected;
reg  AUTO_REFRESH_expected;
reg [12:0] CNT_expected;
reg  init_done_expected;
reg  init_end_expected;
reg  LOAD_MODE_REGISTER_expected;
reg  PRECHARGE_expected;

reg [11:0] A_prev;
reg  AUTO_REFRESH_prev;
reg [12:0] CNT_prev;
reg  init_done_prev;
reg  init_end_prev;
reg  LOAD_MODE_REGISTER_prev;
reg  PRECHARGE_prev;

reg [11:0] A_expected_prev;
reg  AUTO_REFRESH_expected_prev;
reg [12:0] CNT_expected_prev;
reg  init_done_expected_prev;
reg  init_end_expected_prev;
reg  LOAD_MODE_REGISTER_expected_prev;
reg  PRECHARGE_expected_prev;

reg [11:0] last_A_exp;
reg  last_AUTO_REFRESH_exp;
reg [12:0] last_CNT_exp;
reg  last_init_done_exp;
reg  last_init_end_exp;
reg  last_LOAD_MODE_REGISTER_exp;
reg  last_PRECHARGE_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	AUTO_REFRESH_prev = AUTO_REFRESH;
	CNT_prev = CNT;
	init_done_prev = init_done;
	init_end_prev = init_end;
	LOAD_MODE_REGISTER_prev = LOAD_MODE_REGISTER;
	PRECHARGE_prev = PRECHARGE;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	AUTO_REFRESH_expected_prev = AUTO_REFRESH_expected;
	CNT_expected_prev = CNT_expected;
	init_done_expected_prev = init_done_expected;
	init_end_expected_prev = init_end_expected;
	LOAD_MODE_REGISTER_expected_prev = LOAD_MODE_REGISTER_expected;
	PRECHARGE_expected_prev = PRECHARGE_expected;
end



// expected init_done
initial
begin
	init_done_expected = 1'bX;
end 
// expected A[ 11 ]
initial
begin
	A_expected[11] = 1'bX;
end 
// expected A[ 10 ]
initial
begin
	A_expected[10] = 1'bX;
end 
// expected A[ 9 ]
initial
begin
	A_expected[9] = 1'bX;
end 
// expected A[ 8 ]
initial
begin
	A_expected[8] = 1'bX;
end 
// expected A[ 7 ]
initial
begin
	A_expected[7] = 1'bX;
end 
// expected A[ 6 ]
initial
begin
	A_expected[6] = 1'bX;
end 
// expected A[ 5 ]
initial
begin
	A_expected[5] = 1'bX;
end 
// expected A[ 4 ]
initial
begin
	A_expected[4] = 1'bX;
end 
// expected A[ 3 ]
initial
begin
	A_expected[3] = 1'bX;
end 
// expected A[ 2 ]
initial
begin
	A_expected[2] = 1'bX;
end 
// expected A[ 1 ]
initial
begin
	A_expected[1] = 1'bX;
end 
// expected A[ 0 ]
initial
begin
	A_expected[0] = 1'bX;
end 

// expected AUTO_REFRESH
initial
begin
	AUTO_REFRESH_expected = 1'bX;
end 

// expected LOAD_MODE_REGISTER
initial
begin
	LOAD_MODE_REGISTER_expected = 1'bX;
end 

// expected PRECHARGE
initial
begin
	PRECHARGE_expected = 1'bX;
end 
// expected CNT[ 12 ]
initial
begin
	CNT_expected[12] = 1'bX;
end 
// expected CNT[ 11 ]
initial
begin
	CNT_expected[11] = 1'bX;
end 
// expected CNT[ 10 ]
initial
begin
	CNT_expected[10] = 1'bX;
end 
// expected CNT[ 9 ]
initial
begin
	CNT_expected[9] = 1'bX;
end 
// expected CNT[ 8 ]
initial
begin
	CNT_expected[8] = 1'bX;
end 
// expected CNT[ 7 ]
initial
begin
	CNT_expected[7] = 1'bX;
end 
// expected CNT[ 6 ]
initial
begin
	CNT_expected[6] = 1'bX;
end 
// expected CNT[ 5 ]
initial
begin
	CNT_expected[5] = 1'bX;
end 
// expected CNT[ 4 ]
initial
begin
	CNT_expected[4] = 1'bX;
end 
// expected CNT[ 3 ]
initial
begin
	CNT_expected[3] = 1'bX;
end 
// expected CNT[ 2 ]
initial
begin
	CNT_expected[2] = 1'bX;
end 
// expected CNT[ 1 ]
initial
begin
	CNT_expected[1] = 1'bX;
end 
// expected CNT[ 0 ]
initial
begin
	CNT_expected[0] = 1'bX;
end 

// expected init_end
initial
begin
	init_end_expected = 1'bX;
end 
// generate trigger
always @(A_expected or A or AUTO_REFRESH_expected or AUTO_REFRESH or CNT_expected or CNT or init_done_expected or init_done or init_end_expected or init_end or LOAD_MODE_REGISTER_expected or LOAD_MODE_REGISTER or PRECHARGE_expected or PRECHARGE)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected AUTO_REFRESH = %b | expected CNT = %b | expected init_done = %b | expected init_end = %b | expected LOAD_MODE_REGISTER = %b | expected PRECHARGE = %b | ",A_expected_prev,AUTO_REFRESH_expected_prev,CNT_expected_prev,init_done_expected_prev,init_end_expected_prev,LOAD_MODE_REGISTER_expected_prev,PRECHARGE_expected_prev);
	$display("| real A = %b | real AUTO_REFRESH = %b | real CNT = %b | real init_done = %b | real init_end = %b | real LOAD_MODE_REGISTER = %b | real PRECHARGE = %b | ",A_prev,AUTO_REFRESH_prev,CNT_prev,init_done_prev,init_end_prev,LOAD_MODE_REGISTER_prev,PRECHARGE_prev);
`endif
	if (
		( A_expected_prev[0] !== 1'bx ) && ( A_prev[0] !== A_expected_prev[0] )
		&& ((A_expected_prev[0] !== last_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[0] = A_expected_prev[0];
	end
	if (
		( A_expected_prev[1] !== 1'bx ) && ( A_prev[1] !== A_expected_prev[1] )
		&& ((A_expected_prev[1] !== last_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[1] = A_expected_prev[1];
	end
	if (
		( A_expected_prev[2] !== 1'bx ) && ( A_prev[2] !== A_expected_prev[2] )
		&& ((A_expected_prev[2] !== last_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[2] = A_expected_prev[2];
	end
	if (
		( A_expected_prev[3] !== 1'bx ) && ( A_prev[3] !== A_expected_prev[3] )
		&& ((A_expected_prev[3] !== last_A_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[3] = A_expected_prev[3];
	end
	if (
		( A_expected_prev[4] !== 1'bx ) && ( A_prev[4] !== A_expected_prev[4] )
		&& ((A_expected_prev[4] !== last_A_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[4] = A_expected_prev[4];
	end
	if (
		( A_expected_prev[5] !== 1'bx ) && ( A_prev[5] !== A_expected_prev[5] )
		&& ((A_expected_prev[5] !== last_A_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[5] = A_expected_prev[5];
	end
	if (
		( A_expected_prev[6] !== 1'bx ) && ( A_prev[6] !== A_expected_prev[6] )
		&& ((A_expected_prev[6] !== last_A_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[6] = A_expected_prev[6];
	end
	if (
		( A_expected_prev[7] !== 1'bx ) && ( A_prev[7] !== A_expected_prev[7] )
		&& ((A_expected_prev[7] !== last_A_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[7] = A_expected_prev[7];
	end
	if (
		( A_expected_prev[8] !== 1'bx ) && ( A_prev[8] !== A_expected_prev[8] )
		&& ((A_expected_prev[8] !== last_A_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[8] = A_expected_prev[8];
	end
	if (
		( A_expected_prev[9] !== 1'bx ) && ( A_prev[9] !== A_expected_prev[9] )
		&& ((A_expected_prev[9] !== last_A_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[9] = A_expected_prev[9];
	end
	if (
		( A_expected_prev[10] !== 1'bx ) && ( A_prev[10] !== A_expected_prev[10] )
		&& ((A_expected_prev[10] !== last_A_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[10] = A_expected_prev[10];
	end
	if (
		( A_expected_prev[11] !== 1'bx ) && ( A_prev[11] !== A_expected_prev[11] )
		&& ((A_expected_prev[11] !== last_A_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[11] = A_expected_prev[11];
	end
	if (
		( AUTO_REFRESH_expected_prev !== 1'bx ) && ( AUTO_REFRESH_prev !== AUTO_REFRESH_expected_prev )
		&& ((AUTO_REFRESH_expected_prev !== last_AUTO_REFRESH_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AUTO_REFRESH :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AUTO_REFRESH_expected_prev);
		$display ("     Real value = %b", AUTO_REFRESH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AUTO_REFRESH_exp = AUTO_REFRESH_expected_prev;
	end
	if (
		( CNT_expected_prev[0] !== 1'bx ) && ( CNT_prev[0] !== CNT_expected_prev[0] )
		&& ((CNT_expected_prev[0] !== last_CNT_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CNT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CNT_expected_prev);
		$display ("     Real value = %b", CNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CNT_exp[0] = CNT_expected_prev[0];
	end
	if (
		( CNT_expected_prev[1] !== 1'bx ) && ( CNT_prev[1] !== CNT_expected_prev[1] )
		&& ((CNT_expected_prev[1] !== last_CNT_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CNT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CNT_expected_prev);
		$display ("     Real value = %b", CNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CNT_exp[1] = CNT_expected_prev[1];
	end
	if (
		( CNT_expected_prev[2] !== 1'bx ) && ( CNT_prev[2] !== CNT_expected_prev[2] )
		&& ((CNT_expected_prev[2] !== last_CNT_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CNT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CNT_expected_prev);
		$display ("     Real value = %b", CNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CNT_exp[2] = CNT_expected_prev[2];
	end
	if (
		( CNT_expected_prev[3] !== 1'bx ) && ( CNT_prev[3] !== CNT_expected_prev[3] )
		&& ((CNT_expected_prev[3] !== last_CNT_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CNT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CNT_expected_prev);
		$display ("     Real value = %b", CNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CNT_exp[3] = CNT_expected_prev[3];
	end
	if (
		( CNT_expected_prev[4] !== 1'bx ) && ( CNT_prev[4] !== CNT_expected_prev[4] )
		&& ((CNT_expected_prev[4] !== last_CNT_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CNT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CNT_expected_prev);
		$display ("     Real value = %b", CNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CNT_exp[4] = CNT_expected_prev[4];
	end
	if (
		( CNT_expected_prev[5] !== 1'bx ) && ( CNT_prev[5] !== CNT_expected_prev[5] )
		&& ((CNT_expected_prev[5] !== last_CNT_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CNT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CNT_expected_prev);
		$display ("     Real value = %b", CNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CNT_exp[5] = CNT_expected_prev[5];
	end
	if (
		( CNT_expected_prev[6] !== 1'bx ) && ( CNT_prev[6] !== CNT_expected_prev[6] )
		&& ((CNT_expected_prev[6] !== last_CNT_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CNT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CNT_expected_prev);
		$display ("     Real value = %b", CNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CNT_exp[6] = CNT_expected_prev[6];
	end
	if (
		( CNT_expected_prev[7] !== 1'bx ) && ( CNT_prev[7] !== CNT_expected_prev[7] )
		&& ((CNT_expected_prev[7] !== last_CNT_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CNT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CNT_expected_prev);
		$display ("     Real value = %b", CNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CNT_exp[7] = CNT_expected_prev[7];
	end
	if (
		( CNT_expected_prev[8] !== 1'bx ) && ( CNT_prev[8] !== CNT_expected_prev[8] )
		&& ((CNT_expected_prev[8] !== last_CNT_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CNT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CNT_expected_prev);
		$display ("     Real value = %b", CNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CNT_exp[8] = CNT_expected_prev[8];
	end
	if (
		( CNT_expected_prev[9] !== 1'bx ) && ( CNT_prev[9] !== CNT_expected_prev[9] )
		&& ((CNT_expected_prev[9] !== last_CNT_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CNT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CNT_expected_prev);
		$display ("     Real value = %b", CNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CNT_exp[9] = CNT_expected_prev[9];
	end
	if (
		( CNT_expected_prev[10] !== 1'bx ) && ( CNT_prev[10] !== CNT_expected_prev[10] )
		&& ((CNT_expected_prev[10] !== last_CNT_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CNT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CNT_expected_prev);
		$display ("     Real value = %b", CNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CNT_exp[10] = CNT_expected_prev[10];
	end
	if (
		( CNT_expected_prev[11] !== 1'bx ) && ( CNT_prev[11] !== CNT_expected_prev[11] )
		&& ((CNT_expected_prev[11] !== last_CNT_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CNT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CNT_expected_prev);
		$display ("     Real value = %b", CNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CNT_exp[11] = CNT_expected_prev[11];
	end
	if (
		( CNT_expected_prev[12] !== 1'bx ) && ( CNT_prev[12] !== CNT_expected_prev[12] )
		&& ((CNT_expected_prev[12] !== last_CNT_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CNT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CNT_expected_prev);
		$display ("     Real value = %b", CNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CNT_exp[12] = CNT_expected_prev[12];
	end
	if (
		( init_done_expected_prev !== 1'bx ) && ( init_done_prev !== init_done_expected_prev )
		&& ((init_done_expected_prev !== last_init_done_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port init_done :: @time = %t",  $realtime);
		$display ("     Expected value = %b", init_done_expected_prev);
		$display ("     Real value = %b", init_done_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_init_done_exp = init_done_expected_prev;
	end
	if (
		( init_end_expected_prev !== 1'bx ) && ( init_end_prev !== init_end_expected_prev )
		&& ((init_end_expected_prev !== last_init_end_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port init_end :: @time = %t",  $realtime);
		$display ("     Expected value = %b", init_end_expected_prev);
		$display ("     Real value = %b", init_end_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_init_end_exp = init_end_expected_prev;
	end
	if (
		( LOAD_MODE_REGISTER_expected_prev !== 1'bx ) && ( LOAD_MODE_REGISTER_prev !== LOAD_MODE_REGISTER_expected_prev )
		&& ((LOAD_MODE_REGISTER_expected_prev !== last_LOAD_MODE_REGISTER_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOAD_MODE_REGISTER :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOAD_MODE_REGISTER_expected_prev);
		$display ("     Real value = %b", LOAD_MODE_REGISTER_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LOAD_MODE_REGISTER_exp = LOAD_MODE_REGISTER_expected_prev;
	end
	if (
		( PRECHARGE_expected_prev !== 1'bx ) && ( PRECHARGE_prev !== PRECHARGE_expected_prev )
		&& ((PRECHARGE_expected_prev !== last_PRECHARGE_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRECHARGE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRECHARGE_expected_prev);
		$display ("     Real value = %b", PRECHARGE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PRECHARGE_exp = PRECHARGE_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module dram_init_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
// wires                                               
wire [11:0] A;
wire AUTO_REFRESH;
wire [12:0] CNT;
wire init_done;
wire init_end;
wire LOAD_MODE_REGISTER;
wire PRECHARGE;

wire sampler;                             

// assign statements (if any)                          
dram_init i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.AUTO_REFRESH(AUTO_REFRESH),
	.CLK(CLK),
	.CNT(CNT),
	.init_done(init_done),
	.init_end(init_end),
	.LOAD_MODE_REGISTER(LOAD_MODE_REGISTER),
	.PRECHARGE(PRECHARGE)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

dram_init_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.sampler_tx(sampler)
);

dram_init_vlg_check_tst tb_out(
	.A(A),
	.AUTO_REFRESH(AUTO_REFRESH),
	.CNT(CNT),
	.init_done(init_done),
	.init_end(init_end),
	.LOAD_MODE_REGISTER(LOAD_MODE_REGISTER),
	.PRECHARGE(PRECHARGE),
	.sampler_rx(sampler)
);
endmodule

