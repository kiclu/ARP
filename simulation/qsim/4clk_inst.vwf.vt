// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/13/2023 21:45:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    rv32i_debug
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module rv32i_debug_vlg_sample_tst(
	CLK,
	DBUS,
	sampler_tx
);
input  CLK;
input [31:0] DBUS;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or DBUS)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module rv32i_debug_vlg_check_tst (
	ABUS,
	ADDR,
	ALUOUT,
	BRANCH,
	BRC,
	DATA,
	DATA_REG,
	DBUS,
	IR,
	JAL,
	JALR,
	LD_IR,
	LD_PC,
	LD_REG,
	LEN,
	PC,
	RD,
	WR,
	sampler_rx
);
input [31:0] ABUS;
input [31:0] ADDR;
input [31:0] ALUOUT;
input  BRANCH;
input  BRC;
input [31:0] DATA;
input [31:0] DATA_REG;
input [31:0] DBUS;
input [31:0] IR;
input  JAL;
input  JALR;
input  LD_IR;
input  LD_PC;
input  LD_REG;
input [1:0] LEN;
input [31:0] PC;
input  RD;
input  WR;
input sampler_rx;

reg [31:0] ABUS_expected;
reg [31:0] ADDR_expected;
reg [31:0] ALUOUT_expected;
reg  BRANCH_expected;
reg  BRC_expected;
reg [31:0] DATA_expected;
reg [31:0] DATA_REG_expected;
reg [31:0] DBUS_expected;
reg [31:0] IR_expected;
reg  JAL_expected;
reg  JALR_expected;
reg  LD_IR_expected;
reg  LD_PC_expected;
reg  LD_REG_expected;
reg [1:0] LEN_expected;
reg [31:0] PC_expected;
reg  RD_expected;
reg  WR_expected;

reg [31:0] ABUS_prev;
reg [31:0] ADDR_prev;
reg [31:0] ALUOUT_prev;
reg  BRANCH_prev;
reg  BRC_prev;
reg [31:0] DATA_prev;
reg [31:0] DATA_REG_prev;
reg [31:0] DBUS_prev;
reg [31:0] IR_prev;
reg  JAL_prev;
reg  JALR_prev;
reg  LD_IR_prev;
reg  LD_PC_prev;
reg  LD_REG_prev;
reg [1:0] LEN_prev;
reg [31:0] PC_prev;
reg  RD_prev;
reg  WR_prev;

reg [31:0] ABUS_expected_prev;
reg [31:0] ADDR_expected_prev;
reg [31:0] ALUOUT_expected_prev;
reg  BRANCH_expected_prev;
reg  BRC_expected_prev;
reg [31:0] DATA_expected_prev;
reg [31:0] DATA_REG_expected_prev;
reg [31:0] DBUS_expected_prev;
reg [31:0] IR_expected_prev;
reg  JAL_expected_prev;
reg  JALR_expected_prev;
reg  LD_IR_expected_prev;
reg  LD_PC_expected_prev;
reg  LD_REG_expected_prev;
reg [1:0] LEN_expected_prev;
reg [31:0] PC_expected_prev;
reg  RD_expected_prev;
reg  WR_expected_prev;

reg [31:0] last_ABUS_exp;
reg [31:0] last_ADDR_exp;
reg [31:0] last_ALUOUT_exp;
reg  last_BRANCH_exp;
reg  last_BRC_exp;
reg [31:0] last_DATA_exp;
reg [31:0] last_DATA_REG_exp;
reg [31:0] last_DBUS_exp;
reg [31:0] last_IR_exp;
reg  last_JAL_exp;
reg  last_JALR_exp;
reg  last_LD_IR_exp;
reg  last_LD_PC_exp;
reg  last_LD_REG_exp;
reg [1:0] last_LEN_exp;
reg [31:0] last_PC_exp;
reg  last_RD_exp;
reg  last_WR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:18] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 18'b1;
end

// update real /o prevs

always @(trigger)
begin
	ABUS_prev = ABUS;
	ADDR_prev = ADDR;
	ALUOUT_prev = ALUOUT;
	BRANCH_prev = BRANCH;
	BRC_prev = BRC;
	DATA_prev = DATA;
	DATA_REG_prev = DATA_REG;
	DBUS_prev = DBUS;
	IR_prev = IR;
	JAL_prev = JAL;
	JALR_prev = JALR;
	LD_IR_prev = LD_IR;
	LD_PC_prev = LD_PC;
	LD_REG_prev = LD_REG;
	LEN_prev = LEN;
	PC_prev = PC;
	RD_prev = RD;
	WR_prev = WR;
end

// update expected /o prevs

always @(trigger)
begin
	ABUS_expected_prev = ABUS_expected;
	ADDR_expected_prev = ADDR_expected;
	ALUOUT_expected_prev = ALUOUT_expected;
	BRANCH_expected_prev = BRANCH_expected;
	BRC_expected_prev = BRC_expected;
	DATA_expected_prev = DATA_expected;
	DATA_REG_expected_prev = DATA_REG_expected;
	DBUS_expected_prev = DBUS_expected;
	IR_expected_prev = IR_expected;
	JAL_expected_prev = JAL_expected;
	JALR_expected_prev = JALR_expected;
	LD_IR_expected_prev = LD_IR_expected;
	LD_PC_expected_prev = LD_PC_expected;
	LD_REG_expected_prev = LD_REG_expected;
	LEN_expected_prev = LEN_expected;
	PC_expected_prev = PC_expected;
	RD_expected_prev = RD_expected;
	WR_expected_prev = WR_expected;
end


// expected ABUS[ 31 ]
initial
begin
	ABUS_expected[31] = 1'bX;
end 
// expected ABUS[ 30 ]
initial
begin
	ABUS_expected[30] = 1'bX;
end 
// expected ABUS[ 29 ]
initial
begin
	ABUS_expected[29] = 1'bX;
end 
// expected ABUS[ 28 ]
initial
begin
	ABUS_expected[28] = 1'bX;
end 
// expected ABUS[ 27 ]
initial
begin
	ABUS_expected[27] = 1'bX;
end 
// expected ABUS[ 26 ]
initial
begin
	ABUS_expected[26] = 1'bX;
end 
// expected ABUS[ 25 ]
initial
begin
	ABUS_expected[25] = 1'bX;
end 
// expected ABUS[ 24 ]
initial
begin
	ABUS_expected[24] = 1'bX;
end 
// expected ABUS[ 23 ]
initial
begin
	ABUS_expected[23] = 1'bX;
end 
// expected ABUS[ 22 ]
initial
begin
	ABUS_expected[22] = 1'bX;
end 
// expected ABUS[ 21 ]
initial
begin
	ABUS_expected[21] = 1'bX;
end 
// expected ABUS[ 20 ]
initial
begin
	ABUS_expected[20] = 1'bX;
end 
// expected ABUS[ 19 ]
initial
begin
	ABUS_expected[19] = 1'bX;
end 
// expected ABUS[ 18 ]
initial
begin
	ABUS_expected[18] = 1'bX;
end 
// expected ABUS[ 17 ]
initial
begin
	ABUS_expected[17] = 1'bX;
end 
// expected ABUS[ 16 ]
initial
begin
	ABUS_expected[16] = 1'bX;
end 
// expected ABUS[ 15 ]
initial
begin
	ABUS_expected[15] = 1'bX;
end 
// expected ABUS[ 14 ]
initial
begin
	ABUS_expected[14] = 1'bX;
end 
// expected ABUS[ 13 ]
initial
begin
	ABUS_expected[13] = 1'bX;
end 
// expected ABUS[ 12 ]
initial
begin
	ABUS_expected[12] = 1'bX;
end 
// expected ABUS[ 11 ]
initial
begin
	ABUS_expected[11] = 1'bX;
end 
// expected ABUS[ 10 ]
initial
begin
	ABUS_expected[10] = 1'bX;
end 
// expected ABUS[ 9 ]
initial
begin
	ABUS_expected[9] = 1'bX;
end 
// expected ABUS[ 8 ]
initial
begin
	ABUS_expected[8] = 1'bX;
end 
// expected ABUS[ 7 ]
initial
begin
	ABUS_expected[7] = 1'bX;
end 
// expected ABUS[ 6 ]
initial
begin
	ABUS_expected[6] = 1'bX;
end 
// expected ABUS[ 5 ]
initial
begin
	ABUS_expected[5] = 1'bX;
end 
// expected ABUS[ 4 ]
initial
begin
	ABUS_expected[4] = 1'bX;
end 
// expected ABUS[ 3 ]
initial
begin
	ABUS_expected[3] = 1'bX;
end 
// expected ABUS[ 2 ]
initial
begin
	ABUS_expected[2] = 1'bX;
end 
// expected ABUS[ 1 ]
initial
begin
	ABUS_expected[1] = 1'bX;
end 
// expected ABUS[ 0 ]
initial
begin
	ABUS_expected[0] = 1'bX;
end 

// expected RD
initial
begin
	RD_expected = 1'bX;
end 

// expected WR
initial
begin
	WR_expected = 1'bX;
end 
// expected LEN[ 1 ]
initial
begin
	LEN_expected[1] = 1'bX;
end 
// expected LEN[ 0 ]
initial
begin
	LEN_expected[0] = 1'bX;
end 
// expected PC[ 31 ]
initial
begin
	PC_expected[31] = 1'bX;
end 
// expected PC[ 30 ]
initial
begin
	PC_expected[30] = 1'bX;
end 
// expected PC[ 29 ]
initial
begin
	PC_expected[29] = 1'bX;
end 
// expected PC[ 28 ]
initial
begin
	PC_expected[28] = 1'bX;
end 
// expected PC[ 27 ]
initial
begin
	PC_expected[27] = 1'bX;
end 
// expected PC[ 26 ]
initial
begin
	PC_expected[26] = 1'bX;
end 
// expected PC[ 25 ]
initial
begin
	PC_expected[25] = 1'bX;
end 
// expected PC[ 24 ]
initial
begin
	PC_expected[24] = 1'bX;
end 
// expected PC[ 23 ]
initial
begin
	PC_expected[23] = 1'bX;
end 
// expected PC[ 22 ]
initial
begin
	PC_expected[22] = 1'bX;
end 
// expected PC[ 21 ]
initial
begin
	PC_expected[21] = 1'bX;
end 
// expected PC[ 20 ]
initial
begin
	PC_expected[20] = 1'bX;
end 
// expected PC[ 19 ]
initial
begin
	PC_expected[19] = 1'bX;
end 
// expected PC[ 18 ]
initial
begin
	PC_expected[18] = 1'bX;
end 
// expected PC[ 17 ]
initial
begin
	PC_expected[17] = 1'bX;
end 
// expected PC[ 16 ]
initial
begin
	PC_expected[16] = 1'bX;
end 
// expected PC[ 15 ]
initial
begin
	PC_expected[15] = 1'bX;
end 
// expected PC[ 14 ]
initial
begin
	PC_expected[14] = 1'bX;
end 
// expected PC[ 13 ]
initial
begin
	PC_expected[13] = 1'bX;
end 
// expected PC[ 12 ]
initial
begin
	PC_expected[12] = 1'bX;
end 
// expected PC[ 11 ]
initial
begin
	PC_expected[11] = 1'bX;
end 
// expected PC[ 10 ]
initial
begin
	PC_expected[10] = 1'bX;
end 
// expected PC[ 9 ]
initial
begin
	PC_expected[9] = 1'bX;
end 
// expected PC[ 8 ]
initial
begin
	PC_expected[8] = 1'bX;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
end 
// expected IR[ 31 ]
initial
begin
	IR_expected[31] = 1'bX;
end 
// expected IR[ 30 ]
initial
begin
	IR_expected[30] = 1'bX;
end 
// expected IR[ 29 ]
initial
begin
	IR_expected[29] = 1'bX;
end 
// expected IR[ 28 ]
initial
begin
	IR_expected[28] = 1'bX;
end 
// expected IR[ 27 ]
initial
begin
	IR_expected[27] = 1'bX;
end 
// expected IR[ 26 ]
initial
begin
	IR_expected[26] = 1'bX;
end 
// expected IR[ 25 ]
initial
begin
	IR_expected[25] = 1'bX;
end 
// expected IR[ 24 ]
initial
begin
	IR_expected[24] = 1'bX;
end 
// expected IR[ 23 ]
initial
begin
	IR_expected[23] = 1'bX;
end 
// expected IR[ 22 ]
initial
begin
	IR_expected[22] = 1'bX;
end 
// expected IR[ 21 ]
initial
begin
	IR_expected[21] = 1'bX;
end 
// expected IR[ 20 ]
initial
begin
	IR_expected[20] = 1'bX;
end 
// expected IR[ 19 ]
initial
begin
	IR_expected[19] = 1'bX;
end 
// expected IR[ 18 ]
initial
begin
	IR_expected[18] = 1'bX;
end 
// expected IR[ 17 ]
initial
begin
	IR_expected[17] = 1'bX;
end 
// expected IR[ 16 ]
initial
begin
	IR_expected[16] = 1'bX;
end 
// expected IR[ 15 ]
initial
begin
	IR_expected[15] = 1'bX;
end 
// expected IR[ 14 ]
initial
begin
	IR_expected[14] = 1'bX;
end 
// expected IR[ 13 ]
initial
begin
	IR_expected[13] = 1'bX;
end 
// expected IR[ 12 ]
initial
begin
	IR_expected[12] = 1'bX;
end 
// expected IR[ 11 ]
initial
begin
	IR_expected[11] = 1'bX;
end 
// expected IR[ 10 ]
initial
begin
	IR_expected[10] = 1'bX;
end 
// expected IR[ 9 ]
initial
begin
	IR_expected[9] = 1'bX;
end 
// expected IR[ 8 ]
initial
begin
	IR_expected[8] = 1'bX;
end 
// expected IR[ 7 ]
initial
begin
	IR_expected[7] = 1'bX;
end 
// expected IR[ 6 ]
initial
begin
	IR_expected[6] = 1'bX;
end 
// expected IR[ 5 ]
initial
begin
	IR_expected[5] = 1'bX;
end 
// expected IR[ 4 ]
initial
begin
	IR_expected[4] = 1'bX;
end 
// expected IR[ 3 ]
initial
begin
	IR_expected[3] = 1'bX;
end 
// expected IR[ 2 ]
initial
begin
	IR_expected[2] = 1'bX;
end 
// expected IR[ 1 ]
initial
begin
	IR_expected[1] = 1'bX;
end 
// expected IR[ 0 ]
initial
begin
	IR_expected[0] = 1'bX;
end 

// expected LD_IR
initial
begin
	LD_IR_expected = 1'bX;
end 

// expected LD_PC
initial
begin
	LD_PC_expected = 1'bX;
end 
// expected ADDR[ 31 ]
initial
begin
	ADDR_expected[31] = 1'bX;
end 
// expected ADDR[ 30 ]
initial
begin
	ADDR_expected[30] = 1'bX;
end 
// expected ADDR[ 29 ]
initial
begin
	ADDR_expected[29] = 1'bX;
end 
// expected ADDR[ 28 ]
initial
begin
	ADDR_expected[28] = 1'bX;
end 
// expected ADDR[ 27 ]
initial
begin
	ADDR_expected[27] = 1'bX;
end 
// expected ADDR[ 26 ]
initial
begin
	ADDR_expected[26] = 1'bX;
end 
// expected ADDR[ 25 ]
initial
begin
	ADDR_expected[25] = 1'bX;
end 
// expected ADDR[ 24 ]
initial
begin
	ADDR_expected[24] = 1'bX;
end 
// expected ADDR[ 23 ]
initial
begin
	ADDR_expected[23] = 1'bX;
end 
// expected ADDR[ 22 ]
initial
begin
	ADDR_expected[22] = 1'bX;
end 
// expected ADDR[ 21 ]
initial
begin
	ADDR_expected[21] = 1'bX;
end 
// expected ADDR[ 20 ]
initial
begin
	ADDR_expected[20] = 1'bX;
end 
// expected ADDR[ 19 ]
initial
begin
	ADDR_expected[19] = 1'bX;
end 
// expected ADDR[ 18 ]
initial
begin
	ADDR_expected[18] = 1'bX;
end 
// expected ADDR[ 17 ]
initial
begin
	ADDR_expected[17] = 1'bX;
end 
// expected ADDR[ 16 ]
initial
begin
	ADDR_expected[16] = 1'bX;
end 
// expected ADDR[ 15 ]
initial
begin
	ADDR_expected[15] = 1'bX;
end 
// expected ADDR[ 14 ]
initial
begin
	ADDR_expected[14] = 1'bX;
end 
// expected ADDR[ 13 ]
initial
begin
	ADDR_expected[13] = 1'bX;
end 
// expected ADDR[ 12 ]
initial
begin
	ADDR_expected[12] = 1'bX;
end 
// expected ADDR[ 11 ]
initial
begin
	ADDR_expected[11] = 1'bX;
end 
// expected ADDR[ 10 ]
initial
begin
	ADDR_expected[10] = 1'bX;
end 
// expected ADDR[ 9 ]
initial
begin
	ADDR_expected[9] = 1'bX;
end 
// expected ADDR[ 8 ]
initial
begin
	ADDR_expected[8] = 1'bX;
end 
// expected ADDR[ 7 ]
initial
begin
	ADDR_expected[7] = 1'bX;
end 
// expected ADDR[ 6 ]
initial
begin
	ADDR_expected[6] = 1'bX;
end 
// expected ADDR[ 5 ]
initial
begin
	ADDR_expected[5] = 1'bX;
end 
// expected ADDR[ 4 ]
initial
begin
	ADDR_expected[4] = 1'bX;
end 
// expected ADDR[ 3 ]
initial
begin
	ADDR_expected[3] = 1'bX;
end 
// expected ADDR[ 2 ]
initial
begin
	ADDR_expected[2] = 1'bX;
end 
// expected ADDR[ 1 ]
initial
begin
	ADDR_expected[1] = 1'bX;
end 
// expected ADDR[ 0 ]
initial
begin
	ADDR_expected[0] = 1'bX;
end 
// expected DATA[ 31 ]
initial
begin
	DATA_expected[31] = 1'bX;
end 
// expected DATA[ 30 ]
initial
begin
	DATA_expected[30] = 1'bX;
end 
// expected DATA[ 29 ]
initial
begin
	DATA_expected[29] = 1'bX;
end 
// expected DATA[ 28 ]
initial
begin
	DATA_expected[28] = 1'bX;
end 
// expected DATA[ 27 ]
initial
begin
	DATA_expected[27] = 1'bX;
end 
// expected DATA[ 26 ]
initial
begin
	DATA_expected[26] = 1'bX;
end 
// expected DATA[ 25 ]
initial
begin
	DATA_expected[25] = 1'bX;
end 
// expected DATA[ 24 ]
initial
begin
	DATA_expected[24] = 1'bX;
end 
// expected DATA[ 23 ]
initial
begin
	DATA_expected[23] = 1'bX;
end 
// expected DATA[ 22 ]
initial
begin
	DATA_expected[22] = 1'bX;
end 
// expected DATA[ 21 ]
initial
begin
	DATA_expected[21] = 1'bX;
end 
// expected DATA[ 20 ]
initial
begin
	DATA_expected[20] = 1'bX;
end 
// expected DATA[ 19 ]
initial
begin
	DATA_expected[19] = 1'bX;
end 
// expected DATA[ 18 ]
initial
begin
	DATA_expected[18] = 1'bX;
end 
// expected DATA[ 17 ]
initial
begin
	DATA_expected[17] = 1'bX;
end 
// expected DATA[ 16 ]
initial
begin
	DATA_expected[16] = 1'bX;
end 
// expected DATA[ 15 ]
initial
begin
	DATA_expected[15] = 1'bX;
end 
// expected DATA[ 14 ]
initial
begin
	DATA_expected[14] = 1'bX;
end 
// expected DATA[ 13 ]
initial
begin
	DATA_expected[13] = 1'bX;
end 
// expected DATA[ 12 ]
initial
begin
	DATA_expected[12] = 1'bX;
end 
// expected DATA[ 11 ]
initial
begin
	DATA_expected[11] = 1'bX;
end 
// expected DATA[ 10 ]
initial
begin
	DATA_expected[10] = 1'bX;
end 
// expected DATA[ 9 ]
initial
begin
	DATA_expected[9] = 1'bX;
end 
// expected DATA[ 8 ]
initial
begin
	DATA_expected[8] = 1'bX;
end 
// expected DATA[ 7 ]
initial
begin
	DATA_expected[7] = 1'bX;
end 
// expected DATA[ 6 ]
initial
begin
	DATA_expected[6] = 1'bX;
end 
// expected DATA[ 5 ]
initial
begin
	DATA_expected[5] = 1'bX;
end 
// expected DATA[ 4 ]
initial
begin
	DATA_expected[4] = 1'bX;
end 
// expected DATA[ 3 ]
initial
begin
	DATA_expected[3] = 1'bX;
end 
// expected DATA[ 2 ]
initial
begin
	DATA_expected[2] = 1'bX;
end 
// expected DATA[ 1 ]
initial
begin
	DATA_expected[1] = 1'bX;
end 
// expected DATA[ 0 ]
initial
begin
	DATA_expected[0] = 1'bX;
end 

// expected BRANCH
initial
begin
	BRANCH_expected = 1'bX;
end 

// expected BRC
initial
begin
	BRC_expected = 1'bX;
end 

// expected JAL
initial
begin
	JAL_expected = 1'bX;
end 

// expected JALR
initial
begin
	JALR_expected = 1'bX;
end 
// expected ALUOUT[ 31 ]
initial
begin
	ALUOUT_expected[31] = 1'bX;
end 
// expected ALUOUT[ 30 ]
initial
begin
	ALUOUT_expected[30] = 1'bX;
end 
// expected ALUOUT[ 29 ]
initial
begin
	ALUOUT_expected[29] = 1'bX;
end 
// expected ALUOUT[ 28 ]
initial
begin
	ALUOUT_expected[28] = 1'bX;
end 
// expected ALUOUT[ 27 ]
initial
begin
	ALUOUT_expected[27] = 1'bX;
end 
// expected ALUOUT[ 26 ]
initial
begin
	ALUOUT_expected[26] = 1'bX;
end 
// expected ALUOUT[ 25 ]
initial
begin
	ALUOUT_expected[25] = 1'bX;
end 
// expected ALUOUT[ 24 ]
initial
begin
	ALUOUT_expected[24] = 1'bX;
end 
// expected ALUOUT[ 23 ]
initial
begin
	ALUOUT_expected[23] = 1'bX;
end 
// expected ALUOUT[ 22 ]
initial
begin
	ALUOUT_expected[22] = 1'bX;
end 
// expected ALUOUT[ 21 ]
initial
begin
	ALUOUT_expected[21] = 1'bX;
end 
// expected ALUOUT[ 20 ]
initial
begin
	ALUOUT_expected[20] = 1'bX;
end 
// expected ALUOUT[ 19 ]
initial
begin
	ALUOUT_expected[19] = 1'bX;
end 
// expected ALUOUT[ 18 ]
initial
begin
	ALUOUT_expected[18] = 1'bX;
end 
// expected ALUOUT[ 17 ]
initial
begin
	ALUOUT_expected[17] = 1'bX;
end 
// expected ALUOUT[ 16 ]
initial
begin
	ALUOUT_expected[16] = 1'bX;
end 
// expected ALUOUT[ 15 ]
initial
begin
	ALUOUT_expected[15] = 1'bX;
end 
// expected ALUOUT[ 14 ]
initial
begin
	ALUOUT_expected[14] = 1'bX;
end 
// expected ALUOUT[ 13 ]
initial
begin
	ALUOUT_expected[13] = 1'bX;
end 
// expected ALUOUT[ 12 ]
initial
begin
	ALUOUT_expected[12] = 1'bX;
end 
// expected ALUOUT[ 11 ]
initial
begin
	ALUOUT_expected[11] = 1'bX;
end 
// expected ALUOUT[ 10 ]
initial
begin
	ALUOUT_expected[10] = 1'bX;
end 
// expected ALUOUT[ 9 ]
initial
begin
	ALUOUT_expected[9] = 1'bX;
end 
// expected ALUOUT[ 8 ]
initial
begin
	ALUOUT_expected[8] = 1'bX;
end 
// expected ALUOUT[ 7 ]
initial
begin
	ALUOUT_expected[7] = 1'bX;
end 
// expected ALUOUT[ 6 ]
initial
begin
	ALUOUT_expected[6] = 1'bX;
end 
// expected ALUOUT[ 5 ]
initial
begin
	ALUOUT_expected[5] = 1'bX;
end 
// expected ALUOUT[ 4 ]
initial
begin
	ALUOUT_expected[4] = 1'bX;
end 
// expected ALUOUT[ 3 ]
initial
begin
	ALUOUT_expected[3] = 1'bX;
end 
// expected ALUOUT[ 2 ]
initial
begin
	ALUOUT_expected[2] = 1'bX;
end 
// expected ALUOUT[ 1 ]
initial
begin
	ALUOUT_expected[1] = 1'bX;
end 
// expected ALUOUT[ 0 ]
initial
begin
	ALUOUT_expected[0] = 1'bX;
end 
// expected DATA_REG[ 31 ]
initial
begin
	DATA_REG_expected[31] = 1'bX;
end 
// expected DATA_REG[ 30 ]
initial
begin
	DATA_REG_expected[30] = 1'bX;
end 
// expected DATA_REG[ 29 ]
initial
begin
	DATA_REG_expected[29] = 1'bX;
end 
// expected DATA_REG[ 28 ]
initial
begin
	DATA_REG_expected[28] = 1'bX;
end 
// expected DATA_REG[ 27 ]
initial
begin
	DATA_REG_expected[27] = 1'bX;
end 
// expected DATA_REG[ 26 ]
initial
begin
	DATA_REG_expected[26] = 1'bX;
end 
// expected DATA_REG[ 25 ]
initial
begin
	DATA_REG_expected[25] = 1'bX;
end 
// expected DATA_REG[ 24 ]
initial
begin
	DATA_REG_expected[24] = 1'bX;
end 
// expected DATA_REG[ 23 ]
initial
begin
	DATA_REG_expected[23] = 1'bX;
end 
// expected DATA_REG[ 22 ]
initial
begin
	DATA_REG_expected[22] = 1'bX;
end 
// expected DATA_REG[ 21 ]
initial
begin
	DATA_REG_expected[21] = 1'bX;
end 
// expected DATA_REG[ 20 ]
initial
begin
	DATA_REG_expected[20] = 1'bX;
end 
// expected DATA_REG[ 19 ]
initial
begin
	DATA_REG_expected[19] = 1'bX;
end 
// expected DATA_REG[ 18 ]
initial
begin
	DATA_REG_expected[18] = 1'bX;
end 
// expected DATA_REG[ 17 ]
initial
begin
	DATA_REG_expected[17] = 1'bX;
end 
// expected DATA_REG[ 16 ]
initial
begin
	DATA_REG_expected[16] = 1'bX;
end 
// expected DATA_REG[ 15 ]
initial
begin
	DATA_REG_expected[15] = 1'bX;
end 
// expected DATA_REG[ 14 ]
initial
begin
	DATA_REG_expected[14] = 1'bX;
end 
// expected DATA_REG[ 13 ]
initial
begin
	DATA_REG_expected[13] = 1'bX;
end 
// expected DATA_REG[ 12 ]
initial
begin
	DATA_REG_expected[12] = 1'bX;
end 
// expected DATA_REG[ 11 ]
initial
begin
	DATA_REG_expected[11] = 1'bX;
end 
// expected DATA_REG[ 10 ]
initial
begin
	DATA_REG_expected[10] = 1'bX;
end 
// expected DATA_REG[ 9 ]
initial
begin
	DATA_REG_expected[9] = 1'bX;
end 
// expected DATA_REG[ 8 ]
initial
begin
	DATA_REG_expected[8] = 1'bX;
end 
// expected DATA_REG[ 7 ]
initial
begin
	DATA_REG_expected[7] = 1'bX;
end 
// expected DATA_REG[ 6 ]
initial
begin
	DATA_REG_expected[6] = 1'bX;
end 
// expected DATA_REG[ 5 ]
initial
begin
	DATA_REG_expected[5] = 1'bX;
end 
// expected DATA_REG[ 4 ]
initial
begin
	DATA_REG_expected[4] = 1'bX;
end 
// expected DATA_REG[ 3 ]
initial
begin
	DATA_REG_expected[3] = 1'bX;
end 
// expected DATA_REG[ 2 ]
initial
begin
	DATA_REG_expected[2] = 1'bX;
end 
// expected DATA_REG[ 1 ]
initial
begin
	DATA_REG_expected[1] = 1'bX;
end 
// expected DATA_REG[ 0 ]
initial
begin
	DATA_REG_expected[0] = 1'bX;
end 

// expected LD_REG
initial
begin
	LD_REG_expected = 1'bX;
end 
// generate trigger
always @(ABUS_expected or ABUS or ADDR_expected or ADDR or ALUOUT_expected or ALUOUT or BRANCH_expected or BRANCH or BRC_expected or BRC or DATA_expected or DATA or DATA_REG_expected or DATA_REG or DBUS_expected or DBUS or IR_expected or IR or JAL_expected or JAL or JALR_expected or JALR or LD_IR_expected or LD_IR or LD_PC_expected or LD_PC or LD_REG_expected or LD_REG or LEN_expected or LEN or PC_expected or PC or RD_expected or RD or WR_expected or WR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ABUS = %b | expected ADDR = %b | expected ALUOUT = %b | expected BRANCH = %b | expected BRC = %b | expected DATA = %b | expected DATA_REG = %b | expected DBUS = %b | expected IR = %b | expected JAL = %b | expected JALR = %b | expected LD_IR = %b | expected LD_PC = %b | expected LD_REG = %b | expected LEN = %b | expected PC = %b | expected RD = %b | expected WR = %b | ",ABUS_expected_prev,ADDR_expected_prev,ALUOUT_expected_prev,BRANCH_expected_prev,BRC_expected_prev,DATA_expected_prev,DATA_REG_expected_prev,DBUS_expected_prev,IR_expected_prev,JAL_expected_prev,JALR_expected_prev,LD_IR_expected_prev,LD_PC_expected_prev,LD_REG_expected_prev,LEN_expected_prev,PC_expected_prev,RD_expected_prev,WR_expected_prev);
	$display("| real ABUS = %b | real ADDR = %b | real ALUOUT = %b | real BRANCH = %b | real BRC = %b | real DATA = %b | real DATA_REG = %b | real DBUS = %b | real IR = %b | real JAL = %b | real JALR = %b | real LD_IR = %b | real LD_PC = %b | real LD_REG = %b | real LEN = %b | real PC = %b | real RD = %b | real WR = %b | ",ABUS_prev,ADDR_prev,ALUOUT_prev,BRANCH_prev,BRC_prev,DATA_prev,DATA_REG_prev,DBUS_prev,IR_prev,JAL_prev,JALR_prev,LD_IR_prev,LD_PC_prev,LD_REG_prev,LEN_prev,PC_prev,RD_prev,WR_prev);
`endif
	if (
		( ABUS_expected_prev[0] !== 1'bx ) && ( ABUS_prev[0] !== ABUS_expected_prev[0] )
		&& ((ABUS_expected_prev[0] !== last_ABUS_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[0] = ABUS_expected_prev[0];
	end
	if (
		( ABUS_expected_prev[1] !== 1'bx ) && ( ABUS_prev[1] !== ABUS_expected_prev[1] )
		&& ((ABUS_expected_prev[1] !== last_ABUS_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[1] = ABUS_expected_prev[1];
	end
	if (
		( ABUS_expected_prev[2] !== 1'bx ) && ( ABUS_prev[2] !== ABUS_expected_prev[2] )
		&& ((ABUS_expected_prev[2] !== last_ABUS_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[2] = ABUS_expected_prev[2];
	end
	if (
		( ABUS_expected_prev[3] !== 1'bx ) && ( ABUS_prev[3] !== ABUS_expected_prev[3] )
		&& ((ABUS_expected_prev[3] !== last_ABUS_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[3] = ABUS_expected_prev[3];
	end
	if (
		( ABUS_expected_prev[4] !== 1'bx ) && ( ABUS_prev[4] !== ABUS_expected_prev[4] )
		&& ((ABUS_expected_prev[4] !== last_ABUS_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[4] = ABUS_expected_prev[4];
	end
	if (
		( ABUS_expected_prev[5] !== 1'bx ) && ( ABUS_prev[5] !== ABUS_expected_prev[5] )
		&& ((ABUS_expected_prev[5] !== last_ABUS_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[5] = ABUS_expected_prev[5];
	end
	if (
		( ABUS_expected_prev[6] !== 1'bx ) && ( ABUS_prev[6] !== ABUS_expected_prev[6] )
		&& ((ABUS_expected_prev[6] !== last_ABUS_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[6] = ABUS_expected_prev[6];
	end
	if (
		( ABUS_expected_prev[7] !== 1'bx ) && ( ABUS_prev[7] !== ABUS_expected_prev[7] )
		&& ((ABUS_expected_prev[7] !== last_ABUS_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[7] = ABUS_expected_prev[7];
	end
	if (
		( ABUS_expected_prev[8] !== 1'bx ) && ( ABUS_prev[8] !== ABUS_expected_prev[8] )
		&& ((ABUS_expected_prev[8] !== last_ABUS_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[8] = ABUS_expected_prev[8];
	end
	if (
		( ABUS_expected_prev[9] !== 1'bx ) && ( ABUS_prev[9] !== ABUS_expected_prev[9] )
		&& ((ABUS_expected_prev[9] !== last_ABUS_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[9] = ABUS_expected_prev[9];
	end
	if (
		( ABUS_expected_prev[10] !== 1'bx ) && ( ABUS_prev[10] !== ABUS_expected_prev[10] )
		&& ((ABUS_expected_prev[10] !== last_ABUS_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[10] = ABUS_expected_prev[10];
	end
	if (
		( ABUS_expected_prev[11] !== 1'bx ) && ( ABUS_prev[11] !== ABUS_expected_prev[11] )
		&& ((ABUS_expected_prev[11] !== last_ABUS_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[11] = ABUS_expected_prev[11];
	end
	if (
		( ABUS_expected_prev[12] !== 1'bx ) && ( ABUS_prev[12] !== ABUS_expected_prev[12] )
		&& ((ABUS_expected_prev[12] !== last_ABUS_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[12] = ABUS_expected_prev[12];
	end
	if (
		( ABUS_expected_prev[13] !== 1'bx ) && ( ABUS_prev[13] !== ABUS_expected_prev[13] )
		&& ((ABUS_expected_prev[13] !== last_ABUS_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[13] = ABUS_expected_prev[13];
	end
	if (
		( ABUS_expected_prev[14] !== 1'bx ) && ( ABUS_prev[14] !== ABUS_expected_prev[14] )
		&& ((ABUS_expected_prev[14] !== last_ABUS_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[14] = ABUS_expected_prev[14];
	end
	if (
		( ABUS_expected_prev[15] !== 1'bx ) && ( ABUS_prev[15] !== ABUS_expected_prev[15] )
		&& ((ABUS_expected_prev[15] !== last_ABUS_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[15] = ABUS_expected_prev[15];
	end
	if (
		( ABUS_expected_prev[16] !== 1'bx ) && ( ABUS_prev[16] !== ABUS_expected_prev[16] )
		&& ((ABUS_expected_prev[16] !== last_ABUS_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[16] = ABUS_expected_prev[16];
	end
	if (
		( ABUS_expected_prev[17] !== 1'bx ) && ( ABUS_prev[17] !== ABUS_expected_prev[17] )
		&& ((ABUS_expected_prev[17] !== last_ABUS_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[17] = ABUS_expected_prev[17];
	end
	if (
		( ABUS_expected_prev[18] !== 1'bx ) && ( ABUS_prev[18] !== ABUS_expected_prev[18] )
		&& ((ABUS_expected_prev[18] !== last_ABUS_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[18] = ABUS_expected_prev[18];
	end
	if (
		( ABUS_expected_prev[19] !== 1'bx ) && ( ABUS_prev[19] !== ABUS_expected_prev[19] )
		&& ((ABUS_expected_prev[19] !== last_ABUS_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[19] = ABUS_expected_prev[19];
	end
	if (
		( ABUS_expected_prev[20] !== 1'bx ) && ( ABUS_prev[20] !== ABUS_expected_prev[20] )
		&& ((ABUS_expected_prev[20] !== last_ABUS_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[20] = ABUS_expected_prev[20];
	end
	if (
		( ABUS_expected_prev[21] !== 1'bx ) && ( ABUS_prev[21] !== ABUS_expected_prev[21] )
		&& ((ABUS_expected_prev[21] !== last_ABUS_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[21] = ABUS_expected_prev[21];
	end
	if (
		( ABUS_expected_prev[22] !== 1'bx ) && ( ABUS_prev[22] !== ABUS_expected_prev[22] )
		&& ((ABUS_expected_prev[22] !== last_ABUS_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[22] = ABUS_expected_prev[22];
	end
	if (
		( ABUS_expected_prev[23] !== 1'bx ) && ( ABUS_prev[23] !== ABUS_expected_prev[23] )
		&& ((ABUS_expected_prev[23] !== last_ABUS_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[23] = ABUS_expected_prev[23];
	end
	if (
		( ABUS_expected_prev[24] !== 1'bx ) && ( ABUS_prev[24] !== ABUS_expected_prev[24] )
		&& ((ABUS_expected_prev[24] !== last_ABUS_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[24] = ABUS_expected_prev[24];
	end
	if (
		( ABUS_expected_prev[25] !== 1'bx ) && ( ABUS_prev[25] !== ABUS_expected_prev[25] )
		&& ((ABUS_expected_prev[25] !== last_ABUS_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[25] = ABUS_expected_prev[25];
	end
	if (
		( ABUS_expected_prev[26] !== 1'bx ) && ( ABUS_prev[26] !== ABUS_expected_prev[26] )
		&& ((ABUS_expected_prev[26] !== last_ABUS_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[26] = ABUS_expected_prev[26];
	end
	if (
		( ABUS_expected_prev[27] !== 1'bx ) && ( ABUS_prev[27] !== ABUS_expected_prev[27] )
		&& ((ABUS_expected_prev[27] !== last_ABUS_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[27] = ABUS_expected_prev[27];
	end
	if (
		( ABUS_expected_prev[28] !== 1'bx ) && ( ABUS_prev[28] !== ABUS_expected_prev[28] )
		&& ((ABUS_expected_prev[28] !== last_ABUS_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[28] = ABUS_expected_prev[28];
	end
	if (
		( ABUS_expected_prev[29] !== 1'bx ) && ( ABUS_prev[29] !== ABUS_expected_prev[29] )
		&& ((ABUS_expected_prev[29] !== last_ABUS_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[29] = ABUS_expected_prev[29];
	end
	if (
		( ABUS_expected_prev[30] !== 1'bx ) && ( ABUS_prev[30] !== ABUS_expected_prev[30] )
		&& ((ABUS_expected_prev[30] !== last_ABUS_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[30] = ABUS_expected_prev[30];
	end
	if (
		( ABUS_expected_prev[31] !== 1'bx ) && ( ABUS_prev[31] !== ABUS_expected_prev[31] )
		&& ((ABUS_expected_prev[31] !== last_ABUS_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[31] = ABUS_expected_prev[31];
	end
	if (
		( ADDR_expected_prev[0] !== 1'bx ) && ( ADDR_prev[0] !== ADDR_expected_prev[0] )
		&& ((ADDR_expected_prev[0] !== last_ADDR_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[0] = ADDR_expected_prev[0];
	end
	if (
		( ADDR_expected_prev[1] !== 1'bx ) && ( ADDR_prev[1] !== ADDR_expected_prev[1] )
		&& ((ADDR_expected_prev[1] !== last_ADDR_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[1] = ADDR_expected_prev[1];
	end
	if (
		( ADDR_expected_prev[2] !== 1'bx ) && ( ADDR_prev[2] !== ADDR_expected_prev[2] )
		&& ((ADDR_expected_prev[2] !== last_ADDR_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[2] = ADDR_expected_prev[2];
	end
	if (
		( ADDR_expected_prev[3] !== 1'bx ) && ( ADDR_prev[3] !== ADDR_expected_prev[3] )
		&& ((ADDR_expected_prev[3] !== last_ADDR_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[3] = ADDR_expected_prev[3];
	end
	if (
		( ADDR_expected_prev[4] !== 1'bx ) && ( ADDR_prev[4] !== ADDR_expected_prev[4] )
		&& ((ADDR_expected_prev[4] !== last_ADDR_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[4] = ADDR_expected_prev[4];
	end
	if (
		( ADDR_expected_prev[5] !== 1'bx ) && ( ADDR_prev[5] !== ADDR_expected_prev[5] )
		&& ((ADDR_expected_prev[5] !== last_ADDR_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[5] = ADDR_expected_prev[5];
	end
	if (
		( ADDR_expected_prev[6] !== 1'bx ) && ( ADDR_prev[6] !== ADDR_expected_prev[6] )
		&& ((ADDR_expected_prev[6] !== last_ADDR_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[6] = ADDR_expected_prev[6];
	end
	if (
		( ADDR_expected_prev[7] !== 1'bx ) && ( ADDR_prev[7] !== ADDR_expected_prev[7] )
		&& ((ADDR_expected_prev[7] !== last_ADDR_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[7] = ADDR_expected_prev[7];
	end
	if (
		( ADDR_expected_prev[8] !== 1'bx ) && ( ADDR_prev[8] !== ADDR_expected_prev[8] )
		&& ((ADDR_expected_prev[8] !== last_ADDR_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[8] = ADDR_expected_prev[8];
	end
	if (
		( ADDR_expected_prev[9] !== 1'bx ) && ( ADDR_prev[9] !== ADDR_expected_prev[9] )
		&& ((ADDR_expected_prev[9] !== last_ADDR_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[9] = ADDR_expected_prev[9];
	end
	if (
		( ADDR_expected_prev[10] !== 1'bx ) && ( ADDR_prev[10] !== ADDR_expected_prev[10] )
		&& ((ADDR_expected_prev[10] !== last_ADDR_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[10] = ADDR_expected_prev[10];
	end
	if (
		( ADDR_expected_prev[11] !== 1'bx ) && ( ADDR_prev[11] !== ADDR_expected_prev[11] )
		&& ((ADDR_expected_prev[11] !== last_ADDR_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[11] = ADDR_expected_prev[11];
	end
	if (
		( ADDR_expected_prev[12] !== 1'bx ) && ( ADDR_prev[12] !== ADDR_expected_prev[12] )
		&& ((ADDR_expected_prev[12] !== last_ADDR_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[12] = ADDR_expected_prev[12];
	end
	if (
		( ADDR_expected_prev[13] !== 1'bx ) && ( ADDR_prev[13] !== ADDR_expected_prev[13] )
		&& ((ADDR_expected_prev[13] !== last_ADDR_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[13] = ADDR_expected_prev[13];
	end
	if (
		( ADDR_expected_prev[14] !== 1'bx ) && ( ADDR_prev[14] !== ADDR_expected_prev[14] )
		&& ((ADDR_expected_prev[14] !== last_ADDR_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[14] = ADDR_expected_prev[14];
	end
	if (
		( ADDR_expected_prev[15] !== 1'bx ) && ( ADDR_prev[15] !== ADDR_expected_prev[15] )
		&& ((ADDR_expected_prev[15] !== last_ADDR_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[15] = ADDR_expected_prev[15];
	end
	if (
		( ADDR_expected_prev[16] !== 1'bx ) && ( ADDR_prev[16] !== ADDR_expected_prev[16] )
		&& ((ADDR_expected_prev[16] !== last_ADDR_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[16] = ADDR_expected_prev[16];
	end
	if (
		( ADDR_expected_prev[17] !== 1'bx ) && ( ADDR_prev[17] !== ADDR_expected_prev[17] )
		&& ((ADDR_expected_prev[17] !== last_ADDR_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[17] = ADDR_expected_prev[17];
	end
	if (
		( ADDR_expected_prev[18] !== 1'bx ) && ( ADDR_prev[18] !== ADDR_expected_prev[18] )
		&& ((ADDR_expected_prev[18] !== last_ADDR_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[18] = ADDR_expected_prev[18];
	end
	if (
		( ADDR_expected_prev[19] !== 1'bx ) && ( ADDR_prev[19] !== ADDR_expected_prev[19] )
		&& ((ADDR_expected_prev[19] !== last_ADDR_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[19] = ADDR_expected_prev[19];
	end
	if (
		( ADDR_expected_prev[20] !== 1'bx ) && ( ADDR_prev[20] !== ADDR_expected_prev[20] )
		&& ((ADDR_expected_prev[20] !== last_ADDR_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[20] = ADDR_expected_prev[20];
	end
	if (
		( ADDR_expected_prev[21] !== 1'bx ) && ( ADDR_prev[21] !== ADDR_expected_prev[21] )
		&& ((ADDR_expected_prev[21] !== last_ADDR_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[21] = ADDR_expected_prev[21];
	end
	if (
		( ADDR_expected_prev[22] !== 1'bx ) && ( ADDR_prev[22] !== ADDR_expected_prev[22] )
		&& ((ADDR_expected_prev[22] !== last_ADDR_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[22] = ADDR_expected_prev[22];
	end
	if (
		( ADDR_expected_prev[23] !== 1'bx ) && ( ADDR_prev[23] !== ADDR_expected_prev[23] )
		&& ((ADDR_expected_prev[23] !== last_ADDR_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[23] = ADDR_expected_prev[23];
	end
	if (
		( ADDR_expected_prev[24] !== 1'bx ) && ( ADDR_prev[24] !== ADDR_expected_prev[24] )
		&& ((ADDR_expected_prev[24] !== last_ADDR_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[24] = ADDR_expected_prev[24];
	end
	if (
		( ADDR_expected_prev[25] !== 1'bx ) && ( ADDR_prev[25] !== ADDR_expected_prev[25] )
		&& ((ADDR_expected_prev[25] !== last_ADDR_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[25] = ADDR_expected_prev[25];
	end
	if (
		( ADDR_expected_prev[26] !== 1'bx ) && ( ADDR_prev[26] !== ADDR_expected_prev[26] )
		&& ((ADDR_expected_prev[26] !== last_ADDR_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[26] = ADDR_expected_prev[26];
	end
	if (
		( ADDR_expected_prev[27] !== 1'bx ) && ( ADDR_prev[27] !== ADDR_expected_prev[27] )
		&& ((ADDR_expected_prev[27] !== last_ADDR_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[27] = ADDR_expected_prev[27];
	end
	if (
		( ADDR_expected_prev[28] !== 1'bx ) && ( ADDR_prev[28] !== ADDR_expected_prev[28] )
		&& ((ADDR_expected_prev[28] !== last_ADDR_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[28] = ADDR_expected_prev[28];
	end
	if (
		( ADDR_expected_prev[29] !== 1'bx ) && ( ADDR_prev[29] !== ADDR_expected_prev[29] )
		&& ((ADDR_expected_prev[29] !== last_ADDR_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[29] = ADDR_expected_prev[29];
	end
	if (
		( ADDR_expected_prev[30] !== 1'bx ) && ( ADDR_prev[30] !== ADDR_expected_prev[30] )
		&& ((ADDR_expected_prev[30] !== last_ADDR_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[30] = ADDR_expected_prev[30];
	end
	if (
		( ADDR_expected_prev[31] !== 1'bx ) && ( ADDR_prev[31] !== ADDR_expected_prev[31] )
		&& ((ADDR_expected_prev[31] !== last_ADDR_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADDR_exp[31] = ADDR_expected_prev[31];
	end
	if (
		( ALUOUT_expected_prev[0] !== 1'bx ) && ( ALUOUT_prev[0] !== ALUOUT_expected_prev[0] )
		&& ((ALUOUT_expected_prev[0] !== last_ALUOUT_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[0] = ALUOUT_expected_prev[0];
	end
	if (
		( ALUOUT_expected_prev[1] !== 1'bx ) && ( ALUOUT_prev[1] !== ALUOUT_expected_prev[1] )
		&& ((ALUOUT_expected_prev[1] !== last_ALUOUT_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[1] = ALUOUT_expected_prev[1];
	end
	if (
		( ALUOUT_expected_prev[2] !== 1'bx ) && ( ALUOUT_prev[2] !== ALUOUT_expected_prev[2] )
		&& ((ALUOUT_expected_prev[2] !== last_ALUOUT_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[2] = ALUOUT_expected_prev[2];
	end
	if (
		( ALUOUT_expected_prev[3] !== 1'bx ) && ( ALUOUT_prev[3] !== ALUOUT_expected_prev[3] )
		&& ((ALUOUT_expected_prev[3] !== last_ALUOUT_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[3] = ALUOUT_expected_prev[3];
	end
	if (
		( ALUOUT_expected_prev[4] !== 1'bx ) && ( ALUOUT_prev[4] !== ALUOUT_expected_prev[4] )
		&& ((ALUOUT_expected_prev[4] !== last_ALUOUT_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[4] = ALUOUT_expected_prev[4];
	end
	if (
		( ALUOUT_expected_prev[5] !== 1'bx ) && ( ALUOUT_prev[5] !== ALUOUT_expected_prev[5] )
		&& ((ALUOUT_expected_prev[5] !== last_ALUOUT_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[5] = ALUOUT_expected_prev[5];
	end
	if (
		( ALUOUT_expected_prev[6] !== 1'bx ) && ( ALUOUT_prev[6] !== ALUOUT_expected_prev[6] )
		&& ((ALUOUT_expected_prev[6] !== last_ALUOUT_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[6] = ALUOUT_expected_prev[6];
	end
	if (
		( ALUOUT_expected_prev[7] !== 1'bx ) && ( ALUOUT_prev[7] !== ALUOUT_expected_prev[7] )
		&& ((ALUOUT_expected_prev[7] !== last_ALUOUT_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[7] = ALUOUT_expected_prev[7];
	end
	if (
		( ALUOUT_expected_prev[8] !== 1'bx ) && ( ALUOUT_prev[8] !== ALUOUT_expected_prev[8] )
		&& ((ALUOUT_expected_prev[8] !== last_ALUOUT_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[8] = ALUOUT_expected_prev[8];
	end
	if (
		( ALUOUT_expected_prev[9] !== 1'bx ) && ( ALUOUT_prev[9] !== ALUOUT_expected_prev[9] )
		&& ((ALUOUT_expected_prev[9] !== last_ALUOUT_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[9] = ALUOUT_expected_prev[9];
	end
	if (
		( ALUOUT_expected_prev[10] !== 1'bx ) && ( ALUOUT_prev[10] !== ALUOUT_expected_prev[10] )
		&& ((ALUOUT_expected_prev[10] !== last_ALUOUT_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[10] = ALUOUT_expected_prev[10];
	end
	if (
		( ALUOUT_expected_prev[11] !== 1'bx ) && ( ALUOUT_prev[11] !== ALUOUT_expected_prev[11] )
		&& ((ALUOUT_expected_prev[11] !== last_ALUOUT_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[11] = ALUOUT_expected_prev[11];
	end
	if (
		( ALUOUT_expected_prev[12] !== 1'bx ) && ( ALUOUT_prev[12] !== ALUOUT_expected_prev[12] )
		&& ((ALUOUT_expected_prev[12] !== last_ALUOUT_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[12] = ALUOUT_expected_prev[12];
	end
	if (
		( ALUOUT_expected_prev[13] !== 1'bx ) && ( ALUOUT_prev[13] !== ALUOUT_expected_prev[13] )
		&& ((ALUOUT_expected_prev[13] !== last_ALUOUT_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[13] = ALUOUT_expected_prev[13];
	end
	if (
		( ALUOUT_expected_prev[14] !== 1'bx ) && ( ALUOUT_prev[14] !== ALUOUT_expected_prev[14] )
		&& ((ALUOUT_expected_prev[14] !== last_ALUOUT_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[14] = ALUOUT_expected_prev[14];
	end
	if (
		( ALUOUT_expected_prev[15] !== 1'bx ) && ( ALUOUT_prev[15] !== ALUOUT_expected_prev[15] )
		&& ((ALUOUT_expected_prev[15] !== last_ALUOUT_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[15] = ALUOUT_expected_prev[15];
	end
	if (
		( ALUOUT_expected_prev[16] !== 1'bx ) && ( ALUOUT_prev[16] !== ALUOUT_expected_prev[16] )
		&& ((ALUOUT_expected_prev[16] !== last_ALUOUT_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[16] = ALUOUT_expected_prev[16];
	end
	if (
		( ALUOUT_expected_prev[17] !== 1'bx ) && ( ALUOUT_prev[17] !== ALUOUT_expected_prev[17] )
		&& ((ALUOUT_expected_prev[17] !== last_ALUOUT_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[17] = ALUOUT_expected_prev[17];
	end
	if (
		( ALUOUT_expected_prev[18] !== 1'bx ) && ( ALUOUT_prev[18] !== ALUOUT_expected_prev[18] )
		&& ((ALUOUT_expected_prev[18] !== last_ALUOUT_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[18] = ALUOUT_expected_prev[18];
	end
	if (
		( ALUOUT_expected_prev[19] !== 1'bx ) && ( ALUOUT_prev[19] !== ALUOUT_expected_prev[19] )
		&& ((ALUOUT_expected_prev[19] !== last_ALUOUT_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[19] = ALUOUT_expected_prev[19];
	end
	if (
		( ALUOUT_expected_prev[20] !== 1'bx ) && ( ALUOUT_prev[20] !== ALUOUT_expected_prev[20] )
		&& ((ALUOUT_expected_prev[20] !== last_ALUOUT_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[20] = ALUOUT_expected_prev[20];
	end
	if (
		( ALUOUT_expected_prev[21] !== 1'bx ) && ( ALUOUT_prev[21] !== ALUOUT_expected_prev[21] )
		&& ((ALUOUT_expected_prev[21] !== last_ALUOUT_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[21] = ALUOUT_expected_prev[21];
	end
	if (
		( ALUOUT_expected_prev[22] !== 1'bx ) && ( ALUOUT_prev[22] !== ALUOUT_expected_prev[22] )
		&& ((ALUOUT_expected_prev[22] !== last_ALUOUT_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[22] = ALUOUT_expected_prev[22];
	end
	if (
		( ALUOUT_expected_prev[23] !== 1'bx ) && ( ALUOUT_prev[23] !== ALUOUT_expected_prev[23] )
		&& ((ALUOUT_expected_prev[23] !== last_ALUOUT_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[23] = ALUOUT_expected_prev[23];
	end
	if (
		( ALUOUT_expected_prev[24] !== 1'bx ) && ( ALUOUT_prev[24] !== ALUOUT_expected_prev[24] )
		&& ((ALUOUT_expected_prev[24] !== last_ALUOUT_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[24] = ALUOUT_expected_prev[24];
	end
	if (
		( ALUOUT_expected_prev[25] !== 1'bx ) && ( ALUOUT_prev[25] !== ALUOUT_expected_prev[25] )
		&& ((ALUOUT_expected_prev[25] !== last_ALUOUT_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[25] = ALUOUT_expected_prev[25];
	end
	if (
		( ALUOUT_expected_prev[26] !== 1'bx ) && ( ALUOUT_prev[26] !== ALUOUT_expected_prev[26] )
		&& ((ALUOUT_expected_prev[26] !== last_ALUOUT_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[26] = ALUOUT_expected_prev[26];
	end
	if (
		( ALUOUT_expected_prev[27] !== 1'bx ) && ( ALUOUT_prev[27] !== ALUOUT_expected_prev[27] )
		&& ((ALUOUT_expected_prev[27] !== last_ALUOUT_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[27] = ALUOUT_expected_prev[27];
	end
	if (
		( ALUOUT_expected_prev[28] !== 1'bx ) && ( ALUOUT_prev[28] !== ALUOUT_expected_prev[28] )
		&& ((ALUOUT_expected_prev[28] !== last_ALUOUT_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[28] = ALUOUT_expected_prev[28];
	end
	if (
		( ALUOUT_expected_prev[29] !== 1'bx ) && ( ALUOUT_prev[29] !== ALUOUT_expected_prev[29] )
		&& ((ALUOUT_expected_prev[29] !== last_ALUOUT_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[29] = ALUOUT_expected_prev[29];
	end
	if (
		( ALUOUT_expected_prev[30] !== 1'bx ) && ( ALUOUT_prev[30] !== ALUOUT_expected_prev[30] )
		&& ((ALUOUT_expected_prev[30] !== last_ALUOUT_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[30] = ALUOUT_expected_prev[30];
	end
	if (
		( ALUOUT_expected_prev[31] !== 1'bx ) && ( ALUOUT_prev[31] !== ALUOUT_expected_prev[31] )
		&& ((ALUOUT_expected_prev[31] !== last_ALUOUT_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOUT_exp[31] = ALUOUT_expected_prev[31];
	end
	if (
		( BRANCH_expected_prev !== 1'bx ) && ( BRANCH_prev !== BRANCH_expected_prev )
		&& ((BRANCH_expected_prev !== last_BRANCH_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BRANCH :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BRANCH_expected_prev);
		$display ("     Real value = %b", BRANCH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BRANCH_exp = BRANCH_expected_prev;
	end
	if (
		( BRC_expected_prev !== 1'bx ) && ( BRC_prev !== BRC_expected_prev )
		&& ((BRC_expected_prev !== last_BRC_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BRC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BRC_expected_prev);
		$display ("     Real value = %b", BRC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_BRC_exp = BRC_expected_prev;
	end
	if (
		( DATA_expected_prev[0] !== 1'bx ) && ( DATA_prev[0] !== DATA_expected_prev[0] )
		&& ((DATA_expected_prev[0] !== last_DATA_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[0] = DATA_expected_prev[0];
	end
	if (
		( DATA_expected_prev[1] !== 1'bx ) && ( DATA_prev[1] !== DATA_expected_prev[1] )
		&& ((DATA_expected_prev[1] !== last_DATA_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[1] = DATA_expected_prev[1];
	end
	if (
		( DATA_expected_prev[2] !== 1'bx ) && ( DATA_prev[2] !== DATA_expected_prev[2] )
		&& ((DATA_expected_prev[2] !== last_DATA_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[2] = DATA_expected_prev[2];
	end
	if (
		( DATA_expected_prev[3] !== 1'bx ) && ( DATA_prev[3] !== DATA_expected_prev[3] )
		&& ((DATA_expected_prev[3] !== last_DATA_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[3] = DATA_expected_prev[3];
	end
	if (
		( DATA_expected_prev[4] !== 1'bx ) && ( DATA_prev[4] !== DATA_expected_prev[4] )
		&& ((DATA_expected_prev[4] !== last_DATA_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[4] = DATA_expected_prev[4];
	end
	if (
		( DATA_expected_prev[5] !== 1'bx ) && ( DATA_prev[5] !== DATA_expected_prev[5] )
		&& ((DATA_expected_prev[5] !== last_DATA_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[5] = DATA_expected_prev[5];
	end
	if (
		( DATA_expected_prev[6] !== 1'bx ) && ( DATA_prev[6] !== DATA_expected_prev[6] )
		&& ((DATA_expected_prev[6] !== last_DATA_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[6] = DATA_expected_prev[6];
	end
	if (
		( DATA_expected_prev[7] !== 1'bx ) && ( DATA_prev[7] !== DATA_expected_prev[7] )
		&& ((DATA_expected_prev[7] !== last_DATA_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[7] = DATA_expected_prev[7];
	end
	if (
		( DATA_expected_prev[8] !== 1'bx ) && ( DATA_prev[8] !== DATA_expected_prev[8] )
		&& ((DATA_expected_prev[8] !== last_DATA_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[8] = DATA_expected_prev[8];
	end
	if (
		( DATA_expected_prev[9] !== 1'bx ) && ( DATA_prev[9] !== DATA_expected_prev[9] )
		&& ((DATA_expected_prev[9] !== last_DATA_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[9] = DATA_expected_prev[9];
	end
	if (
		( DATA_expected_prev[10] !== 1'bx ) && ( DATA_prev[10] !== DATA_expected_prev[10] )
		&& ((DATA_expected_prev[10] !== last_DATA_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[10] = DATA_expected_prev[10];
	end
	if (
		( DATA_expected_prev[11] !== 1'bx ) && ( DATA_prev[11] !== DATA_expected_prev[11] )
		&& ((DATA_expected_prev[11] !== last_DATA_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[11] = DATA_expected_prev[11];
	end
	if (
		( DATA_expected_prev[12] !== 1'bx ) && ( DATA_prev[12] !== DATA_expected_prev[12] )
		&& ((DATA_expected_prev[12] !== last_DATA_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[12] = DATA_expected_prev[12];
	end
	if (
		( DATA_expected_prev[13] !== 1'bx ) && ( DATA_prev[13] !== DATA_expected_prev[13] )
		&& ((DATA_expected_prev[13] !== last_DATA_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[13] = DATA_expected_prev[13];
	end
	if (
		( DATA_expected_prev[14] !== 1'bx ) && ( DATA_prev[14] !== DATA_expected_prev[14] )
		&& ((DATA_expected_prev[14] !== last_DATA_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[14] = DATA_expected_prev[14];
	end
	if (
		( DATA_expected_prev[15] !== 1'bx ) && ( DATA_prev[15] !== DATA_expected_prev[15] )
		&& ((DATA_expected_prev[15] !== last_DATA_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[15] = DATA_expected_prev[15];
	end
	if (
		( DATA_expected_prev[16] !== 1'bx ) && ( DATA_prev[16] !== DATA_expected_prev[16] )
		&& ((DATA_expected_prev[16] !== last_DATA_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[16] = DATA_expected_prev[16];
	end
	if (
		( DATA_expected_prev[17] !== 1'bx ) && ( DATA_prev[17] !== DATA_expected_prev[17] )
		&& ((DATA_expected_prev[17] !== last_DATA_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[17] = DATA_expected_prev[17];
	end
	if (
		( DATA_expected_prev[18] !== 1'bx ) && ( DATA_prev[18] !== DATA_expected_prev[18] )
		&& ((DATA_expected_prev[18] !== last_DATA_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[18] = DATA_expected_prev[18];
	end
	if (
		( DATA_expected_prev[19] !== 1'bx ) && ( DATA_prev[19] !== DATA_expected_prev[19] )
		&& ((DATA_expected_prev[19] !== last_DATA_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[19] = DATA_expected_prev[19];
	end
	if (
		( DATA_expected_prev[20] !== 1'bx ) && ( DATA_prev[20] !== DATA_expected_prev[20] )
		&& ((DATA_expected_prev[20] !== last_DATA_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[20] = DATA_expected_prev[20];
	end
	if (
		( DATA_expected_prev[21] !== 1'bx ) && ( DATA_prev[21] !== DATA_expected_prev[21] )
		&& ((DATA_expected_prev[21] !== last_DATA_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[21] = DATA_expected_prev[21];
	end
	if (
		( DATA_expected_prev[22] !== 1'bx ) && ( DATA_prev[22] !== DATA_expected_prev[22] )
		&& ((DATA_expected_prev[22] !== last_DATA_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[22] = DATA_expected_prev[22];
	end
	if (
		( DATA_expected_prev[23] !== 1'bx ) && ( DATA_prev[23] !== DATA_expected_prev[23] )
		&& ((DATA_expected_prev[23] !== last_DATA_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[23] = DATA_expected_prev[23];
	end
	if (
		( DATA_expected_prev[24] !== 1'bx ) && ( DATA_prev[24] !== DATA_expected_prev[24] )
		&& ((DATA_expected_prev[24] !== last_DATA_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[24] = DATA_expected_prev[24];
	end
	if (
		( DATA_expected_prev[25] !== 1'bx ) && ( DATA_prev[25] !== DATA_expected_prev[25] )
		&& ((DATA_expected_prev[25] !== last_DATA_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[25] = DATA_expected_prev[25];
	end
	if (
		( DATA_expected_prev[26] !== 1'bx ) && ( DATA_prev[26] !== DATA_expected_prev[26] )
		&& ((DATA_expected_prev[26] !== last_DATA_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[26] = DATA_expected_prev[26];
	end
	if (
		( DATA_expected_prev[27] !== 1'bx ) && ( DATA_prev[27] !== DATA_expected_prev[27] )
		&& ((DATA_expected_prev[27] !== last_DATA_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[27] = DATA_expected_prev[27];
	end
	if (
		( DATA_expected_prev[28] !== 1'bx ) && ( DATA_prev[28] !== DATA_expected_prev[28] )
		&& ((DATA_expected_prev[28] !== last_DATA_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[28] = DATA_expected_prev[28];
	end
	if (
		( DATA_expected_prev[29] !== 1'bx ) && ( DATA_prev[29] !== DATA_expected_prev[29] )
		&& ((DATA_expected_prev[29] !== last_DATA_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[29] = DATA_expected_prev[29];
	end
	if (
		( DATA_expected_prev[30] !== 1'bx ) && ( DATA_prev[30] !== DATA_expected_prev[30] )
		&& ((DATA_expected_prev[30] !== last_DATA_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[30] = DATA_expected_prev[30];
	end
	if (
		( DATA_expected_prev[31] !== 1'bx ) && ( DATA_prev[31] !== DATA_expected_prev[31] )
		&& ((DATA_expected_prev[31] !== last_DATA_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_exp[31] = DATA_expected_prev[31];
	end
	if (
		( DATA_REG_expected_prev[0] !== 1'bx ) && ( DATA_REG_prev[0] !== DATA_REG_expected_prev[0] )
		&& ((DATA_REG_expected_prev[0] !== last_DATA_REG_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[0] = DATA_REG_expected_prev[0];
	end
	if (
		( DATA_REG_expected_prev[1] !== 1'bx ) && ( DATA_REG_prev[1] !== DATA_REG_expected_prev[1] )
		&& ((DATA_REG_expected_prev[1] !== last_DATA_REG_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[1] = DATA_REG_expected_prev[1];
	end
	if (
		( DATA_REG_expected_prev[2] !== 1'bx ) && ( DATA_REG_prev[2] !== DATA_REG_expected_prev[2] )
		&& ((DATA_REG_expected_prev[2] !== last_DATA_REG_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[2] = DATA_REG_expected_prev[2];
	end
	if (
		( DATA_REG_expected_prev[3] !== 1'bx ) && ( DATA_REG_prev[3] !== DATA_REG_expected_prev[3] )
		&& ((DATA_REG_expected_prev[3] !== last_DATA_REG_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[3] = DATA_REG_expected_prev[3];
	end
	if (
		( DATA_REG_expected_prev[4] !== 1'bx ) && ( DATA_REG_prev[4] !== DATA_REG_expected_prev[4] )
		&& ((DATA_REG_expected_prev[4] !== last_DATA_REG_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[4] = DATA_REG_expected_prev[4];
	end
	if (
		( DATA_REG_expected_prev[5] !== 1'bx ) && ( DATA_REG_prev[5] !== DATA_REG_expected_prev[5] )
		&& ((DATA_REG_expected_prev[5] !== last_DATA_REG_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[5] = DATA_REG_expected_prev[5];
	end
	if (
		( DATA_REG_expected_prev[6] !== 1'bx ) && ( DATA_REG_prev[6] !== DATA_REG_expected_prev[6] )
		&& ((DATA_REG_expected_prev[6] !== last_DATA_REG_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[6] = DATA_REG_expected_prev[6];
	end
	if (
		( DATA_REG_expected_prev[7] !== 1'bx ) && ( DATA_REG_prev[7] !== DATA_REG_expected_prev[7] )
		&& ((DATA_REG_expected_prev[7] !== last_DATA_REG_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[7] = DATA_REG_expected_prev[7];
	end
	if (
		( DATA_REG_expected_prev[8] !== 1'bx ) && ( DATA_REG_prev[8] !== DATA_REG_expected_prev[8] )
		&& ((DATA_REG_expected_prev[8] !== last_DATA_REG_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[8] = DATA_REG_expected_prev[8];
	end
	if (
		( DATA_REG_expected_prev[9] !== 1'bx ) && ( DATA_REG_prev[9] !== DATA_REG_expected_prev[9] )
		&& ((DATA_REG_expected_prev[9] !== last_DATA_REG_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[9] = DATA_REG_expected_prev[9];
	end
	if (
		( DATA_REG_expected_prev[10] !== 1'bx ) && ( DATA_REG_prev[10] !== DATA_REG_expected_prev[10] )
		&& ((DATA_REG_expected_prev[10] !== last_DATA_REG_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[10] = DATA_REG_expected_prev[10];
	end
	if (
		( DATA_REG_expected_prev[11] !== 1'bx ) && ( DATA_REG_prev[11] !== DATA_REG_expected_prev[11] )
		&& ((DATA_REG_expected_prev[11] !== last_DATA_REG_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[11] = DATA_REG_expected_prev[11];
	end
	if (
		( DATA_REG_expected_prev[12] !== 1'bx ) && ( DATA_REG_prev[12] !== DATA_REG_expected_prev[12] )
		&& ((DATA_REG_expected_prev[12] !== last_DATA_REG_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[12] = DATA_REG_expected_prev[12];
	end
	if (
		( DATA_REG_expected_prev[13] !== 1'bx ) && ( DATA_REG_prev[13] !== DATA_REG_expected_prev[13] )
		&& ((DATA_REG_expected_prev[13] !== last_DATA_REG_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[13] = DATA_REG_expected_prev[13];
	end
	if (
		( DATA_REG_expected_prev[14] !== 1'bx ) && ( DATA_REG_prev[14] !== DATA_REG_expected_prev[14] )
		&& ((DATA_REG_expected_prev[14] !== last_DATA_REG_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[14] = DATA_REG_expected_prev[14];
	end
	if (
		( DATA_REG_expected_prev[15] !== 1'bx ) && ( DATA_REG_prev[15] !== DATA_REG_expected_prev[15] )
		&& ((DATA_REG_expected_prev[15] !== last_DATA_REG_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[15] = DATA_REG_expected_prev[15];
	end
	if (
		( DATA_REG_expected_prev[16] !== 1'bx ) && ( DATA_REG_prev[16] !== DATA_REG_expected_prev[16] )
		&& ((DATA_REG_expected_prev[16] !== last_DATA_REG_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[16] = DATA_REG_expected_prev[16];
	end
	if (
		( DATA_REG_expected_prev[17] !== 1'bx ) && ( DATA_REG_prev[17] !== DATA_REG_expected_prev[17] )
		&& ((DATA_REG_expected_prev[17] !== last_DATA_REG_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[17] = DATA_REG_expected_prev[17];
	end
	if (
		( DATA_REG_expected_prev[18] !== 1'bx ) && ( DATA_REG_prev[18] !== DATA_REG_expected_prev[18] )
		&& ((DATA_REG_expected_prev[18] !== last_DATA_REG_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[18] = DATA_REG_expected_prev[18];
	end
	if (
		( DATA_REG_expected_prev[19] !== 1'bx ) && ( DATA_REG_prev[19] !== DATA_REG_expected_prev[19] )
		&& ((DATA_REG_expected_prev[19] !== last_DATA_REG_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[19] = DATA_REG_expected_prev[19];
	end
	if (
		( DATA_REG_expected_prev[20] !== 1'bx ) && ( DATA_REG_prev[20] !== DATA_REG_expected_prev[20] )
		&& ((DATA_REG_expected_prev[20] !== last_DATA_REG_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[20] = DATA_REG_expected_prev[20];
	end
	if (
		( DATA_REG_expected_prev[21] !== 1'bx ) && ( DATA_REG_prev[21] !== DATA_REG_expected_prev[21] )
		&& ((DATA_REG_expected_prev[21] !== last_DATA_REG_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[21] = DATA_REG_expected_prev[21];
	end
	if (
		( DATA_REG_expected_prev[22] !== 1'bx ) && ( DATA_REG_prev[22] !== DATA_REG_expected_prev[22] )
		&& ((DATA_REG_expected_prev[22] !== last_DATA_REG_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[22] = DATA_REG_expected_prev[22];
	end
	if (
		( DATA_REG_expected_prev[23] !== 1'bx ) && ( DATA_REG_prev[23] !== DATA_REG_expected_prev[23] )
		&& ((DATA_REG_expected_prev[23] !== last_DATA_REG_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[23] = DATA_REG_expected_prev[23];
	end
	if (
		( DATA_REG_expected_prev[24] !== 1'bx ) && ( DATA_REG_prev[24] !== DATA_REG_expected_prev[24] )
		&& ((DATA_REG_expected_prev[24] !== last_DATA_REG_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[24] = DATA_REG_expected_prev[24];
	end
	if (
		( DATA_REG_expected_prev[25] !== 1'bx ) && ( DATA_REG_prev[25] !== DATA_REG_expected_prev[25] )
		&& ((DATA_REG_expected_prev[25] !== last_DATA_REG_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[25] = DATA_REG_expected_prev[25];
	end
	if (
		( DATA_REG_expected_prev[26] !== 1'bx ) && ( DATA_REG_prev[26] !== DATA_REG_expected_prev[26] )
		&& ((DATA_REG_expected_prev[26] !== last_DATA_REG_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[26] = DATA_REG_expected_prev[26];
	end
	if (
		( DATA_REG_expected_prev[27] !== 1'bx ) && ( DATA_REG_prev[27] !== DATA_REG_expected_prev[27] )
		&& ((DATA_REG_expected_prev[27] !== last_DATA_REG_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[27] = DATA_REG_expected_prev[27];
	end
	if (
		( DATA_REG_expected_prev[28] !== 1'bx ) && ( DATA_REG_prev[28] !== DATA_REG_expected_prev[28] )
		&& ((DATA_REG_expected_prev[28] !== last_DATA_REG_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[28] = DATA_REG_expected_prev[28];
	end
	if (
		( DATA_REG_expected_prev[29] !== 1'bx ) && ( DATA_REG_prev[29] !== DATA_REG_expected_prev[29] )
		&& ((DATA_REG_expected_prev[29] !== last_DATA_REG_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[29] = DATA_REG_expected_prev[29];
	end
	if (
		( DATA_REG_expected_prev[30] !== 1'bx ) && ( DATA_REG_prev[30] !== DATA_REG_expected_prev[30] )
		&& ((DATA_REG_expected_prev[30] !== last_DATA_REG_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[30] = DATA_REG_expected_prev[30];
	end
	if (
		( DATA_REG_expected_prev[31] !== 1'bx ) && ( DATA_REG_prev[31] !== DATA_REG_expected_prev[31] )
		&& ((DATA_REG_expected_prev[31] !== last_DATA_REG_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_REG[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_REG_expected_prev);
		$display ("     Real value = %b", DATA_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DATA_REG_exp[31] = DATA_REG_expected_prev[31];
	end
	if (
		( DBUS_expected_prev[0] !== 1'bx ) && ( DBUS_prev[0] !== DBUS_expected_prev[0] )
		&& ((DBUS_expected_prev[0] !== last_DBUS_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[0] = DBUS_expected_prev[0];
	end
	if (
		( DBUS_expected_prev[1] !== 1'bx ) && ( DBUS_prev[1] !== DBUS_expected_prev[1] )
		&& ((DBUS_expected_prev[1] !== last_DBUS_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[1] = DBUS_expected_prev[1];
	end
	if (
		( DBUS_expected_prev[2] !== 1'bx ) && ( DBUS_prev[2] !== DBUS_expected_prev[2] )
		&& ((DBUS_expected_prev[2] !== last_DBUS_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[2] = DBUS_expected_prev[2];
	end
	if (
		( DBUS_expected_prev[3] !== 1'bx ) && ( DBUS_prev[3] !== DBUS_expected_prev[3] )
		&& ((DBUS_expected_prev[3] !== last_DBUS_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[3] = DBUS_expected_prev[3];
	end
	if (
		( DBUS_expected_prev[4] !== 1'bx ) && ( DBUS_prev[4] !== DBUS_expected_prev[4] )
		&& ((DBUS_expected_prev[4] !== last_DBUS_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[4] = DBUS_expected_prev[4];
	end
	if (
		( DBUS_expected_prev[5] !== 1'bx ) && ( DBUS_prev[5] !== DBUS_expected_prev[5] )
		&& ((DBUS_expected_prev[5] !== last_DBUS_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[5] = DBUS_expected_prev[5];
	end
	if (
		( DBUS_expected_prev[6] !== 1'bx ) && ( DBUS_prev[6] !== DBUS_expected_prev[6] )
		&& ((DBUS_expected_prev[6] !== last_DBUS_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[6] = DBUS_expected_prev[6];
	end
	if (
		( DBUS_expected_prev[7] !== 1'bx ) && ( DBUS_prev[7] !== DBUS_expected_prev[7] )
		&& ((DBUS_expected_prev[7] !== last_DBUS_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[7] = DBUS_expected_prev[7];
	end
	if (
		( DBUS_expected_prev[8] !== 1'bx ) && ( DBUS_prev[8] !== DBUS_expected_prev[8] )
		&& ((DBUS_expected_prev[8] !== last_DBUS_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[8] = DBUS_expected_prev[8];
	end
	if (
		( DBUS_expected_prev[9] !== 1'bx ) && ( DBUS_prev[9] !== DBUS_expected_prev[9] )
		&& ((DBUS_expected_prev[9] !== last_DBUS_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[9] = DBUS_expected_prev[9];
	end
	if (
		( DBUS_expected_prev[10] !== 1'bx ) && ( DBUS_prev[10] !== DBUS_expected_prev[10] )
		&& ((DBUS_expected_prev[10] !== last_DBUS_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[10] = DBUS_expected_prev[10];
	end
	if (
		( DBUS_expected_prev[11] !== 1'bx ) && ( DBUS_prev[11] !== DBUS_expected_prev[11] )
		&& ((DBUS_expected_prev[11] !== last_DBUS_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[11] = DBUS_expected_prev[11];
	end
	if (
		( DBUS_expected_prev[12] !== 1'bx ) && ( DBUS_prev[12] !== DBUS_expected_prev[12] )
		&& ((DBUS_expected_prev[12] !== last_DBUS_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[12] = DBUS_expected_prev[12];
	end
	if (
		( DBUS_expected_prev[13] !== 1'bx ) && ( DBUS_prev[13] !== DBUS_expected_prev[13] )
		&& ((DBUS_expected_prev[13] !== last_DBUS_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[13] = DBUS_expected_prev[13];
	end
	if (
		( DBUS_expected_prev[14] !== 1'bx ) && ( DBUS_prev[14] !== DBUS_expected_prev[14] )
		&& ((DBUS_expected_prev[14] !== last_DBUS_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[14] = DBUS_expected_prev[14];
	end
	if (
		( DBUS_expected_prev[15] !== 1'bx ) && ( DBUS_prev[15] !== DBUS_expected_prev[15] )
		&& ((DBUS_expected_prev[15] !== last_DBUS_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[15] = DBUS_expected_prev[15];
	end
	if (
		( DBUS_expected_prev[16] !== 1'bx ) && ( DBUS_prev[16] !== DBUS_expected_prev[16] )
		&& ((DBUS_expected_prev[16] !== last_DBUS_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[16] = DBUS_expected_prev[16];
	end
	if (
		( DBUS_expected_prev[17] !== 1'bx ) && ( DBUS_prev[17] !== DBUS_expected_prev[17] )
		&& ((DBUS_expected_prev[17] !== last_DBUS_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[17] = DBUS_expected_prev[17];
	end
	if (
		( DBUS_expected_prev[18] !== 1'bx ) && ( DBUS_prev[18] !== DBUS_expected_prev[18] )
		&& ((DBUS_expected_prev[18] !== last_DBUS_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[18] = DBUS_expected_prev[18];
	end
	if (
		( DBUS_expected_prev[19] !== 1'bx ) && ( DBUS_prev[19] !== DBUS_expected_prev[19] )
		&& ((DBUS_expected_prev[19] !== last_DBUS_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[19] = DBUS_expected_prev[19];
	end
	if (
		( DBUS_expected_prev[20] !== 1'bx ) && ( DBUS_prev[20] !== DBUS_expected_prev[20] )
		&& ((DBUS_expected_prev[20] !== last_DBUS_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[20] = DBUS_expected_prev[20];
	end
	if (
		( DBUS_expected_prev[21] !== 1'bx ) && ( DBUS_prev[21] !== DBUS_expected_prev[21] )
		&& ((DBUS_expected_prev[21] !== last_DBUS_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[21] = DBUS_expected_prev[21];
	end
	if (
		( DBUS_expected_prev[22] !== 1'bx ) && ( DBUS_prev[22] !== DBUS_expected_prev[22] )
		&& ((DBUS_expected_prev[22] !== last_DBUS_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[22] = DBUS_expected_prev[22];
	end
	if (
		( DBUS_expected_prev[23] !== 1'bx ) && ( DBUS_prev[23] !== DBUS_expected_prev[23] )
		&& ((DBUS_expected_prev[23] !== last_DBUS_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[23] = DBUS_expected_prev[23];
	end
	if (
		( DBUS_expected_prev[24] !== 1'bx ) && ( DBUS_prev[24] !== DBUS_expected_prev[24] )
		&& ((DBUS_expected_prev[24] !== last_DBUS_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[24] = DBUS_expected_prev[24];
	end
	if (
		( DBUS_expected_prev[25] !== 1'bx ) && ( DBUS_prev[25] !== DBUS_expected_prev[25] )
		&& ((DBUS_expected_prev[25] !== last_DBUS_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[25] = DBUS_expected_prev[25];
	end
	if (
		( DBUS_expected_prev[26] !== 1'bx ) && ( DBUS_prev[26] !== DBUS_expected_prev[26] )
		&& ((DBUS_expected_prev[26] !== last_DBUS_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[26] = DBUS_expected_prev[26];
	end
	if (
		( DBUS_expected_prev[27] !== 1'bx ) && ( DBUS_prev[27] !== DBUS_expected_prev[27] )
		&& ((DBUS_expected_prev[27] !== last_DBUS_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[27] = DBUS_expected_prev[27];
	end
	if (
		( DBUS_expected_prev[28] !== 1'bx ) && ( DBUS_prev[28] !== DBUS_expected_prev[28] )
		&& ((DBUS_expected_prev[28] !== last_DBUS_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[28] = DBUS_expected_prev[28];
	end
	if (
		( DBUS_expected_prev[29] !== 1'bx ) && ( DBUS_prev[29] !== DBUS_expected_prev[29] )
		&& ((DBUS_expected_prev[29] !== last_DBUS_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[29] = DBUS_expected_prev[29];
	end
	if (
		( DBUS_expected_prev[30] !== 1'bx ) && ( DBUS_prev[30] !== DBUS_expected_prev[30] )
		&& ((DBUS_expected_prev[30] !== last_DBUS_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[30] = DBUS_expected_prev[30];
	end
	if (
		( DBUS_expected_prev[31] !== 1'bx ) && ( DBUS_prev[31] !== DBUS_expected_prev[31] )
		&& ((DBUS_expected_prev[31] !== last_DBUS_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DBUS_exp[31] = DBUS_expected_prev[31];
	end
	if (
		( IR_expected_prev[0] !== 1'bx ) && ( IR_prev[0] !== IR_expected_prev[0] )
		&& ((IR_expected_prev[0] !== last_IR_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[0] = IR_expected_prev[0];
	end
	if (
		( IR_expected_prev[1] !== 1'bx ) && ( IR_prev[1] !== IR_expected_prev[1] )
		&& ((IR_expected_prev[1] !== last_IR_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[1] = IR_expected_prev[1];
	end
	if (
		( IR_expected_prev[2] !== 1'bx ) && ( IR_prev[2] !== IR_expected_prev[2] )
		&& ((IR_expected_prev[2] !== last_IR_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[2] = IR_expected_prev[2];
	end
	if (
		( IR_expected_prev[3] !== 1'bx ) && ( IR_prev[3] !== IR_expected_prev[3] )
		&& ((IR_expected_prev[3] !== last_IR_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[3] = IR_expected_prev[3];
	end
	if (
		( IR_expected_prev[4] !== 1'bx ) && ( IR_prev[4] !== IR_expected_prev[4] )
		&& ((IR_expected_prev[4] !== last_IR_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[4] = IR_expected_prev[4];
	end
	if (
		( IR_expected_prev[5] !== 1'bx ) && ( IR_prev[5] !== IR_expected_prev[5] )
		&& ((IR_expected_prev[5] !== last_IR_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[5] = IR_expected_prev[5];
	end
	if (
		( IR_expected_prev[6] !== 1'bx ) && ( IR_prev[6] !== IR_expected_prev[6] )
		&& ((IR_expected_prev[6] !== last_IR_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[6] = IR_expected_prev[6];
	end
	if (
		( IR_expected_prev[7] !== 1'bx ) && ( IR_prev[7] !== IR_expected_prev[7] )
		&& ((IR_expected_prev[7] !== last_IR_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[7] = IR_expected_prev[7];
	end
	if (
		( IR_expected_prev[8] !== 1'bx ) && ( IR_prev[8] !== IR_expected_prev[8] )
		&& ((IR_expected_prev[8] !== last_IR_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[8] = IR_expected_prev[8];
	end
	if (
		( IR_expected_prev[9] !== 1'bx ) && ( IR_prev[9] !== IR_expected_prev[9] )
		&& ((IR_expected_prev[9] !== last_IR_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[9] = IR_expected_prev[9];
	end
	if (
		( IR_expected_prev[10] !== 1'bx ) && ( IR_prev[10] !== IR_expected_prev[10] )
		&& ((IR_expected_prev[10] !== last_IR_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[10] = IR_expected_prev[10];
	end
	if (
		( IR_expected_prev[11] !== 1'bx ) && ( IR_prev[11] !== IR_expected_prev[11] )
		&& ((IR_expected_prev[11] !== last_IR_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[11] = IR_expected_prev[11];
	end
	if (
		( IR_expected_prev[12] !== 1'bx ) && ( IR_prev[12] !== IR_expected_prev[12] )
		&& ((IR_expected_prev[12] !== last_IR_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[12] = IR_expected_prev[12];
	end
	if (
		( IR_expected_prev[13] !== 1'bx ) && ( IR_prev[13] !== IR_expected_prev[13] )
		&& ((IR_expected_prev[13] !== last_IR_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[13] = IR_expected_prev[13];
	end
	if (
		( IR_expected_prev[14] !== 1'bx ) && ( IR_prev[14] !== IR_expected_prev[14] )
		&& ((IR_expected_prev[14] !== last_IR_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[14] = IR_expected_prev[14];
	end
	if (
		( IR_expected_prev[15] !== 1'bx ) && ( IR_prev[15] !== IR_expected_prev[15] )
		&& ((IR_expected_prev[15] !== last_IR_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[15] = IR_expected_prev[15];
	end
	if (
		( IR_expected_prev[16] !== 1'bx ) && ( IR_prev[16] !== IR_expected_prev[16] )
		&& ((IR_expected_prev[16] !== last_IR_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[16] = IR_expected_prev[16];
	end
	if (
		( IR_expected_prev[17] !== 1'bx ) && ( IR_prev[17] !== IR_expected_prev[17] )
		&& ((IR_expected_prev[17] !== last_IR_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[17] = IR_expected_prev[17];
	end
	if (
		( IR_expected_prev[18] !== 1'bx ) && ( IR_prev[18] !== IR_expected_prev[18] )
		&& ((IR_expected_prev[18] !== last_IR_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[18] = IR_expected_prev[18];
	end
	if (
		( IR_expected_prev[19] !== 1'bx ) && ( IR_prev[19] !== IR_expected_prev[19] )
		&& ((IR_expected_prev[19] !== last_IR_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[19] = IR_expected_prev[19];
	end
	if (
		( IR_expected_prev[20] !== 1'bx ) && ( IR_prev[20] !== IR_expected_prev[20] )
		&& ((IR_expected_prev[20] !== last_IR_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[20] = IR_expected_prev[20];
	end
	if (
		( IR_expected_prev[21] !== 1'bx ) && ( IR_prev[21] !== IR_expected_prev[21] )
		&& ((IR_expected_prev[21] !== last_IR_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[21] = IR_expected_prev[21];
	end
	if (
		( IR_expected_prev[22] !== 1'bx ) && ( IR_prev[22] !== IR_expected_prev[22] )
		&& ((IR_expected_prev[22] !== last_IR_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[22] = IR_expected_prev[22];
	end
	if (
		( IR_expected_prev[23] !== 1'bx ) && ( IR_prev[23] !== IR_expected_prev[23] )
		&& ((IR_expected_prev[23] !== last_IR_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[23] = IR_expected_prev[23];
	end
	if (
		( IR_expected_prev[24] !== 1'bx ) && ( IR_prev[24] !== IR_expected_prev[24] )
		&& ((IR_expected_prev[24] !== last_IR_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[24] = IR_expected_prev[24];
	end
	if (
		( IR_expected_prev[25] !== 1'bx ) && ( IR_prev[25] !== IR_expected_prev[25] )
		&& ((IR_expected_prev[25] !== last_IR_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[25] = IR_expected_prev[25];
	end
	if (
		( IR_expected_prev[26] !== 1'bx ) && ( IR_prev[26] !== IR_expected_prev[26] )
		&& ((IR_expected_prev[26] !== last_IR_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[26] = IR_expected_prev[26];
	end
	if (
		( IR_expected_prev[27] !== 1'bx ) && ( IR_prev[27] !== IR_expected_prev[27] )
		&& ((IR_expected_prev[27] !== last_IR_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[27] = IR_expected_prev[27];
	end
	if (
		( IR_expected_prev[28] !== 1'bx ) && ( IR_prev[28] !== IR_expected_prev[28] )
		&& ((IR_expected_prev[28] !== last_IR_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[28] = IR_expected_prev[28];
	end
	if (
		( IR_expected_prev[29] !== 1'bx ) && ( IR_prev[29] !== IR_expected_prev[29] )
		&& ((IR_expected_prev[29] !== last_IR_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[29] = IR_expected_prev[29];
	end
	if (
		( IR_expected_prev[30] !== 1'bx ) && ( IR_prev[30] !== IR_expected_prev[30] )
		&& ((IR_expected_prev[30] !== last_IR_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[30] = IR_expected_prev[30];
	end
	if (
		( IR_expected_prev[31] !== 1'bx ) && ( IR_prev[31] !== IR_expected_prev[31] )
		&& ((IR_expected_prev[31] !== last_IR_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_exp[31] = IR_expected_prev[31];
	end
	if (
		( JAL_expected_prev !== 1'bx ) && ( JAL_prev !== JAL_expected_prev )
		&& ((JAL_expected_prev !== last_JAL_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JAL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JAL_expected_prev);
		$display ("     Real value = %b", JAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_JAL_exp = JAL_expected_prev;
	end
	if (
		( JALR_expected_prev !== 1'bx ) && ( JALR_prev !== JALR_expected_prev )
		&& ((JALR_expected_prev !== last_JALR_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JALR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JALR_expected_prev);
		$display ("     Real value = %b", JALR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_JALR_exp = JALR_expected_prev;
	end
	if (
		( LD_IR_expected_prev !== 1'bx ) && ( LD_IR_prev !== LD_IR_expected_prev )
		&& ((LD_IR_expected_prev !== last_LD_IR_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LD_IR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LD_IR_expected_prev);
		$display ("     Real value = %b", LD_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_LD_IR_exp = LD_IR_expected_prev;
	end
	if (
		( LD_PC_expected_prev !== 1'bx ) && ( LD_PC_prev !== LD_PC_expected_prev )
		&& ((LD_PC_expected_prev !== last_LD_PC_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LD_PC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LD_PC_expected_prev);
		$display ("     Real value = %b", LD_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_LD_PC_exp = LD_PC_expected_prev;
	end
	if (
		( LD_REG_expected_prev !== 1'bx ) && ( LD_REG_prev !== LD_REG_expected_prev )
		&& ((LD_REG_expected_prev !== last_LD_REG_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LD_REG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LD_REG_expected_prev);
		$display ("     Real value = %b", LD_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_LD_REG_exp = LD_REG_expected_prev;
	end
	if (
		( LEN_expected_prev[0] !== 1'bx ) && ( LEN_prev[0] !== LEN_expected_prev[0] )
		&& ((LEN_expected_prev[0] !== last_LEN_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEN[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEN_expected_prev);
		$display ("     Real value = %b", LEN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_LEN_exp[0] = LEN_expected_prev[0];
	end
	if (
		( LEN_expected_prev[1] !== 1'bx ) && ( LEN_prev[1] !== LEN_expected_prev[1] )
		&& ((LEN_expected_prev[1] !== last_LEN_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEN[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEN_expected_prev);
		$display ("     Real value = %b", LEN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_LEN_exp[1] = LEN_expected_prev[1];
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( PC_expected_prev[8] !== 1'bx ) && ( PC_prev[8] !== PC_expected_prev[8] )
		&& ((PC_expected_prev[8] !== last_PC_exp[8]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[8] = PC_expected_prev[8];
	end
	if (
		( PC_expected_prev[9] !== 1'bx ) && ( PC_prev[9] !== PC_expected_prev[9] )
		&& ((PC_expected_prev[9] !== last_PC_exp[9]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[9] = PC_expected_prev[9];
	end
	if (
		( PC_expected_prev[10] !== 1'bx ) && ( PC_prev[10] !== PC_expected_prev[10] )
		&& ((PC_expected_prev[10] !== last_PC_exp[10]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[10] = PC_expected_prev[10];
	end
	if (
		( PC_expected_prev[11] !== 1'bx ) && ( PC_prev[11] !== PC_expected_prev[11] )
		&& ((PC_expected_prev[11] !== last_PC_exp[11]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[11] = PC_expected_prev[11];
	end
	if (
		( PC_expected_prev[12] !== 1'bx ) && ( PC_prev[12] !== PC_expected_prev[12] )
		&& ((PC_expected_prev[12] !== last_PC_exp[12]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[12] = PC_expected_prev[12];
	end
	if (
		( PC_expected_prev[13] !== 1'bx ) && ( PC_prev[13] !== PC_expected_prev[13] )
		&& ((PC_expected_prev[13] !== last_PC_exp[13]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[13] = PC_expected_prev[13];
	end
	if (
		( PC_expected_prev[14] !== 1'bx ) && ( PC_prev[14] !== PC_expected_prev[14] )
		&& ((PC_expected_prev[14] !== last_PC_exp[14]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[14] = PC_expected_prev[14];
	end
	if (
		( PC_expected_prev[15] !== 1'bx ) && ( PC_prev[15] !== PC_expected_prev[15] )
		&& ((PC_expected_prev[15] !== last_PC_exp[15]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[15] = PC_expected_prev[15];
	end
	if (
		( PC_expected_prev[16] !== 1'bx ) && ( PC_prev[16] !== PC_expected_prev[16] )
		&& ((PC_expected_prev[16] !== last_PC_exp[16]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[16] = PC_expected_prev[16];
	end
	if (
		( PC_expected_prev[17] !== 1'bx ) && ( PC_prev[17] !== PC_expected_prev[17] )
		&& ((PC_expected_prev[17] !== last_PC_exp[17]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[17] = PC_expected_prev[17];
	end
	if (
		( PC_expected_prev[18] !== 1'bx ) && ( PC_prev[18] !== PC_expected_prev[18] )
		&& ((PC_expected_prev[18] !== last_PC_exp[18]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[18] = PC_expected_prev[18];
	end
	if (
		( PC_expected_prev[19] !== 1'bx ) && ( PC_prev[19] !== PC_expected_prev[19] )
		&& ((PC_expected_prev[19] !== last_PC_exp[19]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[19] = PC_expected_prev[19];
	end
	if (
		( PC_expected_prev[20] !== 1'bx ) && ( PC_prev[20] !== PC_expected_prev[20] )
		&& ((PC_expected_prev[20] !== last_PC_exp[20]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[20] = PC_expected_prev[20];
	end
	if (
		( PC_expected_prev[21] !== 1'bx ) && ( PC_prev[21] !== PC_expected_prev[21] )
		&& ((PC_expected_prev[21] !== last_PC_exp[21]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[21] = PC_expected_prev[21];
	end
	if (
		( PC_expected_prev[22] !== 1'bx ) && ( PC_prev[22] !== PC_expected_prev[22] )
		&& ((PC_expected_prev[22] !== last_PC_exp[22]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[22] = PC_expected_prev[22];
	end
	if (
		( PC_expected_prev[23] !== 1'bx ) && ( PC_prev[23] !== PC_expected_prev[23] )
		&& ((PC_expected_prev[23] !== last_PC_exp[23]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[23] = PC_expected_prev[23];
	end
	if (
		( PC_expected_prev[24] !== 1'bx ) && ( PC_prev[24] !== PC_expected_prev[24] )
		&& ((PC_expected_prev[24] !== last_PC_exp[24]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[24] = PC_expected_prev[24];
	end
	if (
		( PC_expected_prev[25] !== 1'bx ) && ( PC_prev[25] !== PC_expected_prev[25] )
		&& ((PC_expected_prev[25] !== last_PC_exp[25]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[25] = PC_expected_prev[25];
	end
	if (
		( PC_expected_prev[26] !== 1'bx ) && ( PC_prev[26] !== PC_expected_prev[26] )
		&& ((PC_expected_prev[26] !== last_PC_exp[26]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[26] = PC_expected_prev[26];
	end
	if (
		( PC_expected_prev[27] !== 1'bx ) && ( PC_prev[27] !== PC_expected_prev[27] )
		&& ((PC_expected_prev[27] !== last_PC_exp[27]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[27] = PC_expected_prev[27];
	end
	if (
		( PC_expected_prev[28] !== 1'bx ) && ( PC_prev[28] !== PC_expected_prev[28] )
		&& ((PC_expected_prev[28] !== last_PC_exp[28]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[28] = PC_expected_prev[28];
	end
	if (
		( PC_expected_prev[29] !== 1'bx ) && ( PC_prev[29] !== PC_expected_prev[29] )
		&& ((PC_expected_prev[29] !== last_PC_exp[29]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[29] = PC_expected_prev[29];
	end
	if (
		( PC_expected_prev[30] !== 1'bx ) && ( PC_prev[30] !== PC_expected_prev[30] )
		&& ((PC_expected_prev[30] !== last_PC_exp[30]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[30] = PC_expected_prev[30];
	end
	if (
		( PC_expected_prev[31] !== 1'bx ) && ( PC_prev[31] !== PC_expected_prev[31] )
		&& ((PC_expected_prev[31] !== last_PC_exp[31]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[31] = PC_expected_prev[31];
	end
	if (
		( RD_expected_prev !== 1'bx ) && ( RD_prev !== RD_expected_prev )
		&& ((RD_expected_prev !== last_RD_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_expected_prev);
		$display ("     Real value = %b", RD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RD_exp = RD_expected_prev;
	end
	if (
		( WR_expected_prev !== 1'bx ) && ( WR_prev !== WR_expected_prev )
		&& ((WR_expected_prev !== last_WR_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WR_expected_prev);
		$display ("     Real value = %b", WR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_WR_exp = WR_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module rv32i_debug_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [31:0] treg_DBUS;
// wires                                               
wire [31:0] ABUS;
wire [31:0] ADDR;
wire [31:0] ALUOUT;
wire BRANCH;
wire BRC;
wire [31:0] DATA;
wire [31:0] DATA_REG;
wire [31:0] DBUS;
wire [31:0] IR;
wire JAL;
wire JALR;
wire LD_IR;
wire LD_PC;
wire LD_REG;
wire [1:0] LEN;
wire [31:0] PC;
wire RD;
wire WR;

wire sampler;                             

// assign statements (if any)                          
assign DBUS = treg_DBUS;
rv32i_debug i1 (
// port map - connection between master ports and signals/registers   
	.ABUS(ABUS),
	.ADDR(ADDR),
	.ALUOUT(ALUOUT),
	.BRANCH(BRANCH),
	.BRC(BRC),
	.CLK(CLK),
	.DATA(DATA),
	.DATA_REG(DATA_REG),
	.DBUS(DBUS),
	.IR(IR),
	.JAL(JAL),
	.JALR(JALR),
	.LD_IR(LD_IR),
	.LD_PC(LD_PC),
	.LD_REG(LD_REG),
	.LEN(LEN),
	.PC(PC),
	.RD(RD),
	.WR(WR)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// DBUS[ 31 ]
initial
begin
	treg_DBUS[31] = 1'bZ;
	treg_DBUS[31] = #40000 1'b0;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #60000 1'b0;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #60000 1'b0;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #60000 1'b1;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #60000 1'b0;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #60000 1'b0;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #60000 1'b0;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #60000 1'b0;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #60000 1'b0;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #60000 1'b1;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #60000 1'b1;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #40000 1'b0;
	treg_DBUS[31] = #20000 1'b1;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #60000 1'b1;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #60000 1'b0;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #60000 1'b0;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #60000 1'b1;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #60000 1'b1;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #60000 1'b1;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #40000 1'b0;
	treg_DBUS[31] = #40000 1'bZ;
	treg_DBUS[31] = #60000 1'b0;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #60000 1'b0;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #40000 1'b0;
	treg_DBUS[31] = #40000 1'bZ;
	treg_DBUS[31] = #60000 1'b0;
	treg_DBUS[31] = #20000 1'bZ;
	treg_DBUS[31] = #60000 1'b1;
	treg_DBUS[31] = #20000 1'bZ;
end 
// DBUS[ 30 ]
initial
begin
	treg_DBUS[30] = 1'bZ;
	treg_DBUS[30] = #40000 1'b0;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #60000 1'b0;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #60000 1'b0;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #60000 1'b1;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #60000 1'b0;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #60000 1'b0;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #60000 1'b0;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #60000 1'b0;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #60000 1'b0;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #60000 1'b1;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #60000 1'b1;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #40000 1'b0;
	treg_DBUS[30] = #20000 1'b1;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #60000 1'b1;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #60000 1'b0;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #60000 1'b0;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #60000 1'b1;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #60000 1'b1;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #60000 1'b1;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #40000 1'b0;
	treg_DBUS[30] = #40000 1'bZ;
	treg_DBUS[30] = #60000 1'b0;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #60000 1'b0;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #40000 1'b0;
	treg_DBUS[30] = #40000 1'bZ;
	treg_DBUS[30] = #60000 1'b0;
	treg_DBUS[30] = #20000 1'bZ;
	treg_DBUS[30] = #60000 1'b1;
	treg_DBUS[30] = #20000 1'bZ;
end 
// DBUS[ 29 ]
initial
begin
	treg_DBUS[29] = 1'bZ;
	treg_DBUS[29] = #40000 1'b0;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #60000 1'b0;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #60000 1'b0;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #60000 1'b1;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #60000 1'b0;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #60000 1'b0;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #60000 1'b0;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #60000 1'b0;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #60000 1'b0;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #60000 1'b1;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #60000 1'b1;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #40000 1'b0;
	treg_DBUS[29] = #20000 1'b1;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #60000 1'b1;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #60000 1'b0;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #60000 1'b0;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #60000 1'b1;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #60000 1'b1;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #60000 1'b1;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #40000 1'b0;
	treg_DBUS[29] = #40000 1'bZ;
	treg_DBUS[29] = #60000 1'b0;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #60000 1'b0;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #40000 1'b0;
	treg_DBUS[29] = #40000 1'bZ;
	treg_DBUS[29] = #60000 1'b0;
	treg_DBUS[29] = #20000 1'bZ;
	treg_DBUS[29] = #60000 1'b1;
	treg_DBUS[29] = #20000 1'bZ;
end 
// DBUS[ 28 ]
initial
begin
	treg_DBUS[28] = 1'bZ;
	treg_DBUS[28] = #40000 1'b0;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #60000 1'b0;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #60000 1'b0;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #60000 1'b1;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #60000 1'b0;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #60000 1'b0;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #60000 1'b0;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #60000 1'b0;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #60000 1'b1;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #60000 1'b1;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #60000 1'b1;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #40000 1'b0;
	treg_DBUS[28] = #20000 1'b1;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #60000 1'b1;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #60000 1'b0;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #60000 1'b0;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #60000 1'b1;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #60000 1'b1;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #60000 1'b1;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #40000 1'b0;
	treg_DBUS[28] = #40000 1'bZ;
	treg_DBUS[28] = #60000 1'b0;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #60000 1'b0;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #40000 1'b0;
	treg_DBUS[28] = #40000 1'bZ;
	treg_DBUS[28] = #60000 1'b0;
	treg_DBUS[28] = #20000 1'bZ;
	treg_DBUS[28] = #60000 1'b1;
	treg_DBUS[28] = #20000 1'bZ;
end 
// DBUS[ 27 ]
initial
begin
	treg_DBUS[27] = 1'bZ;
	treg_DBUS[27] = #40000 1'b0;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #60000 1'b0;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #60000 1'b0;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #60000 1'b1;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #60000 1'b0;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #60000 1'b0;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #60000 1'b0;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #60000 1'b0;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #60000 1'b0;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #60000 1'b1;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #60000 1'b1;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #40000 1'b0;
	treg_DBUS[27] = #20000 1'b1;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #60000 1'b1;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #60000 1'b0;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #60000 1'b0;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #60000 1'b1;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #60000 1'b1;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #60000 1'b1;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #40000 1'b0;
	treg_DBUS[27] = #40000 1'bZ;
	treg_DBUS[27] = #60000 1'b0;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #60000 1'b0;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #40000 1'b0;
	treg_DBUS[27] = #40000 1'bZ;
	treg_DBUS[27] = #60000 1'b0;
	treg_DBUS[27] = #20000 1'bZ;
	treg_DBUS[27] = #60000 1'b1;
	treg_DBUS[27] = #20000 1'bZ;
end 
// DBUS[ 26 ]
initial
begin
	treg_DBUS[26] = 1'bZ;
	treg_DBUS[26] = #40000 1'b0;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #60000 1'b0;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #60000 1'b1;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #60000 1'b1;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #60000 1'b0;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #60000 1'b0;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #60000 1'b0;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #60000 1'b0;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #60000 1'b0;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #60000 1'b1;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #60000 1'b1;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #40000 1'b0;
	treg_DBUS[26] = #40000 1'bZ;
	treg_DBUS[26] = #60000 1'b1;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #60000 1'b0;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #60000 1'b0;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #60000 1'b1;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #60000 1'b1;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #60000 1'b1;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #40000 1'b0;
	treg_DBUS[26] = #40000 1'bZ;
	treg_DBUS[26] = #60000 1'b0;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #60000 1'b0;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #40000 1'b0;
	treg_DBUS[26] = #40000 1'bZ;
	treg_DBUS[26] = #60000 1'b0;
	treg_DBUS[26] = #20000 1'bZ;
	treg_DBUS[26] = #60000 1'b1;
	treg_DBUS[26] = #20000 1'bZ;
end 
// DBUS[ 25 ]
initial
begin
	treg_DBUS[25] = 1'bZ;
	treg_DBUS[25] = #40000 1'b0;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #60000 1'b0;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #60000 1'b1;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #60000 1'b1;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #60000 1'b0;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #60000 1'b0;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #60000 1'b1;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #60000 1'b0;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #60000 1'b0;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #60000 1'b1;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #60000 1'b1;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #40000 1'b0;
	treg_DBUS[25] = #40000 1'bZ;
	treg_DBUS[25] = #60000 1'b1;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #60000 1'b0;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #60000 1'b1;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #60000 1'b1;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #60000 1'b1;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #60000 1'b1;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #40000 1'b0;
	treg_DBUS[25] = #40000 1'bZ;
	treg_DBUS[25] = #60000 1'b0;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #60000 1'b0;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #40000 1'b0;
	treg_DBUS[25] = #20000 1'b1;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #60000 1'b0;
	treg_DBUS[25] = #20000 1'bZ;
	treg_DBUS[25] = #60000 1'b1;
	treg_DBUS[25] = #20000 1'bZ;
end 
// DBUS[ 24 ]
initial
begin
	treg_DBUS[24] = 1'bZ;
	treg_DBUS[24] = #40000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #60000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #60000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #60000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #60000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #60000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #60000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #60000 1'b1;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #60000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #60000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #60000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #40000 1'b1;
	treg_DBUS[24] = #20000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #60000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #60000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #60000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #60000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #60000 1'b1;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #60000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #40000 1'b1;
	treg_DBUS[24] = #20000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #60000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #60000 1'b1;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #40000 1'b0;
	treg_DBUS[24] = #40000 1'bZ;
	treg_DBUS[24] = #60000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
	treg_DBUS[24] = #60000 1'b0;
	treg_DBUS[24] = #20000 1'bZ;
end 
// DBUS[ 23 ]
initial
begin
	treg_DBUS[23] = 1'bZ;
	treg_DBUS[23] = #40000 1'b0;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #60000 1'b0;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #60000 1'b0;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #60000 1'b0;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #60000 1'b0;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #60000 1'b1;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #60000 1'b0;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #60000 1'b0;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #60000 1'b0;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #60000 1'b1;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #60000 1'b1;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #40000 1'b0;
	treg_DBUS[23] = #40000 1'bZ;
	treg_DBUS[23] = #60000 1'b0;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #60000 1'b1;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #60000 1'b0;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #60000 1'b1;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #60000 1'b1;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #60000 1'b1;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #40000 1'b0;
	treg_DBUS[23] = #20000 1'b1;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #60000 1'b0;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #60000 1'b1;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #40000 1'b0;
	treg_DBUS[23] = #40000 1'bZ;
	treg_DBUS[23] = #60000 1'b0;
	treg_DBUS[23] = #20000 1'bZ;
	treg_DBUS[23] = #60000 1'b1;
	treg_DBUS[23] = #20000 1'bZ;
end 
// DBUS[ 22 ]
initial
begin
	treg_DBUS[22] = 1'bZ;
	treg_DBUS[22] = #40000 1'b0;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #60000 1'b0;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #60000 1'b1;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #60000 1'b0;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #60000 1'b0;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #60000 1'b0;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #60000 1'b0;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #60000 1'b0;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #60000 1'b0;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #60000 1'b1;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #60000 1'b1;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #40000 1'b0;
	treg_DBUS[22] = #20000 1'b1;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #60000 1'b0;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #60000 1'b0;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #60000 1'b0;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #60000 1'b0;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #60000 1'b1;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #60000 1'b1;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #40000 1'b0;
	treg_DBUS[22] = #20000 1'b1;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #60000 1'b0;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #60000 1'b1;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #40000 1'b0;
	treg_DBUS[22] = #40000 1'bZ;
	treg_DBUS[22] = #60000 1'b0;
	treg_DBUS[22] = #20000 1'bZ;
	treg_DBUS[22] = #60000 1'b1;
	treg_DBUS[22] = #20000 1'bZ;
end 
// DBUS[ 21 ]
initial
begin
	treg_DBUS[21] = 1'bZ;
	treg_DBUS[21] = #40000 1'b0;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #60000 1'b0;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #60000 1'b0;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #60000 1'b0;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #60000 1'b0;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #60000 1'b0;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #60000 1'b0;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #60000 1'b0;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #60000 1'b0;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #60000 1'b1;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #60000 1'b0;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #40000 1'b0;
	treg_DBUS[21] = #40000 1'bZ;
	treg_DBUS[21] = #60000 1'b0;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #60000 1'b0;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #60000 1'b0;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #60000 1'b1;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #60000 1'b1;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #60000 1'b0;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #40000 1'b0;
	treg_DBUS[21] = #20000 1'b1;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #60000 1'b0;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #60000 1'b0;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #40000 1'b0;
	treg_DBUS[21] = #40000 1'bZ;
	treg_DBUS[21] = #60000 1'b0;
	treg_DBUS[21] = #20000 1'bZ;
	treg_DBUS[21] = #60000 1'b0;
	treg_DBUS[21] = #20000 1'bZ;
end 
// DBUS[ 20 ]
initial
begin
	treg_DBUS[20] = 1'bZ;
	treg_DBUS[20] = #40000 1'b0;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #60000 1'b0;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #60000 1'b0;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #60000 1'b0;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #60000 1'b1;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #60000 1'b0;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #60000 1'b0;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #60000 1'b0;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #60000 1'b1;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #60000 1'b1;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #60000 1'b0;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #40000 1'b0;
	treg_DBUS[20] = #20000 1'b1;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #60000 1'b0;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #60000 1'b0;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #60000 1'b0;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #60000 1'b0;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #60000 1'b1;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #60000 1'b0;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #40000 1'b0;
	treg_DBUS[20] = #40000 1'bZ;
	treg_DBUS[20] = #60000 1'b0;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #60000 1'b0;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #40000 1'b0;
	treg_DBUS[20] = #40000 1'bZ;
	treg_DBUS[20] = #60000 1'b0;
	treg_DBUS[20] = #20000 1'bZ;
	treg_DBUS[20] = #60000 1'b0;
	treg_DBUS[20] = #20000 1'bZ;
end 
// DBUS[ 19 ]
initial
begin
	treg_DBUS[19] = 1'bZ;
	treg_DBUS[19] = #40000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #40000 1'b0;
	treg_DBUS[19] = #20000 1'b1;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #40000 1'b0;
	treg_DBUS[19] = #40000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #40000 1'b0;
	treg_DBUS[19] = #40000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
	treg_DBUS[19] = #60000 1'b0;
	treg_DBUS[19] = #20000 1'bZ;
end 
// DBUS[ 18 ]
initial
begin
	treg_DBUS[18] = 1'bZ;
	treg_DBUS[18] = #40000 1'b0;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #60000 1'b0;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #60000 1'b0;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #60000 1'b0;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #60000 1'b0;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #60000 1'b0;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #60000 1'b0;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #60000 1'b0;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #60000 1'b1;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #60000 1'b1;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #60000 1'b1;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #40000 1'b0;
	treg_DBUS[18] = #20000 1'b1;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #60000 1'b0;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #60000 1'b0;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #60000 1'b0;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #60000 1'b1;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #60000 1'b0;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #60000 1'b1;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #40000 1'b0;
	treg_DBUS[18] = #20000 1'b1;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #60000 1'b0;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #60000 1'b0;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #40000 1'b0;
	treg_DBUS[18] = #40000 1'bZ;
	treg_DBUS[18] = #60000 1'b0;
	treg_DBUS[18] = #20000 1'bZ;
	treg_DBUS[18] = #60000 1'b1;
	treg_DBUS[18] = #20000 1'bZ;
end 
// DBUS[ 17 ]
initial
begin
	treg_DBUS[17] = 1'bZ;
	treg_DBUS[17] = #40000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #60000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #60000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #60000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #60000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #60000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #60000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #60000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #60000 1'b1;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #60000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #60000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #40000 1'b0;
	treg_DBUS[17] = #20000 1'b1;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #60000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #60000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #60000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #60000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #60000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #60000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #40000 1'b0;
	treg_DBUS[17] = #20000 1'b1;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #60000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #60000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #40000 1'b0;
	treg_DBUS[17] = #40000 1'bZ;
	treg_DBUS[17] = #60000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
	treg_DBUS[17] = #60000 1'b0;
	treg_DBUS[17] = #20000 1'bZ;
end 
// DBUS[ 16 ]
initial
begin
	treg_DBUS[16] = 1'bZ;
	treg_DBUS[16] = #40000 1'b0;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #60000 1'b0;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #60000 1'b0;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #60000 1'b1;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #60000 1'b1;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #60000 1'b1;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #60000 1'b1;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #60000 1'b1;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #60000 1'b1;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #60000 1'b0;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #60000 1'b0;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #40000 1'b1;
	treg_DBUS[16] = #40000 1'bZ;
	treg_DBUS[16] = #60000 1'b1;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #60000 1'b1;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #60000 1'b1;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #60000 1'b0;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #60000 1'b0;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #60000 1'b0;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #40000 1'b1;
	treg_DBUS[16] = #40000 1'bZ;
	treg_DBUS[16] = #60000 1'b0;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #60000 1'b1;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #40000 1'b0;
	treg_DBUS[16] = #20000 1'b1;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #60000 1'b0;
	treg_DBUS[16] = #20000 1'bZ;
	treg_DBUS[16] = #60000 1'b0;
	treg_DBUS[16] = #20000 1'bZ;
end 
// DBUS[ 15 ]
initial
begin
	treg_DBUS[15] = 1'bZ;
	treg_DBUS[15] = #40000 1'b0;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #60000 1'b1;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #60000 1'b0;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #60000 1'b0;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #60000 1'b0;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #60000 1'b0;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #60000 1'b0;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #60000 1'b0;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #60000 1'b1;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #60000 1'b0;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #60000 1'b0;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #40000 1'b0;
	treg_DBUS[15] = #20000 1'b1;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #60000 1'b0;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #60000 1'b0;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #60000 1'b0;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #60000 1'b0;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #60000 1'b0;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #60000 1'b0;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #40000 1'b0;
	treg_DBUS[15] = #20000 1'b1;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #60000 1'b0;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #60000 1'b0;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #40000 1'b0;
	treg_DBUS[15] = #40000 1'bZ;
	treg_DBUS[15] = #60000 1'b1;
	treg_DBUS[15] = #20000 1'bZ;
	treg_DBUS[15] = #60000 1'b0;
	treg_DBUS[15] = #20000 1'bZ;
end 
// DBUS[ 14 ]
initial
begin
	treg_DBUS[14] = 1'bZ;
	treg_DBUS[14] = #40000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #40000 1'b0;
	treg_DBUS[14] = #20000 1'b1;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #40000 1'b0;
	treg_DBUS[14] = #40000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #40000 1'b0;
	treg_DBUS[14] = #40000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
	treg_DBUS[14] = #60000 1'b0;
	treg_DBUS[14] = #20000 1'bZ;
end 
// DBUS[ 13 ]
initial
begin
	treg_DBUS[13] = 1'bZ;
	treg_DBUS[13] = #40000 1'b0;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #60000 1'b0;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #60000 1'b0;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #60000 1'b0;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #60000 1'b1;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #60000 1'b1;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #60000 1'b0;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #60000 1'b0;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #60000 1'b0;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #60000 1'b1;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #60000 1'b1;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #40000 1'b0;
	treg_DBUS[13] = #20000 1'b1;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #60000 1'b0;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #60000 1'b1;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #60000 1'b0;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #60000 1'b1;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #60000 1'b0;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #60000 1'b1;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #40000 1'b0;
	treg_DBUS[13] = #20000 1'b1;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #60000 1'b0;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #60000 1'b1;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #40000 1'b0;
	treg_DBUS[13] = #40000 1'bZ;
	treg_DBUS[13] = #60000 1'b0;
	treg_DBUS[13] = #20000 1'bZ;
	treg_DBUS[13] = #60000 1'b1;
	treg_DBUS[13] = #20000 1'bZ;
end 
// DBUS[ 12 ]
initial
begin
	treg_DBUS[12] = 1'bZ;
	treg_DBUS[12] = #40000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #40000 1'b0;
	treg_DBUS[12] = #20000 1'b1;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #40000 1'b0;
	treg_DBUS[12] = #40000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #40000 1'b0;
	treg_DBUS[12] = #40000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
	treg_DBUS[12] = #60000 1'b0;
	treg_DBUS[12] = #20000 1'bZ;
end 
// DBUS[ 11 ]
initial
begin
	treg_DBUS[11] = 1'bZ;
	treg_DBUS[11] = #40000 1'b0;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #60000 1'b0;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #60000 1'b0;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #60000 1'b0;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #60000 1'b1;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #60000 1'b1;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #60000 1'b0;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #60000 1'b0;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #60000 1'b0;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #60000 1'b0;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #60000 1'b0;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #40000 1'b0;
	treg_DBUS[11] = #40000 1'bZ;
	treg_DBUS[11] = #60000 1'b0;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #60000 1'b1;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #60000 1'b0;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #60000 1'b0;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #60000 1'b0;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #60000 1'b0;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #40000 1'b0;
	treg_DBUS[11] = #40000 1'bZ;
	treg_DBUS[11] = #60000 1'b0;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #60000 1'b0;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #40000 1'b0;
	treg_DBUS[11] = #40000 1'bZ;
	treg_DBUS[11] = #60000 1'b0;
	treg_DBUS[11] = #20000 1'bZ;
	treg_DBUS[11] = #60000 1'b0;
	treg_DBUS[11] = #20000 1'bZ;
end 
// DBUS[ 10 ]
initial
begin
	treg_DBUS[10] = 1'bZ;
	treg_DBUS[10] = #40000 1'b0;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #60000 1'b0;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #60000 1'b0;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #60000 1'b0;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #60000 1'b1;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #60000 1'b1;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #60000 1'b1;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #60000 1'b1;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #60000 1'b1;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #60000 1'b1;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #60000 1'b1;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #40000 1'b0;
	treg_DBUS[10] = #40000 1'bZ;
	treg_DBUS[10] = #60000 1'b0;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #60000 1'b1;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #60000 1'b1;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #60000 1'b1;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #60000 1'b1;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #60000 1'b1;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #40000 1'b0;
	treg_DBUS[10] = #40000 1'bZ;
	treg_DBUS[10] = #60000 1'b0;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #60000 1'b1;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #40000 1'b0;
	treg_DBUS[10] = #40000 1'bZ;
	treg_DBUS[10] = #60000 1'b0;
	treg_DBUS[10] = #20000 1'bZ;
	treg_DBUS[10] = #60000 1'b1;
	treg_DBUS[10] = #20000 1'bZ;
end 
// DBUS[ 9 ]
initial
begin
	treg_DBUS[9] = 1'bZ;
	treg_DBUS[9] = #40000 1'b0;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #60000 1'b0;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #60000 1'b0;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #60000 1'b0;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #60000 1'b1;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #60000 1'b0;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #60000 1'b0;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #60000 1'b1;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #60000 1'b1;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #60000 1'b1;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #60000 1'b0;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #40000 1'b0;
	treg_DBUS[9] = #40000 1'bZ;
	treg_DBUS[9] = #60000 1'b0;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #60000 1'b1;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #60000 1'b0;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #60000 1'b1;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #60000 1'b1;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #60000 1'b1;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #40000 1'b0;
	treg_DBUS[9] = #40000 1'bZ;
	treg_DBUS[9] = #60000 1'b0;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #60000 1'b0;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #40000 1'b0;
	treg_DBUS[9] = #40000 1'bZ;
	treg_DBUS[9] = #60000 1'b0;
	treg_DBUS[9] = #20000 1'bZ;
	treg_DBUS[9] = #60000 1'b0;
	treg_DBUS[9] = #20000 1'bZ;
end 
// DBUS[ 8 ]
initial
begin
	treg_DBUS[8] = 1'bZ;
	treg_DBUS[8] = #40000 1'b0;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b1;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b0;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b1;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b0;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b0;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b0;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b1;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b1;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b0;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b1;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #40000 1'b1;
	treg_DBUS[8] = #20000 1'b0;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b1;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b0;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b0;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b0;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b1;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b1;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #40000 1'b1;
	treg_DBUS[8] = #20000 1'b0;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b0;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b0;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #40000 1'b0;
	treg_DBUS[8] = #20000 1'b1;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b0;
	treg_DBUS[8] = #20000 1'bZ;
	treg_DBUS[8] = #60000 1'b1;
	treg_DBUS[8] = #20000 1'bZ;
end 
// DBUS[ 7 ]
initial
begin
	treg_DBUS[7] = 1'bZ;
	treg_DBUS[7] = #40000 1'b0;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #60000 1'b0;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #60000 1'b1;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #60000 1'b0;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #60000 1'b0;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #60000 1'b0;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #60000 1'b0;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #60000 1'b1;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #60000 1'b1;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #60000 1'b0;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #60000 1'b0;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #40000 1'b0;
	treg_DBUS[7] = #20000 1'b1;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #60000 1'b0;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #60000 1'b0;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #60000 1'b0;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #60000 1'b0;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #60000 1'b1;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #60000 1'b0;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #40000 1'b0;
	treg_DBUS[7] = #40000 1'bZ;
	treg_DBUS[7] = #60000 1'b0;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #60000 1'b0;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #40000 1'b0;
	treg_DBUS[7] = #40000 1'bZ;
	treg_DBUS[7] = #60000 1'b0;
	treg_DBUS[7] = #20000 1'bZ;
	treg_DBUS[7] = #60000 1'b0;
	treg_DBUS[7] = #20000 1'bZ;
end 
// DBUS[ 6 ]
initial
begin
	treg_DBUS[6] = 1'bZ;
	treg_DBUS[6] = #40000 1'b0;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #60000 1'b0;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #60000 1'b1;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #60000 1'b0;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #60000 1'b0;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #60000 1'b0;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #60000 1'b0;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #60000 1'b0;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #60000 1'b0;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #60000 1'b0;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #60000 1'b0;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #40000 1'b0;
	treg_DBUS[6] = #20000 1'b1;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #60000 1'b0;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #60000 1'b0;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #60000 1'b0;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #60000 1'b0;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #60000 1'b0;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #60000 1'b0;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #40000 1'b0;
	treg_DBUS[6] = #40000 1'bZ;
	treg_DBUS[6] = #60000 1'b0;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #60000 1'b0;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #40000 1'b0;
	treg_DBUS[6] = #40000 1'bZ;
	treg_DBUS[6] = #60000 1'b1;
	treg_DBUS[6] = #20000 1'bZ;
	treg_DBUS[6] = #60000 1'b0;
	treg_DBUS[6] = #20000 1'bZ;
end 
// DBUS[ 5 ]
initial
begin
	treg_DBUS[5] = 1'bZ;
	treg_DBUS[5] = #40000 1'b0;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #60000 1'b1;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #60000 1'b1;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #60000 1'b0;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #60000 1'b1;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #60000 1'b1;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #60000 1'b0;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #60000 1'b1;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #60000 1'b0;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #60000 1'b1;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #60000 1'b0;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #40000 1'b0;
	treg_DBUS[5] = #20000 1'b1;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #60000 1'b0;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #60000 1'b1;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #60000 1'b0;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #60000 1'b1;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #60000 1'b0;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #60000 1'b0;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #40000 1'b0;
	treg_DBUS[5] = #20000 1'b1;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #60000 1'b0;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #60000 1'b0;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #40000 1'b0;
	treg_DBUS[5] = #40000 1'bZ;
	treg_DBUS[5] = #60000 1'b1;
	treg_DBUS[5] = #20000 1'bZ;
	treg_DBUS[5] = #60000 1'b0;
	treg_DBUS[5] = #20000 1'bZ;
end 
// DBUS[ 4 ]
initial
begin
	treg_DBUS[4] = 1'bZ;
	treg_DBUS[4] = #40000 1'b1;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #60000 1'b1;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #60000 1'b0;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #60000 1'b1;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #60000 1'b0;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #60000 1'b0;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #60000 1'b1;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #60000 1'b1;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #60000 1'b1;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #60000 1'b0;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #60000 1'b0;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #40000 1'b0;
	treg_DBUS[4] = #40000 1'bZ;
	treg_DBUS[4] = #60000 1'b1;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #60000 1'b0;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #60000 1'b1;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #60000 1'b0;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #60000 1'b1;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #60000 1'b0;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #40000 1'b0;
	treg_DBUS[4] = #40000 1'bZ;
	treg_DBUS[4] = #60000 1'b1;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #60000 1'b0;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #40000 1'b0;
	treg_DBUS[4] = #20000 1'b1;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #60000 1'b0;
	treg_DBUS[4] = #20000 1'bZ;
	treg_DBUS[4] = #60000 1'b0;
	treg_DBUS[4] = #20000 1'bZ;
end 
// DBUS[ 3 ]
initial
begin
	treg_DBUS[3] = 1'bZ;
	treg_DBUS[3] = #40000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #60000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #60000 1'b1;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #60000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #60000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #60000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #60000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #60000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #60000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #60000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #60000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #40000 1'b0;
	treg_DBUS[3] = #20000 1'b1;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #60000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #60000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #60000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #60000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #60000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #60000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #40000 1'b0;
	treg_DBUS[3] = #40000 1'bZ;
	treg_DBUS[3] = #60000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #60000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #40000 1'b1;
	treg_DBUS[3] = #20000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #60000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
	treg_DBUS[3] = #60000 1'b0;
	treg_DBUS[3] = #20000 1'bZ;
end 
// DBUS[ 2 ]
initial
begin
	treg_DBUS[2] = 1'bZ;
	treg_DBUS[2] = #40000 1'b0;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #60000 1'b1;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #60000 1'b1;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #60000 1'b0;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #60000 1'b0;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #60000 1'b0;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #60000 1'b0;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #60000 1'b1;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #60000 1'b0;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #60000 1'b0;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #60000 1'b0;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #40000 1'b0;
	treg_DBUS[2] = #20000 1'b1;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #60000 1'b0;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #60000 1'b0;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #60000 1'b0;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #60000 1'b0;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #60000 1'b0;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #60000 1'b0;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #40000 1'b0;
	treg_DBUS[2] = #40000 1'bZ;
	treg_DBUS[2] = #60000 1'b0;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #60000 1'b0;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #40000 1'b1;
	treg_DBUS[2] = #20000 1'b0;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #60000 1'b1;
	treg_DBUS[2] = #20000 1'bZ;
	treg_DBUS[2] = #60000 1'b0;
	treg_DBUS[2] = #20000 1'bZ;
end 
// DBUS[ 1 ]
initial
begin
	treg_DBUS[1] = 1'bZ;
	treg_DBUS[1] = #40000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #40000 1'b0;
	treg_DBUS[1] = #20000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #40000 1'b0;
	treg_DBUS[1] = #20000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #40000 1'b0;
	treg_DBUS[1] = #20000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
	treg_DBUS[1] = #60000 1'b1;
	treg_DBUS[1] = #20000 1'bZ;
end 
// DBUS[ 0 ]
initial
begin
	treg_DBUS[0] = 1'bZ;
	treg_DBUS[0] = #40000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #40000 1'b1;
	treg_DBUS[0] = #40000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #40000 1'b1;
	treg_DBUS[0] = #40000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #40000 1'b0;
	treg_DBUS[0] = #20000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
	treg_DBUS[0] = #60000 1'b1;
	treg_DBUS[0] = #20000 1'bZ;
end 

rv32i_debug_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.DBUS(DBUS),
	.sampler_tx(sampler)
);

rv32i_debug_vlg_check_tst tb_out(
	.ABUS(ABUS),
	.ADDR(ADDR),
	.ALUOUT(ALUOUT),
	.BRANCH(BRANCH),
	.BRC(BRC),
	.DATA(DATA),
	.DATA_REG(DATA_REG),
	.DBUS(DBUS),
	.IR(IR),
	.JAL(JAL),
	.JALR(JALR),
	.LD_IR(LD_IR),
	.LD_PC(LD_PC),
	.LD_REG(LD_REG),
	.LEN(LEN),
	.PC(PC),
	.RD(RD),
	.WR(WR),
	.sampler_rx(sampler)
);
endmodule

