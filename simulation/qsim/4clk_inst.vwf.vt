// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/09/2023 16:21:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ARP
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ARP_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] BTN;
reg CLK;
reg [15:0] treg_DRAM_DQ;
reg PS2_KBCLK;
reg PS2_KBDAT;
reg [9:0] SW;
// wires                                               
wire [31:0] 7SEG;
wire [11:0] DRAM_ADDR;
wire DRAM_BA_0;
wire DRAM_BA_1;
wire DRAM_CAS_N;
wire DRAM_CKE;
wire DRAM_CLK;
wire DRAM_CS_N;
wire [15:0] DRAM_DQ;
wire DRAM_LDQM;
wire DRAM_RAS_N;
wire DRAM_UDQM;
wire DRAM_WE_N;
wire [9:0] LED;
wire [3:0] VGA_B;
wire [3:0] VGA_G;
wire VGA_HS;
wire [3:0] VGA_R;
wire VGA_VS;

// assign statements (if any)                          
assign DRAM_DQ = treg_DRAM_DQ;
ARP i1 (
// port map - connection between master ports and signals/registers   
	.\7SEG (7SEG),
	.BTN(BTN),
	.CLK(CLK),
	.DRAM_ADDR(DRAM_ADDR),
	.DRAM_BA_0(DRAM_BA_0),
	.DRAM_BA_1(DRAM_BA_1),
	.DRAM_CAS_N(DRAM_CAS_N),
	.DRAM_CKE(DRAM_CKE),
	.DRAM_CLK(DRAM_CLK),
	.DRAM_CS_N(DRAM_CS_N),
	.DRAM_DQ(DRAM_DQ),
	.DRAM_LDQM(DRAM_LDQM),
	.DRAM_RAS_N(DRAM_RAS_N),
	.DRAM_UDQM(DRAM_UDQM),
	.DRAM_WE_N(DRAM_WE_N),
	.LED(LED),
	.PS2_KBCLK(PS2_KBCLK),
	.PS2_KBDAT(PS2_KBDAT),
	.SW(SW),
	.VGA_B(VGA_B),
	.VGA_G(VGA_G),
	.VGA_HS(VGA_HS),
	.VGA_R(VGA_R),
	.VGA_VS(VGA_VS)
);
initial 
begin 
#10000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
initial 
begin 
#10000000 $finish;
end 
endmodule

