// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/22/2023 17:10:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    cpu_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cpu_test_vlg_sample_tst(
	ADDRIN,
	ADDROUT1,
	ADDROUT2,
	CLK,
	CLR,
	DATAIN,
	func3,
	func7,
	LD,
	S,
	sampler_tx
);
input [4:0] ADDRIN;
input [4:0] ADDROUT1;
input [4:0] ADDROUT2;
input  CLK;
input  CLR;
input [31:0] DATAIN;
input [2:0] func3;
input [6:0] func7;
input  LD;
input  S;
output sampler_tx;

reg sample;
time current_time;
always @(ADDRIN or ADDROUT1 or ADDROUT2 or CLK or CLR or DATAIN or func3 or func7 or LD or S)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module cpu_test_vlg_check_tst (
	DIN,
	DOUT1,
	sampler_rx
);
input [31:0] DIN;
input [31:0] DOUT1;
input sampler_rx;

reg [31:0] DIN_expected;
reg [31:0] DOUT1_expected;

reg [31:0] DIN_prev;
reg [31:0] DOUT1_prev;

reg [31:0] DIN_expected_prev;
reg [31:0] DOUT1_expected_prev;

reg [31:0] last_DIN_exp;
reg [31:0] last_DOUT1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	DIN_prev = DIN;
	DOUT1_prev = DOUT1;
end

// update expected /o prevs

always @(trigger)
begin
	DIN_expected_prev = DIN_expected;
	DOUT1_expected_prev = DOUT1_expected;
end


// expected DIN[ 31 ]
initial
begin
	DIN_expected[31] = 1'bX;
end 
// expected DIN[ 30 ]
initial
begin
	DIN_expected[30] = 1'bX;
end 
// expected DIN[ 29 ]
initial
begin
	DIN_expected[29] = 1'bX;
end 
// expected DIN[ 28 ]
initial
begin
	DIN_expected[28] = 1'bX;
end 
// expected DIN[ 27 ]
initial
begin
	DIN_expected[27] = 1'bX;
end 
// expected DIN[ 26 ]
initial
begin
	DIN_expected[26] = 1'bX;
end 
// expected DIN[ 25 ]
initial
begin
	DIN_expected[25] = 1'bX;
end 
// expected DIN[ 24 ]
initial
begin
	DIN_expected[24] = 1'bX;
end 
// expected DIN[ 23 ]
initial
begin
	DIN_expected[23] = 1'bX;
end 
// expected DIN[ 22 ]
initial
begin
	DIN_expected[22] = 1'bX;
end 
// expected DIN[ 21 ]
initial
begin
	DIN_expected[21] = 1'bX;
end 
// expected DIN[ 20 ]
initial
begin
	DIN_expected[20] = 1'bX;
end 
// expected DIN[ 19 ]
initial
begin
	DIN_expected[19] = 1'bX;
end 
// expected DIN[ 18 ]
initial
begin
	DIN_expected[18] = 1'bX;
end 
// expected DIN[ 17 ]
initial
begin
	DIN_expected[17] = 1'bX;
end 
// expected DIN[ 16 ]
initial
begin
	DIN_expected[16] = 1'bX;
end 
// expected DIN[ 15 ]
initial
begin
	DIN_expected[15] = 1'bX;
end 
// expected DIN[ 14 ]
initial
begin
	DIN_expected[14] = 1'bX;
end 
// expected DIN[ 13 ]
initial
begin
	DIN_expected[13] = 1'bX;
end 
// expected DIN[ 12 ]
initial
begin
	DIN_expected[12] = 1'bX;
end 
// expected DIN[ 11 ]
initial
begin
	DIN_expected[11] = 1'bX;
end 
// expected DIN[ 10 ]
initial
begin
	DIN_expected[10] = 1'bX;
end 
// expected DIN[ 9 ]
initial
begin
	DIN_expected[9] = 1'bX;
end 
// expected DIN[ 8 ]
initial
begin
	DIN_expected[8] = 1'bX;
end 
// expected DIN[ 7 ]
initial
begin
	DIN_expected[7] = 1'bX;
end 
// expected DIN[ 6 ]
initial
begin
	DIN_expected[6] = 1'bX;
end 
// expected DIN[ 5 ]
initial
begin
	DIN_expected[5] = 1'bX;
end 
// expected DIN[ 4 ]
initial
begin
	DIN_expected[4] = 1'bX;
end 
// expected DIN[ 3 ]
initial
begin
	DIN_expected[3] = 1'bX;
end 
// expected DIN[ 2 ]
initial
begin
	DIN_expected[2] = 1'bX;
end 
// expected DIN[ 1 ]
initial
begin
	DIN_expected[1] = 1'bX;
end 
// expected DIN[ 0 ]
initial
begin
	DIN_expected[0] = 1'bX;
end 
// expected DOUT1[ 31 ]
initial
begin
	DOUT1_expected[31] = 1'bX;
end 
// expected DOUT1[ 30 ]
initial
begin
	DOUT1_expected[30] = 1'bX;
end 
// expected DOUT1[ 29 ]
initial
begin
	DOUT1_expected[29] = 1'bX;
end 
// expected DOUT1[ 28 ]
initial
begin
	DOUT1_expected[28] = 1'bX;
end 
// expected DOUT1[ 27 ]
initial
begin
	DOUT1_expected[27] = 1'bX;
end 
// expected DOUT1[ 26 ]
initial
begin
	DOUT1_expected[26] = 1'bX;
end 
// expected DOUT1[ 25 ]
initial
begin
	DOUT1_expected[25] = 1'bX;
end 
// expected DOUT1[ 24 ]
initial
begin
	DOUT1_expected[24] = 1'bX;
end 
// expected DOUT1[ 23 ]
initial
begin
	DOUT1_expected[23] = 1'bX;
end 
// expected DOUT1[ 22 ]
initial
begin
	DOUT1_expected[22] = 1'bX;
end 
// expected DOUT1[ 21 ]
initial
begin
	DOUT1_expected[21] = 1'bX;
end 
// expected DOUT1[ 20 ]
initial
begin
	DOUT1_expected[20] = 1'bX;
end 
// expected DOUT1[ 19 ]
initial
begin
	DOUT1_expected[19] = 1'bX;
end 
// expected DOUT1[ 18 ]
initial
begin
	DOUT1_expected[18] = 1'bX;
end 
// expected DOUT1[ 17 ]
initial
begin
	DOUT1_expected[17] = 1'bX;
end 
// expected DOUT1[ 16 ]
initial
begin
	DOUT1_expected[16] = 1'bX;
end 
// expected DOUT1[ 15 ]
initial
begin
	DOUT1_expected[15] = 1'bX;
end 
// expected DOUT1[ 14 ]
initial
begin
	DOUT1_expected[14] = 1'bX;
end 
// expected DOUT1[ 13 ]
initial
begin
	DOUT1_expected[13] = 1'bX;
end 
// expected DOUT1[ 12 ]
initial
begin
	DOUT1_expected[12] = 1'bX;
end 
// expected DOUT1[ 11 ]
initial
begin
	DOUT1_expected[11] = 1'bX;
end 
// expected DOUT1[ 10 ]
initial
begin
	DOUT1_expected[10] = 1'bX;
end 
// expected DOUT1[ 9 ]
initial
begin
	DOUT1_expected[9] = 1'bX;
end 
// expected DOUT1[ 8 ]
initial
begin
	DOUT1_expected[8] = 1'bX;
end 
// expected DOUT1[ 7 ]
initial
begin
	DOUT1_expected[7] = 1'bX;
end 
// expected DOUT1[ 6 ]
initial
begin
	DOUT1_expected[6] = 1'bX;
end 
// expected DOUT1[ 5 ]
initial
begin
	DOUT1_expected[5] = 1'bX;
end 
// expected DOUT1[ 4 ]
initial
begin
	DOUT1_expected[4] = 1'bX;
end 
// expected DOUT1[ 3 ]
initial
begin
	DOUT1_expected[3] = 1'bX;
end 
// expected DOUT1[ 2 ]
initial
begin
	DOUT1_expected[2] = 1'bX;
end 
// expected DOUT1[ 1 ]
initial
begin
	DOUT1_expected[1] = 1'bX;
end 
// expected DOUT1[ 0 ]
initial
begin
	DOUT1_expected[0] = 1'bX;
end 
// generate trigger
always @(DIN_expected or DIN or DOUT1_expected or DOUT1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DIN = %b | expected DOUT1 = %b | ",DIN_expected_prev,DOUT1_expected_prev);
	$display("| real DIN = %b | real DOUT1 = %b | ",DIN_prev,DOUT1_prev);
`endif
	if (
		( DIN_expected_prev[0] !== 1'bx ) && ( DIN_prev[0] !== DIN_expected_prev[0] )
		&& ((DIN_expected_prev[0] !== last_DIN_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[0] = DIN_expected_prev[0];
	end
	if (
		( DIN_expected_prev[1] !== 1'bx ) && ( DIN_prev[1] !== DIN_expected_prev[1] )
		&& ((DIN_expected_prev[1] !== last_DIN_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[1] = DIN_expected_prev[1];
	end
	if (
		( DIN_expected_prev[2] !== 1'bx ) && ( DIN_prev[2] !== DIN_expected_prev[2] )
		&& ((DIN_expected_prev[2] !== last_DIN_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[2] = DIN_expected_prev[2];
	end
	if (
		( DIN_expected_prev[3] !== 1'bx ) && ( DIN_prev[3] !== DIN_expected_prev[3] )
		&& ((DIN_expected_prev[3] !== last_DIN_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[3] = DIN_expected_prev[3];
	end
	if (
		( DIN_expected_prev[4] !== 1'bx ) && ( DIN_prev[4] !== DIN_expected_prev[4] )
		&& ((DIN_expected_prev[4] !== last_DIN_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[4] = DIN_expected_prev[4];
	end
	if (
		( DIN_expected_prev[5] !== 1'bx ) && ( DIN_prev[5] !== DIN_expected_prev[5] )
		&& ((DIN_expected_prev[5] !== last_DIN_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[5] = DIN_expected_prev[5];
	end
	if (
		( DIN_expected_prev[6] !== 1'bx ) && ( DIN_prev[6] !== DIN_expected_prev[6] )
		&& ((DIN_expected_prev[6] !== last_DIN_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[6] = DIN_expected_prev[6];
	end
	if (
		( DIN_expected_prev[7] !== 1'bx ) && ( DIN_prev[7] !== DIN_expected_prev[7] )
		&& ((DIN_expected_prev[7] !== last_DIN_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[7] = DIN_expected_prev[7];
	end
	if (
		( DIN_expected_prev[8] !== 1'bx ) && ( DIN_prev[8] !== DIN_expected_prev[8] )
		&& ((DIN_expected_prev[8] !== last_DIN_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[8] = DIN_expected_prev[8];
	end
	if (
		( DIN_expected_prev[9] !== 1'bx ) && ( DIN_prev[9] !== DIN_expected_prev[9] )
		&& ((DIN_expected_prev[9] !== last_DIN_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[9] = DIN_expected_prev[9];
	end
	if (
		( DIN_expected_prev[10] !== 1'bx ) && ( DIN_prev[10] !== DIN_expected_prev[10] )
		&& ((DIN_expected_prev[10] !== last_DIN_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[10] = DIN_expected_prev[10];
	end
	if (
		( DIN_expected_prev[11] !== 1'bx ) && ( DIN_prev[11] !== DIN_expected_prev[11] )
		&& ((DIN_expected_prev[11] !== last_DIN_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[11] = DIN_expected_prev[11];
	end
	if (
		( DIN_expected_prev[12] !== 1'bx ) && ( DIN_prev[12] !== DIN_expected_prev[12] )
		&& ((DIN_expected_prev[12] !== last_DIN_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[12] = DIN_expected_prev[12];
	end
	if (
		( DIN_expected_prev[13] !== 1'bx ) && ( DIN_prev[13] !== DIN_expected_prev[13] )
		&& ((DIN_expected_prev[13] !== last_DIN_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[13] = DIN_expected_prev[13];
	end
	if (
		( DIN_expected_prev[14] !== 1'bx ) && ( DIN_prev[14] !== DIN_expected_prev[14] )
		&& ((DIN_expected_prev[14] !== last_DIN_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[14] = DIN_expected_prev[14];
	end
	if (
		( DIN_expected_prev[15] !== 1'bx ) && ( DIN_prev[15] !== DIN_expected_prev[15] )
		&& ((DIN_expected_prev[15] !== last_DIN_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[15] = DIN_expected_prev[15];
	end
	if (
		( DIN_expected_prev[16] !== 1'bx ) && ( DIN_prev[16] !== DIN_expected_prev[16] )
		&& ((DIN_expected_prev[16] !== last_DIN_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[16] = DIN_expected_prev[16];
	end
	if (
		( DIN_expected_prev[17] !== 1'bx ) && ( DIN_prev[17] !== DIN_expected_prev[17] )
		&& ((DIN_expected_prev[17] !== last_DIN_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[17] = DIN_expected_prev[17];
	end
	if (
		( DIN_expected_prev[18] !== 1'bx ) && ( DIN_prev[18] !== DIN_expected_prev[18] )
		&& ((DIN_expected_prev[18] !== last_DIN_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[18] = DIN_expected_prev[18];
	end
	if (
		( DIN_expected_prev[19] !== 1'bx ) && ( DIN_prev[19] !== DIN_expected_prev[19] )
		&& ((DIN_expected_prev[19] !== last_DIN_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[19] = DIN_expected_prev[19];
	end
	if (
		( DIN_expected_prev[20] !== 1'bx ) && ( DIN_prev[20] !== DIN_expected_prev[20] )
		&& ((DIN_expected_prev[20] !== last_DIN_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[20] = DIN_expected_prev[20];
	end
	if (
		( DIN_expected_prev[21] !== 1'bx ) && ( DIN_prev[21] !== DIN_expected_prev[21] )
		&& ((DIN_expected_prev[21] !== last_DIN_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[21] = DIN_expected_prev[21];
	end
	if (
		( DIN_expected_prev[22] !== 1'bx ) && ( DIN_prev[22] !== DIN_expected_prev[22] )
		&& ((DIN_expected_prev[22] !== last_DIN_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[22] = DIN_expected_prev[22];
	end
	if (
		( DIN_expected_prev[23] !== 1'bx ) && ( DIN_prev[23] !== DIN_expected_prev[23] )
		&& ((DIN_expected_prev[23] !== last_DIN_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[23] = DIN_expected_prev[23];
	end
	if (
		( DIN_expected_prev[24] !== 1'bx ) && ( DIN_prev[24] !== DIN_expected_prev[24] )
		&& ((DIN_expected_prev[24] !== last_DIN_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[24] = DIN_expected_prev[24];
	end
	if (
		( DIN_expected_prev[25] !== 1'bx ) && ( DIN_prev[25] !== DIN_expected_prev[25] )
		&& ((DIN_expected_prev[25] !== last_DIN_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[25] = DIN_expected_prev[25];
	end
	if (
		( DIN_expected_prev[26] !== 1'bx ) && ( DIN_prev[26] !== DIN_expected_prev[26] )
		&& ((DIN_expected_prev[26] !== last_DIN_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[26] = DIN_expected_prev[26];
	end
	if (
		( DIN_expected_prev[27] !== 1'bx ) && ( DIN_prev[27] !== DIN_expected_prev[27] )
		&& ((DIN_expected_prev[27] !== last_DIN_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[27] = DIN_expected_prev[27];
	end
	if (
		( DIN_expected_prev[28] !== 1'bx ) && ( DIN_prev[28] !== DIN_expected_prev[28] )
		&& ((DIN_expected_prev[28] !== last_DIN_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[28] = DIN_expected_prev[28];
	end
	if (
		( DIN_expected_prev[29] !== 1'bx ) && ( DIN_prev[29] !== DIN_expected_prev[29] )
		&& ((DIN_expected_prev[29] !== last_DIN_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[29] = DIN_expected_prev[29];
	end
	if (
		( DIN_expected_prev[30] !== 1'bx ) && ( DIN_prev[30] !== DIN_expected_prev[30] )
		&& ((DIN_expected_prev[30] !== last_DIN_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[30] = DIN_expected_prev[30];
	end
	if (
		( DIN_expected_prev[31] !== 1'bx ) && ( DIN_prev[31] !== DIN_expected_prev[31] )
		&& ((DIN_expected_prev[31] !== last_DIN_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIN_exp[31] = DIN_expected_prev[31];
	end
	if (
		( DOUT1_expected_prev[0] !== 1'bx ) && ( DOUT1_prev[0] !== DOUT1_expected_prev[0] )
		&& ((DOUT1_expected_prev[0] !== last_DOUT1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[0] = DOUT1_expected_prev[0];
	end
	if (
		( DOUT1_expected_prev[1] !== 1'bx ) && ( DOUT1_prev[1] !== DOUT1_expected_prev[1] )
		&& ((DOUT1_expected_prev[1] !== last_DOUT1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[1] = DOUT1_expected_prev[1];
	end
	if (
		( DOUT1_expected_prev[2] !== 1'bx ) && ( DOUT1_prev[2] !== DOUT1_expected_prev[2] )
		&& ((DOUT1_expected_prev[2] !== last_DOUT1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[2] = DOUT1_expected_prev[2];
	end
	if (
		( DOUT1_expected_prev[3] !== 1'bx ) && ( DOUT1_prev[3] !== DOUT1_expected_prev[3] )
		&& ((DOUT1_expected_prev[3] !== last_DOUT1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[3] = DOUT1_expected_prev[3];
	end
	if (
		( DOUT1_expected_prev[4] !== 1'bx ) && ( DOUT1_prev[4] !== DOUT1_expected_prev[4] )
		&& ((DOUT1_expected_prev[4] !== last_DOUT1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[4] = DOUT1_expected_prev[4];
	end
	if (
		( DOUT1_expected_prev[5] !== 1'bx ) && ( DOUT1_prev[5] !== DOUT1_expected_prev[5] )
		&& ((DOUT1_expected_prev[5] !== last_DOUT1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[5] = DOUT1_expected_prev[5];
	end
	if (
		( DOUT1_expected_prev[6] !== 1'bx ) && ( DOUT1_prev[6] !== DOUT1_expected_prev[6] )
		&& ((DOUT1_expected_prev[6] !== last_DOUT1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[6] = DOUT1_expected_prev[6];
	end
	if (
		( DOUT1_expected_prev[7] !== 1'bx ) && ( DOUT1_prev[7] !== DOUT1_expected_prev[7] )
		&& ((DOUT1_expected_prev[7] !== last_DOUT1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[7] = DOUT1_expected_prev[7];
	end
	if (
		( DOUT1_expected_prev[8] !== 1'bx ) && ( DOUT1_prev[8] !== DOUT1_expected_prev[8] )
		&& ((DOUT1_expected_prev[8] !== last_DOUT1_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[8] = DOUT1_expected_prev[8];
	end
	if (
		( DOUT1_expected_prev[9] !== 1'bx ) && ( DOUT1_prev[9] !== DOUT1_expected_prev[9] )
		&& ((DOUT1_expected_prev[9] !== last_DOUT1_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[9] = DOUT1_expected_prev[9];
	end
	if (
		( DOUT1_expected_prev[10] !== 1'bx ) && ( DOUT1_prev[10] !== DOUT1_expected_prev[10] )
		&& ((DOUT1_expected_prev[10] !== last_DOUT1_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[10] = DOUT1_expected_prev[10];
	end
	if (
		( DOUT1_expected_prev[11] !== 1'bx ) && ( DOUT1_prev[11] !== DOUT1_expected_prev[11] )
		&& ((DOUT1_expected_prev[11] !== last_DOUT1_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[11] = DOUT1_expected_prev[11];
	end
	if (
		( DOUT1_expected_prev[12] !== 1'bx ) && ( DOUT1_prev[12] !== DOUT1_expected_prev[12] )
		&& ((DOUT1_expected_prev[12] !== last_DOUT1_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[12] = DOUT1_expected_prev[12];
	end
	if (
		( DOUT1_expected_prev[13] !== 1'bx ) && ( DOUT1_prev[13] !== DOUT1_expected_prev[13] )
		&& ((DOUT1_expected_prev[13] !== last_DOUT1_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[13] = DOUT1_expected_prev[13];
	end
	if (
		( DOUT1_expected_prev[14] !== 1'bx ) && ( DOUT1_prev[14] !== DOUT1_expected_prev[14] )
		&& ((DOUT1_expected_prev[14] !== last_DOUT1_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[14] = DOUT1_expected_prev[14];
	end
	if (
		( DOUT1_expected_prev[15] !== 1'bx ) && ( DOUT1_prev[15] !== DOUT1_expected_prev[15] )
		&& ((DOUT1_expected_prev[15] !== last_DOUT1_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[15] = DOUT1_expected_prev[15];
	end
	if (
		( DOUT1_expected_prev[16] !== 1'bx ) && ( DOUT1_prev[16] !== DOUT1_expected_prev[16] )
		&& ((DOUT1_expected_prev[16] !== last_DOUT1_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[16] = DOUT1_expected_prev[16];
	end
	if (
		( DOUT1_expected_prev[17] !== 1'bx ) && ( DOUT1_prev[17] !== DOUT1_expected_prev[17] )
		&& ((DOUT1_expected_prev[17] !== last_DOUT1_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[17] = DOUT1_expected_prev[17];
	end
	if (
		( DOUT1_expected_prev[18] !== 1'bx ) && ( DOUT1_prev[18] !== DOUT1_expected_prev[18] )
		&& ((DOUT1_expected_prev[18] !== last_DOUT1_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[18] = DOUT1_expected_prev[18];
	end
	if (
		( DOUT1_expected_prev[19] !== 1'bx ) && ( DOUT1_prev[19] !== DOUT1_expected_prev[19] )
		&& ((DOUT1_expected_prev[19] !== last_DOUT1_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[19] = DOUT1_expected_prev[19];
	end
	if (
		( DOUT1_expected_prev[20] !== 1'bx ) && ( DOUT1_prev[20] !== DOUT1_expected_prev[20] )
		&& ((DOUT1_expected_prev[20] !== last_DOUT1_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[20] = DOUT1_expected_prev[20];
	end
	if (
		( DOUT1_expected_prev[21] !== 1'bx ) && ( DOUT1_prev[21] !== DOUT1_expected_prev[21] )
		&& ((DOUT1_expected_prev[21] !== last_DOUT1_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[21] = DOUT1_expected_prev[21];
	end
	if (
		( DOUT1_expected_prev[22] !== 1'bx ) && ( DOUT1_prev[22] !== DOUT1_expected_prev[22] )
		&& ((DOUT1_expected_prev[22] !== last_DOUT1_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[22] = DOUT1_expected_prev[22];
	end
	if (
		( DOUT1_expected_prev[23] !== 1'bx ) && ( DOUT1_prev[23] !== DOUT1_expected_prev[23] )
		&& ((DOUT1_expected_prev[23] !== last_DOUT1_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[23] = DOUT1_expected_prev[23];
	end
	if (
		( DOUT1_expected_prev[24] !== 1'bx ) && ( DOUT1_prev[24] !== DOUT1_expected_prev[24] )
		&& ((DOUT1_expected_prev[24] !== last_DOUT1_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[24] = DOUT1_expected_prev[24];
	end
	if (
		( DOUT1_expected_prev[25] !== 1'bx ) && ( DOUT1_prev[25] !== DOUT1_expected_prev[25] )
		&& ((DOUT1_expected_prev[25] !== last_DOUT1_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[25] = DOUT1_expected_prev[25];
	end
	if (
		( DOUT1_expected_prev[26] !== 1'bx ) && ( DOUT1_prev[26] !== DOUT1_expected_prev[26] )
		&& ((DOUT1_expected_prev[26] !== last_DOUT1_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[26] = DOUT1_expected_prev[26];
	end
	if (
		( DOUT1_expected_prev[27] !== 1'bx ) && ( DOUT1_prev[27] !== DOUT1_expected_prev[27] )
		&& ((DOUT1_expected_prev[27] !== last_DOUT1_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[27] = DOUT1_expected_prev[27];
	end
	if (
		( DOUT1_expected_prev[28] !== 1'bx ) && ( DOUT1_prev[28] !== DOUT1_expected_prev[28] )
		&& ((DOUT1_expected_prev[28] !== last_DOUT1_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[28] = DOUT1_expected_prev[28];
	end
	if (
		( DOUT1_expected_prev[29] !== 1'bx ) && ( DOUT1_prev[29] !== DOUT1_expected_prev[29] )
		&& ((DOUT1_expected_prev[29] !== last_DOUT1_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[29] = DOUT1_expected_prev[29];
	end
	if (
		( DOUT1_expected_prev[30] !== 1'bx ) && ( DOUT1_prev[30] !== DOUT1_expected_prev[30] )
		&& ((DOUT1_expected_prev[30] !== last_DOUT1_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[30] = DOUT1_expected_prev[30];
	end
	if (
		( DOUT1_expected_prev[31] !== 1'bx ) && ( DOUT1_prev[31] !== DOUT1_expected_prev[31] )
		&& ((DOUT1_expected_prev[31] !== last_DOUT1_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT1_expected_prev);
		$display ("     Real value = %b", DOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DOUT1_exp[31] = DOUT1_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module cpu_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] ADDRIN;
reg [4:0] ADDROUT1;
reg [4:0] ADDROUT2;
reg CLK;
reg CLR;
reg [31:0] DATAIN;
reg [2:0] func3;
reg [6:0] func7;
reg LD;
reg S;
// wires                                               
wire [31:0] DIN;
wire [31:0] DOUT1;

wire sampler;                             

// assign statements (if any)                          
cpu_test i1 (
// port map - connection between master ports and signals/registers   
	.ADDRIN(ADDRIN),
	.ADDROUT1(ADDROUT1),
	.ADDROUT2(ADDROUT2),
	.CLK(CLK),
	.CLR(CLR),
	.DATAIN(DATAIN),
	.DIN(DIN),
	.DOUT1(DOUT1),
	.func3(func3),
	.func7(func7),
	.LD(LD),
	.S(S)
);
// ADDRIN[ 4 ]
initial
begin
	ADDRIN[4] = 1'b0;
end 
// ADDRIN[ 3 ]
initial
begin
	ADDRIN[3] = 1'b0;
end 
// ADDRIN[ 2 ]
initial
begin
	ADDRIN[2] = 1'b0;
	ADDRIN[2] = #20000 1'b1;
	ADDRIN[2] = #20000 1'b0;
	ADDRIN[2] = #20000 1'b1;
	ADDRIN[2] = #20000 1'b0;
	ADDRIN[2] = #20000 1'b1;
	ADDRIN[2] = #20000 1'b0;
end 
// ADDRIN[ 1 ]
initial
begin
	ADDRIN[1] = 1'b0;
	ADDRIN[1] = #60000 1'b1;
	ADDRIN[1] = #20000 1'b0;
	ADDRIN[1] = #20000 1'b1;
	ADDRIN[1] = #20000 1'b0;
end 
// ADDRIN[ 0 ]
initial
begin
	ADDRIN[0] = 1'b0;
	ADDRIN[0] = #20000 1'b1;
	ADDRIN[0] = #20000 1'b0;
	ADDRIN[0] = #60000 1'b1;
	ADDRIN[0] = #20000 1'b0;
end 
// ADDROUT1[ 4 ]
initial
begin
	ADDROUT1[4] = 1'b0;
end 
// ADDROUT1[ 3 ]
initial
begin
	ADDROUT1[3] = 1'b0;
end 
// ADDROUT1[ 2 ]
initial
begin
	ADDROUT1[2] = 1'b0;
	ADDROUT1[2] = #100000 1'b1;
	ADDROUT1[2] = #20000 1'b0;
	ADDROUT1[2] = #20000 1'b1;
	ADDROUT1[2] = #20000 1'b0;
end 
// ADDROUT1[ 1 ]
initial
begin
	ADDROUT1[1] = 1'b0;
	ADDROUT1[1] = #140000 1'b1;
	ADDROUT1[1] = #20000 1'b0;
end 
// ADDROUT1[ 0 ]
initial
begin
	ADDROUT1[0] = 1'b0;
	ADDROUT1[0] = #100000 1'b1;
	ADDROUT1[0] = #20000 1'b0;
	ADDROUT1[0] = #20000 1'b1;
	ADDROUT1[0] = #20000 1'b0;
end 
// ADDROUT2[ 4 ]
initial
begin
	ADDROUT2[4] = 1'b0;
end 
// ADDROUT2[ 3 ]
initial
begin
	ADDROUT2[3] = 1'b0;
end 
// ADDROUT2[ 2 ]
initial
begin
	ADDROUT2[2] = 1'b0;
	ADDROUT2[2] = #100000 1'b1;
	ADDROUT2[2] = #20000 1'b0;
end 
// ADDROUT2[ 1 ]
initial
begin
	ADDROUT2[1] = 1'b0;
	ADDROUT2[1] = #100000 1'b1;
	ADDROUT2[1] = #20000 1'b0;
end 
// ADDROUT2[ 0 ]
initial
begin
	ADDROUT2[0] = 1'b0;
end 

// CLK
initial
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	# 10000;
	repeat(49)
	begin
		CLK = 1'b0;
		CLK = #10000 1'b1;
		# 10000;
	end
end 

// CLR
initial
begin
	CLR = 1'b0;
end 
// DATAIN[ 31 ]
initial
begin
	DATAIN[31] = 1'b0;
end 
// DATAIN[ 30 ]
initial
begin
	DATAIN[30] = 1'b0;
end 
// DATAIN[ 29 ]
initial
begin
	DATAIN[29] = 1'b0;
end 
// DATAIN[ 28 ]
initial
begin
	DATAIN[28] = 1'b0;
end 
// DATAIN[ 27 ]
initial
begin
	DATAIN[27] = 1'b0;
end 
// DATAIN[ 26 ]
initial
begin
	DATAIN[26] = 1'b0;
end 
// DATAIN[ 25 ]
initial
begin
	DATAIN[25] = 1'b0;
end 
// DATAIN[ 24 ]
initial
begin
	DATAIN[24] = 1'b0;
end 
// DATAIN[ 23 ]
initial
begin
	DATAIN[23] = 1'b0;
end 
// DATAIN[ 22 ]
initial
begin
	DATAIN[22] = 1'b0;
end 
// DATAIN[ 21 ]
initial
begin
	DATAIN[21] = 1'b0;
end 
// DATAIN[ 20 ]
initial
begin
	DATAIN[20] = 1'b0;
end 
// DATAIN[ 19 ]
initial
begin
	DATAIN[19] = 1'b0;
end 
// DATAIN[ 18 ]
initial
begin
	DATAIN[18] = 1'b0;
end 
// DATAIN[ 17 ]
initial
begin
	DATAIN[17] = 1'b0;
end 
// DATAIN[ 16 ]
initial
begin
	DATAIN[16] = 1'b0;
end 
// DATAIN[ 15 ]
initial
begin
	DATAIN[15] = 1'b0;
end 
// DATAIN[ 14 ]
initial
begin
	DATAIN[14] = 1'b0;
end 
// DATAIN[ 13 ]
initial
begin
	DATAIN[13] = 1'b0;
end 
// DATAIN[ 12 ]
initial
begin
	DATAIN[12] = 1'b0;
end 
// DATAIN[ 11 ]
initial
begin
	DATAIN[11] = 1'b0;
	DATAIN[11] = #60000 1'b1;
	DATAIN[11] = #20000 1'b0;
end 
// DATAIN[ 10 ]
initial
begin
	DATAIN[10] = 1'b0;
	DATAIN[10] = #20000 1'b1;
	DATAIN[10] = #20000 1'b0;
end 
// DATAIN[ 9 ]
initial
begin
	DATAIN[9] = 1'b0;
end 
// DATAIN[ 8 ]
initial
begin
	DATAIN[8] = 1'b0;
	DATAIN[8] = #20000 1'b1;
	DATAIN[8] = #20000 1'b0;
end 
// DATAIN[ 7 ]
initial
begin
	DATAIN[7] = 1'b0;
	DATAIN[7] = #60000 1'b1;
	DATAIN[7] = #20000 1'b0;
end 
// DATAIN[ 6 ]
initial
begin
	DATAIN[6] = 1'b0;
end 
// DATAIN[ 5 ]
initial
begin
	DATAIN[5] = 1'b0;
	DATAIN[5] = #20000 1'b1;
	DATAIN[5] = #20000 1'b0;
	DATAIN[5] = #20000 1'b1;
	DATAIN[5] = #20000 1'b0;
end 
// DATAIN[ 4 ]
initial
begin
	DATAIN[4] = 1'b0;
	DATAIN[4] = #20000 1'b1;
	DATAIN[4] = #20000 1'b0;
end 
// DATAIN[ 3 ]
initial
begin
	DATAIN[3] = 1'b0;
	DATAIN[3] = #20000 1'b1;
	DATAIN[3] = #20000 1'b0;
	DATAIN[3] = #20000 1'b1;
	DATAIN[3] = #20000 1'b0;
end 
// DATAIN[ 2 ]
initial
begin
	DATAIN[2] = 1'b0;
	DATAIN[2] = #60000 1'b1;
	DATAIN[2] = #20000 1'b0;
end 
// DATAIN[ 1 ]
initial
begin
	DATAIN[1] = 1'b0;
	DATAIN[1] = #60000 1'b1;
	DATAIN[1] = #20000 1'b0;
end 
// DATAIN[ 0 ]
initial
begin
	DATAIN[0] = 1'b0;
	DATAIN[0] = #20000 1'b1;
	DATAIN[0] = #20000 1'b0;
end 
// func3[ 2 ]
initial
begin
	func3[2] = 1'b0;
end 
// func3[ 1 ]
initial
begin
	func3[1] = 1'b0;
end 
// func3[ 0 ]
initial
begin
	func3[0] = 1'b0;
end 
// func7[ 6 ]
initial
begin
	func7[6] = 1'b0;
end 
// func7[ 5 ]
initial
begin
	func7[5] = 1'b0;
end 
// func7[ 4 ]
initial
begin
	func7[4] = 1'b0;
end 
// func7[ 3 ]
initial
begin
	func7[3] = 1'b0;
end 
// func7[ 2 ]
initial
begin
	func7[2] = 1'b0;
end 
// func7[ 1 ]
initial
begin
	func7[1] = 1'b0;
end 
// func7[ 0 ]
initial
begin
	func7[0] = 1'b0;
end 

// LD
initial
begin
	LD = 1'b0;
	LD = #20000 1'b1;
	LD = #20000 1'b0;
	LD = #20000 1'b1;
	LD = #20000 1'b0;
	LD = #20000 1'b1;
	LD = #20000 1'b0;
end 

// S
initial
begin
	S = 1'b0;
	S = #100000 1'b1;
	S = #20000 1'b0;
end 

cpu_test_vlg_sample_tst tb_sample (
	.ADDRIN(ADDRIN),
	.ADDROUT1(ADDROUT1),
	.ADDROUT2(ADDROUT2),
	.CLK(CLK),
	.CLR(CLR),
	.DATAIN(DATAIN),
	.func3(func3),
	.func7(func7),
	.LD(LD),
	.S(S),
	.sampler_tx(sampler)
);

cpu_test_vlg_check_tst tb_out(
	.DIN(DIN),
	.DOUT1(DOUT1),
	.sampler_rx(sampler)
);
endmodule

