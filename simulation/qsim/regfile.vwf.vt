// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/06/2023 20:25:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    regfile
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module regfile_vlg_sample_tst(
	ADDRIN,
	ADDROUT1,
	ADDROUT2,
	CLK,
	CLR,
	DATAIN,
	LD,
	sampler_tx
);
input [4:0] ADDRIN;
input [4:0] ADDROUT1;
input [4:0] ADDROUT2;
input  CLK;
input  CLR;
input [31:0] DATAIN;
input  LD;
output sampler_tx;

reg sample;
time current_time;
always @(ADDRIN or ADDROUT1 or ADDROUT2 or CLK or CLR or DATAIN or LD)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module regfile_vlg_check_tst (
	DATAOUT1,
	DATAOUT2,
	sampler_rx
);
input [31:0] DATAOUT1;
input [31:0] DATAOUT2;
input sampler_rx;

reg [31:0] DATAOUT1_expected;
reg [31:0] DATAOUT2_expected;

reg [31:0] DATAOUT1_prev;
reg [31:0] DATAOUT2_prev;

reg [31:0] DATAOUT1_expected_prev;
reg [31:0] DATAOUT2_expected_prev;

reg [31:0] last_DATAOUT1_exp;
reg [31:0] last_DATAOUT2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	DATAOUT1_prev = DATAOUT1;
	DATAOUT2_prev = DATAOUT2;
end

// update expected /o prevs

always @(trigger)
begin
	DATAOUT1_expected_prev = DATAOUT1_expected;
	DATAOUT2_expected_prev = DATAOUT2_expected;
end


// expected DATAOUT1[ 31 ]
initial
begin
	DATAOUT1_expected[31] = 1'bX;
end 
// expected DATAOUT1[ 30 ]
initial
begin
	DATAOUT1_expected[30] = 1'bX;
end 
// expected DATAOUT1[ 29 ]
initial
begin
	DATAOUT1_expected[29] = 1'bX;
end 
// expected DATAOUT1[ 28 ]
initial
begin
	DATAOUT1_expected[28] = 1'bX;
end 
// expected DATAOUT1[ 27 ]
initial
begin
	DATAOUT1_expected[27] = 1'bX;
end 
// expected DATAOUT1[ 26 ]
initial
begin
	DATAOUT1_expected[26] = 1'bX;
end 
// expected DATAOUT1[ 25 ]
initial
begin
	DATAOUT1_expected[25] = 1'bX;
end 
// expected DATAOUT1[ 24 ]
initial
begin
	DATAOUT1_expected[24] = 1'bX;
end 
// expected DATAOUT1[ 23 ]
initial
begin
	DATAOUT1_expected[23] = 1'bX;
end 
// expected DATAOUT1[ 22 ]
initial
begin
	DATAOUT1_expected[22] = 1'bX;
end 
// expected DATAOUT1[ 21 ]
initial
begin
	DATAOUT1_expected[21] = 1'bX;
end 
// expected DATAOUT1[ 20 ]
initial
begin
	DATAOUT1_expected[20] = 1'bX;
end 
// expected DATAOUT1[ 19 ]
initial
begin
	DATAOUT1_expected[19] = 1'bX;
end 
// expected DATAOUT1[ 18 ]
initial
begin
	DATAOUT1_expected[18] = 1'bX;
end 
// expected DATAOUT1[ 17 ]
initial
begin
	DATAOUT1_expected[17] = 1'bX;
end 
// expected DATAOUT1[ 16 ]
initial
begin
	DATAOUT1_expected[16] = 1'bX;
end 
// expected DATAOUT1[ 15 ]
initial
begin
	DATAOUT1_expected[15] = 1'bX;
end 
// expected DATAOUT1[ 14 ]
initial
begin
	DATAOUT1_expected[14] = 1'bX;
end 
// expected DATAOUT1[ 13 ]
initial
begin
	DATAOUT1_expected[13] = 1'bX;
end 
// expected DATAOUT1[ 12 ]
initial
begin
	DATAOUT1_expected[12] = 1'bX;
end 
// expected DATAOUT1[ 11 ]
initial
begin
	DATAOUT1_expected[11] = 1'bX;
end 
// expected DATAOUT1[ 10 ]
initial
begin
	DATAOUT1_expected[10] = 1'bX;
end 
// expected DATAOUT1[ 9 ]
initial
begin
	DATAOUT1_expected[9] = 1'bX;
end 
// expected DATAOUT1[ 8 ]
initial
begin
	DATAOUT1_expected[8] = 1'bX;
end 
// expected DATAOUT1[ 7 ]
initial
begin
	DATAOUT1_expected[7] = 1'bX;
end 
// expected DATAOUT1[ 6 ]
initial
begin
	DATAOUT1_expected[6] = 1'bX;
end 
// expected DATAOUT1[ 5 ]
initial
begin
	DATAOUT1_expected[5] = 1'bX;
end 
// expected DATAOUT1[ 4 ]
initial
begin
	DATAOUT1_expected[4] = 1'bX;
end 
// expected DATAOUT1[ 3 ]
initial
begin
	DATAOUT1_expected[3] = 1'bX;
end 
// expected DATAOUT1[ 2 ]
initial
begin
	DATAOUT1_expected[2] = 1'bX;
end 
// expected DATAOUT1[ 1 ]
initial
begin
	DATAOUT1_expected[1] = 1'bX;
end 
// expected DATAOUT1[ 0 ]
initial
begin
	DATAOUT1_expected[0] = 1'bX;
end 
// expected DATAOUT2[ 31 ]
initial
begin
	DATAOUT2_expected[31] = 1'bX;
end 
// expected DATAOUT2[ 30 ]
initial
begin
	DATAOUT2_expected[30] = 1'bX;
end 
// expected DATAOUT2[ 29 ]
initial
begin
	DATAOUT2_expected[29] = 1'bX;
end 
// expected DATAOUT2[ 28 ]
initial
begin
	DATAOUT2_expected[28] = 1'bX;
end 
// expected DATAOUT2[ 27 ]
initial
begin
	DATAOUT2_expected[27] = 1'bX;
end 
// expected DATAOUT2[ 26 ]
initial
begin
	DATAOUT2_expected[26] = 1'bX;
end 
// expected DATAOUT2[ 25 ]
initial
begin
	DATAOUT2_expected[25] = 1'bX;
end 
// expected DATAOUT2[ 24 ]
initial
begin
	DATAOUT2_expected[24] = 1'bX;
end 
// expected DATAOUT2[ 23 ]
initial
begin
	DATAOUT2_expected[23] = 1'bX;
end 
// expected DATAOUT2[ 22 ]
initial
begin
	DATAOUT2_expected[22] = 1'bX;
end 
// expected DATAOUT2[ 21 ]
initial
begin
	DATAOUT2_expected[21] = 1'bX;
end 
// expected DATAOUT2[ 20 ]
initial
begin
	DATAOUT2_expected[20] = 1'bX;
end 
// expected DATAOUT2[ 19 ]
initial
begin
	DATAOUT2_expected[19] = 1'bX;
end 
// expected DATAOUT2[ 18 ]
initial
begin
	DATAOUT2_expected[18] = 1'bX;
end 
// expected DATAOUT2[ 17 ]
initial
begin
	DATAOUT2_expected[17] = 1'bX;
end 
// expected DATAOUT2[ 16 ]
initial
begin
	DATAOUT2_expected[16] = 1'bX;
end 
// expected DATAOUT2[ 15 ]
initial
begin
	DATAOUT2_expected[15] = 1'bX;
end 
// expected DATAOUT2[ 14 ]
initial
begin
	DATAOUT2_expected[14] = 1'bX;
end 
// expected DATAOUT2[ 13 ]
initial
begin
	DATAOUT2_expected[13] = 1'bX;
end 
// expected DATAOUT2[ 12 ]
initial
begin
	DATAOUT2_expected[12] = 1'bX;
end 
// expected DATAOUT2[ 11 ]
initial
begin
	DATAOUT2_expected[11] = 1'bX;
end 
// expected DATAOUT2[ 10 ]
initial
begin
	DATAOUT2_expected[10] = 1'bX;
end 
// expected DATAOUT2[ 9 ]
initial
begin
	DATAOUT2_expected[9] = 1'bX;
end 
// expected DATAOUT2[ 8 ]
initial
begin
	DATAOUT2_expected[8] = 1'bX;
end 
// expected DATAOUT2[ 7 ]
initial
begin
	DATAOUT2_expected[7] = 1'bX;
end 
// expected DATAOUT2[ 6 ]
initial
begin
	DATAOUT2_expected[6] = 1'bX;
end 
// expected DATAOUT2[ 5 ]
initial
begin
	DATAOUT2_expected[5] = 1'bX;
end 
// expected DATAOUT2[ 4 ]
initial
begin
	DATAOUT2_expected[4] = 1'bX;
end 
// expected DATAOUT2[ 3 ]
initial
begin
	DATAOUT2_expected[3] = 1'bX;
end 
// expected DATAOUT2[ 2 ]
initial
begin
	DATAOUT2_expected[2] = 1'bX;
end 
// expected DATAOUT2[ 1 ]
initial
begin
	DATAOUT2_expected[1] = 1'bX;
end 
// expected DATAOUT2[ 0 ]
initial
begin
	DATAOUT2_expected[0] = 1'bX;
end 
// generate trigger
always @(DATAOUT1_expected or DATAOUT1 or DATAOUT2_expected or DATAOUT2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DATAOUT1 = %b | expected DATAOUT2 = %b | ",DATAOUT1_expected_prev,DATAOUT2_expected_prev);
	$display("| real DATAOUT1 = %b | real DATAOUT2 = %b | ",DATAOUT1_prev,DATAOUT2_prev);
`endif
	if (
		( DATAOUT1_expected_prev[0] !== 1'bx ) && ( DATAOUT1_prev[0] !== DATAOUT1_expected_prev[0] )
		&& ((DATAOUT1_expected_prev[0] !== last_DATAOUT1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[0] = DATAOUT1_expected_prev[0];
	end
	if (
		( DATAOUT1_expected_prev[1] !== 1'bx ) && ( DATAOUT1_prev[1] !== DATAOUT1_expected_prev[1] )
		&& ((DATAOUT1_expected_prev[1] !== last_DATAOUT1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[1] = DATAOUT1_expected_prev[1];
	end
	if (
		( DATAOUT1_expected_prev[2] !== 1'bx ) && ( DATAOUT1_prev[2] !== DATAOUT1_expected_prev[2] )
		&& ((DATAOUT1_expected_prev[2] !== last_DATAOUT1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[2] = DATAOUT1_expected_prev[2];
	end
	if (
		( DATAOUT1_expected_prev[3] !== 1'bx ) && ( DATAOUT1_prev[3] !== DATAOUT1_expected_prev[3] )
		&& ((DATAOUT1_expected_prev[3] !== last_DATAOUT1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[3] = DATAOUT1_expected_prev[3];
	end
	if (
		( DATAOUT1_expected_prev[4] !== 1'bx ) && ( DATAOUT1_prev[4] !== DATAOUT1_expected_prev[4] )
		&& ((DATAOUT1_expected_prev[4] !== last_DATAOUT1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[4] = DATAOUT1_expected_prev[4];
	end
	if (
		( DATAOUT1_expected_prev[5] !== 1'bx ) && ( DATAOUT1_prev[5] !== DATAOUT1_expected_prev[5] )
		&& ((DATAOUT1_expected_prev[5] !== last_DATAOUT1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[5] = DATAOUT1_expected_prev[5];
	end
	if (
		( DATAOUT1_expected_prev[6] !== 1'bx ) && ( DATAOUT1_prev[6] !== DATAOUT1_expected_prev[6] )
		&& ((DATAOUT1_expected_prev[6] !== last_DATAOUT1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[6] = DATAOUT1_expected_prev[6];
	end
	if (
		( DATAOUT1_expected_prev[7] !== 1'bx ) && ( DATAOUT1_prev[7] !== DATAOUT1_expected_prev[7] )
		&& ((DATAOUT1_expected_prev[7] !== last_DATAOUT1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[7] = DATAOUT1_expected_prev[7];
	end
	if (
		( DATAOUT1_expected_prev[8] !== 1'bx ) && ( DATAOUT1_prev[8] !== DATAOUT1_expected_prev[8] )
		&& ((DATAOUT1_expected_prev[8] !== last_DATAOUT1_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[8] = DATAOUT1_expected_prev[8];
	end
	if (
		( DATAOUT1_expected_prev[9] !== 1'bx ) && ( DATAOUT1_prev[9] !== DATAOUT1_expected_prev[9] )
		&& ((DATAOUT1_expected_prev[9] !== last_DATAOUT1_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[9] = DATAOUT1_expected_prev[9];
	end
	if (
		( DATAOUT1_expected_prev[10] !== 1'bx ) && ( DATAOUT1_prev[10] !== DATAOUT1_expected_prev[10] )
		&& ((DATAOUT1_expected_prev[10] !== last_DATAOUT1_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[10] = DATAOUT1_expected_prev[10];
	end
	if (
		( DATAOUT1_expected_prev[11] !== 1'bx ) && ( DATAOUT1_prev[11] !== DATAOUT1_expected_prev[11] )
		&& ((DATAOUT1_expected_prev[11] !== last_DATAOUT1_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[11] = DATAOUT1_expected_prev[11];
	end
	if (
		( DATAOUT1_expected_prev[12] !== 1'bx ) && ( DATAOUT1_prev[12] !== DATAOUT1_expected_prev[12] )
		&& ((DATAOUT1_expected_prev[12] !== last_DATAOUT1_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[12] = DATAOUT1_expected_prev[12];
	end
	if (
		( DATAOUT1_expected_prev[13] !== 1'bx ) && ( DATAOUT1_prev[13] !== DATAOUT1_expected_prev[13] )
		&& ((DATAOUT1_expected_prev[13] !== last_DATAOUT1_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[13] = DATAOUT1_expected_prev[13];
	end
	if (
		( DATAOUT1_expected_prev[14] !== 1'bx ) && ( DATAOUT1_prev[14] !== DATAOUT1_expected_prev[14] )
		&& ((DATAOUT1_expected_prev[14] !== last_DATAOUT1_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[14] = DATAOUT1_expected_prev[14];
	end
	if (
		( DATAOUT1_expected_prev[15] !== 1'bx ) && ( DATAOUT1_prev[15] !== DATAOUT1_expected_prev[15] )
		&& ((DATAOUT1_expected_prev[15] !== last_DATAOUT1_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[15] = DATAOUT1_expected_prev[15];
	end
	if (
		( DATAOUT1_expected_prev[16] !== 1'bx ) && ( DATAOUT1_prev[16] !== DATAOUT1_expected_prev[16] )
		&& ((DATAOUT1_expected_prev[16] !== last_DATAOUT1_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[16] = DATAOUT1_expected_prev[16];
	end
	if (
		( DATAOUT1_expected_prev[17] !== 1'bx ) && ( DATAOUT1_prev[17] !== DATAOUT1_expected_prev[17] )
		&& ((DATAOUT1_expected_prev[17] !== last_DATAOUT1_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[17] = DATAOUT1_expected_prev[17];
	end
	if (
		( DATAOUT1_expected_prev[18] !== 1'bx ) && ( DATAOUT1_prev[18] !== DATAOUT1_expected_prev[18] )
		&& ((DATAOUT1_expected_prev[18] !== last_DATAOUT1_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[18] = DATAOUT1_expected_prev[18];
	end
	if (
		( DATAOUT1_expected_prev[19] !== 1'bx ) && ( DATAOUT1_prev[19] !== DATAOUT1_expected_prev[19] )
		&& ((DATAOUT1_expected_prev[19] !== last_DATAOUT1_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[19] = DATAOUT1_expected_prev[19];
	end
	if (
		( DATAOUT1_expected_prev[20] !== 1'bx ) && ( DATAOUT1_prev[20] !== DATAOUT1_expected_prev[20] )
		&& ((DATAOUT1_expected_prev[20] !== last_DATAOUT1_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[20] = DATAOUT1_expected_prev[20];
	end
	if (
		( DATAOUT1_expected_prev[21] !== 1'bx ) && ( DATAOUT1_prev[21] !== DATAOUT1_expected_prev[21] )
		&& ((DATAOUT1_expected_prev[21] !== last_DATAOUT1_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[21] = DATAOUT1_expected_prev[21];
	end
	if (
		( DATAOUT1_expected_prev[22] !== 1'bx ) && ( DATAOUT1_prev[22] !== DATAOUT1_expected_prev[22] )
		&& ((DATAOUT1_expected_prev[22] !== last_DATAOUT1_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[22] = DATAOUT1_expected_prev[22];
	end
	if (
		( DATAOUT1_expected_prev[23] !== 1'bx ) && ( DATAOUT1_prev[23] !== DATAOUT1_expected_prev[23] )
		&& ((DATAOUT1_expected_prev[23] !== last_DATAOUT1_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[23] = DATAOUT1_expected_prev[23];
	end
	if (
		( DATAOUT1_expected_prev[24] !== 1'bx ) && ( DATAOUT1_prev[24] !== DATAOUT1_expected_prev[24] )
		&& ((DATAOUT1_expected_prev[24] !== last_DATAOUT1_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[24] = DATAOUT1_expected_prev[24];
	end
	if (
		( DATAOUT1_expected_prev[25] !== 1'bx ) && ( DATAOUT1_prev[25] !== DATAOUT1_expected_prev[25] )
		&& ((DATAOUT1_expected_prev[25] !== last_DATAOUT1_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[25] = DATAOUT1_expected_prev[25];
	end
	if (
		( DATAOUT1_expected_prev[26] !== 1'bx ) && ( DATAOUT1_prev[26] !== DATAOUT1_expected_prev[26] )
		&& ((DATAOUT1_expected_prev[26] !== last_DATAOUT1_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[26] = DATAOUT1_expected_prev[26];
	end
	if (
		( DATAOUT1_expected_prev[27] !== 1'bx ) && ( DATAOUT1_prev[27] !== DATAOUT1_expected_prev[27] )
		&& ((DATAOUT1_expected_prev[27] !== last_DATAOUT1_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[27] = DATAOUT1_expected_prev[27];
	end
	if (
		( DATAOUT1_expected_prev[28] !== 1'bx ) && ( DATAOUT1_prev[28] !== DATAOUT1_expected_prev[28] )
		&& ((DATAOUT1_expected_prev[28] !== last_DATAOUT1_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[28] = DATAOUT1_expected_prev[28];
	end
	if (
		( DATAOUT1_expected_prev[29] !== 1'bx ) && ( DATAOUT1_prev[29] !== DATAOUT1_expected_prev[29] )
		&& ((DATAOUT1_expected_prev[29] !== last_DATAOUT1_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[29] = DATAOUT1_expected_prev[29];
	end
	if (
		( DATAOUT1_expected_prev[30] !== 1'bx ) && ( DATAOUT1_prev[30] !== DATAOUT1_expected_prev[30] )
		&& ((DATAOUT1_expected_prev[30] !== last_DATAOUT1_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[30] = DATAOUT1_expected_prev[30];
	end
	if (
		( DATAOUT1_expected_prev[31] !== 1'bx ) && ( DATAOUT1_prev[31] !== DATAOUT1_expected_prev[31] )
		&& ((DATAOUT1_expected_prev[31] !== last_DATAOUT1_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT1_expected_prev);
		$display ("     Real value = %b", DATAOUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATAOUT1_exp[31] = DATAOUT1_expected_prev[31];
	end
	if (
		( DATAOUT2_expected_prev[0] !== 1'bx ) && ( DATAOUT2_prev[0] !== DATAOUT2_expected_prev[0] )
		&& ((DATAOUT2_expected_prev[0] !== last_DATAOUT2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[0] = DATAOUT2_expected_prev[0];
	end
	if (
		( DATAOUT2_expected_prev[1] !== 1'bx ) && ( DATAOUT2_prev[1] !== DATAOUT2_expected_prev[1] )
		&& ((DATAOUT2_expected_prev[1] !== last_DATAOUT2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[1] = DATAOUT2_expected_prev[1];
	end
	if (
		( DATAOUT2_expected_prev[2] !== 1'bx ) && ( DATAOUT2_prev[2] !== DATAOUT2_expected_prev[2] )
		&& ((DATAOUT2_expected_prev[2] !== last_DATAOUT2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[2] = DATAOUT2_expected_prev[2];
	end
	if (
		( DATAOUT2_expected_prev[3] !== 1'bx ) && ( DATAOUT2_prev[3] !== DATAOUT2_expected_prev[3] )
		&& ((DATAOUT2_expected_prev[3] !== last_DATAOUT2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[3] = DATAOUT2_expected_prev[3];
	end
	if (
		( DATAOUT2_expected_prev[4] !== 1'bx ) && ( DATAOUT2_prev[4] !== DATAOUT2_expected_prev[4] )
		&& ((DATAOUT2_expected_prev[4] !== last_DATAOUT2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[4] = DATAOUT2_expected_prev[4];
	end
	if (
		( DATAOUT2_expected_prev[5] !== 1'bx ) && ( DATAOUT2_prev[5] !== DATAOUT2_expected_prev[5] )
		&& ((DATAOUT2_expected_prev[5] !== last_DATAOUT2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[5] = DATAOUT2_expected_prev[5];
	end
	if (
		( DATAOUT2_expected_prev[6] !== 1'bx ) && ( DATAOUT2_prev[6] !== DATAOUT2_expected_prev[6] )
		&& ((DATAOUT2_expected_prev[6] !== last_DATAOUT2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[6] = DATAOUT2_expected_prev[6];
	end
	if (
		( DATAOUT2_expected_prev[7] !== 1'bx ) && ( DATAOUT2_prev[7] !== DATAOUT2_expected_prev[7] )
		&& ((DATAOUT2_expected_prev[7] !== last_DATAOUT2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[7] = DATAOUT2_expected_prev[7];
	end
	if (
		( DATAOUT2_expected_prev[8] !== 1'bx ) && ( DATAOUT2_prev[8] !== DATAOUT2_expected_prev[8] )
		&& ((DATAOUT2_expected_prev[8] !== last_DATAOUT2_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[8] = DATAOUT2_expected_prev[8];
	end
	if (
		( DATAOUT2_expected_prev[9] !== 1'bx ) && ( DATAOUT2_prev[9] !== DATAOUT2_expected_prev[9] )
		&& ((DATAOUT2_expected_prev[9] !== last_DATAOUT2_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[9] = DATAOUT2_expected_prev[9];
	end
	if (
		( DATAOUT2_expected_prev[10] !== 1'bx ) && ( DATAOUT2_prev[10] !== DATAOUT2_expected_prev[10] )
		&& ((DATAOUT2_expected_prev[10] !== last_DATAOUT2_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[10] = DATAOUT2_expected_prev[10];
	end
	if (
		( DATAOUT2_expected_prev[11] !== 1'bx ) && ( DATAOUT2_prev[11] !== DATAOUT2_expected_prev[11] )
		&& ((DATAOUT2_expected_prev[11] !== last_DATAOUT2_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[11] = DATAOUT2_expected_prev[11];
	end
	if (
		( DATAOUT2_expected_prev[12] !== 1'bx ) && ( DATAOUT2_prev[12] !== DATAOUT2_expected_prev[12] )
		&& ((DATAOUT2_expected_prev[12] !== last_DATAOUT2_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[12] = DATAOUT2_expected_prev[12];
	end
	if (
		( DATAOUT2_expected_prev[13] !== 1'bx ) && ( DATAOUT2_prev[13] !== DATAOUT2_expected_prev[13] )
		&& ((DATAOUT2_expected_prev[13] !== last_DATAOUT2_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[13] = DATAOUT2_expected_prev[13];
	end
	if (
		( DATAOUT2_expected_prev[14] !== 1'bx ) && ( DATAOUT2_prev[14] !== DATAOUT2_expected_prev[14] )
		&& ((DATAOUT2_expected_prev[14] !== last_DATAOUT2_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[14] = DATAOUT2_expected_prev[14];
	end
	if (
		( DATAOUT2_expected_prev[15] !== 1'bx ) && ( DATAOUT2_prev[15] !== DATAOUT2_expected_prev[15] )
		&& ((DATAOUT2_expected_prev[15] !== last_DATAOUT2_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[15] = DATAOUT2_expected_prev[15];
	end
	if (
		( DATAOUT2_expected_prev[16] !== 1'bx ) && ( DATAOUT2_prev[16] !== DATAOUT2_expected_prev[16] )
		&& ((DATAOUT2_expected_prev[16] !== last_DATAOUT2_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[16] = DATAOUT2_expected_prev[16];
	end
	if (
		( DATAOUT2_expected_prev[17] !== 1'bx ) && ( DATAOUT2_prev[17] !== DATAOUT2_expected_prev[17] )
		&& ((DATAOUT2_expected_prev[17] !== last_DATAOUT2_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[17] = DATAOUT2_expected_prev[17];
	end
	if (
		( DATAOUT2_expected_prev[18] !== 1'bx ) && ( DATAOUT2_prev[18] !== DATAOUT2_expected_prev[18] )
		&& ((DATAOUT2_expected_prev[18] !== last_DATAOUT2_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[18] = DATAOUT2_expected_prev[18];
	end
	if (
		( DATAOUT2_expected_prev[19] !== 1'bx ) && ( DATAOUT2_prev[19] !== DATAOUT2_expected_prev[19] )
		&& ((DATAOUT2_expected_prev[19] !== last_DATAOUT2_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[19] = DATAOUT2_expected_prev[19];
	end
	if (
		( DATAOUT2_expected_prev[20] !== 1'bx ) && ( DATAOUT2_prev[20] !== DATAOUT2_expected_prev[20] )
		&& ((DATAOUT2_expected_prev[20] !== last_DATAOUT2_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[20] = DATAOUT2_expected_prev[20];
	end
	if (
		( DATAOUT2_expected_prev[21] !== 1'bx ) && ( DATAOUT2_prev[21] !== DATAOUT2_expected_prev[21] )
		&& ((DATAOUT2_expected_prev[21] !== last_DATAOUT2_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[21] = DATAOUT2_expected_prev[21];
	end
	if (
		( DATAOUT2_expected_prev[22] !== 1'bx ) && ( DATAOUT2_prev[22] !== DATAOUT2_expected_prev[22] )
		&& ((DATAOUT2_expected_prev[22] !== last_DATAOUT2_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[22] = DATAOUT2_expected_prev[22];
	end
	if (
		( DATAOUT2_expected_prev[23] !== 1'bx ) && ( DATAOUT2_prev[23] !== DATAOUT2_expected_prev[23] )
		&& ((DATAOUT2_expected_prev[23] !== last_DATAOUT2_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[23] = DATAOUT2_expected_prev[23];
	end
	if (
		( DATAOUT2_expected_prev[24] !== 1'bx ) && ( DATAOUT2_prev[24] !== DATAOUT2_expected_prev[24] )
		&& ((DATAOUT2_expected_prev[24] !== last_DATAOUT2_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[24] = DATAOUT2_expected_prev[24];
	end
	if (
		( DATAOUT2_expected_prev[25] !== 1'bx ) && ( DATAOUT2_prev[25] !== DATAOUT2_expected_prev[25] )
		&& ((DATAOUT2_expected_prev[25] !== last_DATAOUT2_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[25] = DATAOUT2_expected_prev[25];
	end
	if (
		( DATAOUT2_expected_prev[26] !== 1'bx ) && ( DATAOUT2_prev[26] !== DATAOUT2_expected_prev[26] )
		&& ((DATAOUT2_expected_prev[26] !== last_DATAOUT2_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[26] = DATAOUT2_expected_prev[26];
	end
	if (
		( DATAOUT2_expected_prev[27] !== 1'bx ) && ( DATAOUT2_prev[27] !== DATAOUT2_expected_prev[27] )
		&& ((DATAOUT2_expected_prev[27] !== last_DATAOUT2_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[27] = DATAOUT2_expected_prev[27];
	end
	if (
		( DATAOUT2_expected_prev[28] !== 1'bx ) && ( DATAOUT2_prev[28] !== DATAOUT2_expected_prev[28] )
		&& ((DATAOUT2_expected_prev[28] !== last_DATAOUT2_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[28] = DATAOUT2_expected_prev[28];
	end
	if (
		( DATAOUT2_expected_prev[29] !== 1'bx ) && ( DATAOUT2_prev[29] !== DATAOUT2_expected_prev[29] )
		&& ((DATAOUT2_expected_prev[29] !== last_DATAOUT2_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[29] = DATAOUT2_expected_prev[29];
	end
	if (
		( DATAOUT2_expected_prev[30] !== 1'bx ) && ( DATAOUT2_prev[30] !== DATAOUT2_expected_prev[30] )
		&& ((DATAOUT2_expected_prev[30] !== last_DATAOUT2_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[30] = DATAOUT2_expected_prev[30];
	end
	if (
		( DATAOUT2_expected_prev[31] !== 1'bx ) && ( DATAOUT2_prev[31] !== DATAOUT2_expected_prev[31] )
		&& ((DATAOUT2_expected_prev[31] !== last_DATAOUT2_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAOUT2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAOUT2_expected_prev);
		$display ("     Real value = %b", DATAOUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATAOUT2_exp[31] = DATAOUT2_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module regfile_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] ADDRIN;
reg [4:0] ADDROUT1;
reg [4:0] ADDROUT2;
reg CLK;
reg CLR;
reg [31:0] DATAIN;
reg LD;
// wires                                               
wire [31:0] DATAOUT1;
wire [31:0] DATAOUT2;

wire sampler;                             

// assign statements (if any)                          
regfile i1 (
// port map - connection between master ports and signals/registers   
	.ADDRIN(ADDRIN),
	.ADDROUT1(ADDROUT1),
	.ADDROUT2(ADDROUT2),
	.CLK(CLK),
	.CLR(CLR),
	.DATAIN(DATAIN),
	.DATAOUT1(DATAOUT1),
	.DATAOUT2(DATAOUT2),
	.LD(LD)
);
// ADDRIN[ 4 ]
initial
begin
	ADDRIN[4] = 1'b0;
	ADDRIN[4] = #320000 1'b1;
	ADDRIN[4] = #320000 1'b0;
	ADDRIN[4] = #320000 1'b1;
end 
// ADDRIN[ 3 ]
initial
begin
	repeat(3)
	begin
		ADDRIN[3] = 1'b0;
		ADDRIN[3] = #160000 1'b1;
		# 160000;
	end
	ADDRIN[3] = 1'b0;
end 
// ADDRIN[ 2 ]
initial
begin
	repeat(6)
	begin
		ADDRIN[2] = 1'b0;
		ADDRIN[2] = #80000 1'b1;
		# 80000;
	end
	ADDRIN[2] = 1'b0;
end 
// ADDRIN[ 1 ]
initial
begin
	repeat(12)
	begin
		ADDRIN[1] = 1'b0;
		ADDRIN[1] = #40000 1'b1;
		# 40000;
	end
	ADDRIN[1] = 1'b0;
end 
// ADDRIN[ 0 ]
always
begin
	ADDRIN[0] = 1'b0;
	ADDRIN[0] = #20000 1'b1;
	#20000;
end 
// ADDROUT1[ 4 ]
initial
begin
	ADDROUT1[4] = 1'b0;
	ADDROUT1[4] = #800000 1'b1;
	ADDROUT1[4] = #160000 1'b0;
end 
// ADDROUT1[ 3 ]
initial
begin
	ADDROUT1[3] = 1'b0;
	ADDROUT1[3] = #720000 1'b1;
	ADDROUT1[3] = #80000 1'b0;
	ADDROUT1[3] = #80000 1'b1;
	ADDROUT1[3] = #80000 1'b0;
end 
// ADDROUT1[ 2 ]
initial
begin
	ADDROUT1[2] = 1'b0;
	ADDROUT1[2] = #680000 1'b1;
	# 40000;
	repeat(3)
	begin
		ADDROUT1[2] = 1'b0;
		ADDROUT1[2] = #40000 1'b1;
		# 40000;
	end
	ADDROUT1[2] = 1'b0;
end 
// ADDROUT1[ 1 ]
initial
begin
	ADDROUT1[1] = 1'b0;
	ADDROUT1[1] = #660000 1'b1;
	# 20000;
	repeat(8)
	begin
		ADDROUT1[1] = 1'b0;
		ADDROUT1[1] = #20000 1'b1;
		# 20000;
	end
end 
// ADDROUT1[ 0 ]
initial
begin
	ADDROUT1[0] = 1'b0;
end 
// ADDROUT2[ 4 ]
initial
begin
	ADDROUT2[4] = 1'b0;
	ADDROUT2[4] = #800000 1'b1;
	ADDROUT2[4] = #160000 1'b0;
end 
// ADDROUT2[ 3 ]
initial
begin
	ADDROUT2[3] = 1'b0;
	ADDROUT2[3] = #720000 1'b1;
	ADDROUT2[3] = #80000 1'b0;
	ADDROUT2[3] = #80000 1'b1;
	ADDROUT2[3] = #80000 1'b0;
end 
// ADDROUT2[ 2 ]
initial
begin
	ADDROUT2[2] = 1'b0;
	ADDROUT2[2] = #680000 1'b1;
	# 40000;
	repeat(3)
	begin
		ADDROUT2[2] = 1'b0;
		ADDROUT2[2] = #40000 1'b1;
		# 40000;
	end
	ADDROUT2[2] = 1'b0;
end 
// ADDROUT2[ 1 ]
initial
begin
	ADDROUT2[1] = 1'b0;
	ADDROUT2[1] = #660000 1'b1;
	# 20000;
	repeat(8)
	begin
		ADDROUT2[1] = 1'b0;
		ADDROUT2[1] = #20000 1'b1;
		# 20000;
	end
end 
// ADDROUT2[ 0 ]
initial
begin
	ADDROUT2[0] = 1'b0;
	ADDROUT2[0] = #640000 1'b1;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// CLR
initial
begin
	CLR = 1'b0;
end 
// DATAIN[ 31 ]
initial
begin
	DATAIN[31] = 1'b0;
end 
// DATAIN[ 30 ]
initial
begin
	DATAIN[30] = 1'b0;
end 
// DATAIN[ 29 ]
initial
begin
	DATAIN[29] = 1'b0;
end 
// DATAIN[ 28 ]
initial
begin
	DATAIN[28] = 1'b0;
end 
// DATAIN[ 27 ]
initial
begin
	DATAIN[27] = 1'b0;
end 
// DATAIN[ 26 ]
initial
begin
	DATAIN[26] = 1'b0;
end 
// DATAIN[ 25 ]
initial
begin
	DATAIN[25] = 1'b0;
end 
// DATAIN[ 24 ]
initial
begin
	DATAIN[24] = 1'b0;
end 
// DATAIN[ 23 ]
initial
begin
	DATAIN[23] = 1'b0;
end 
// DATAIN[ 22 ]
initial
begin
	DATAIN[22] = 1'b0;
end 
// DATAIN[ 21 ]
initial
begin
	DATAIN[21] = 1'b0;
	DATAIN[21] = #620000 1'b1;
	DATAIN[21] = #20000 1'b0;
end 
// DATAIN[ 20 ]
initial
begin
	DATAIN[20] = 1'b0;
	DATAIN[20] = #320000 1'b1;
	DATAIN[20] = #300000 1'b0;
end 
// DATAIN[ 19 ]
initial
begin
	DATAIN[19] = 1'b0;
	DATAIN[19] = #160000 1'b1;
	DATAIN[19] = #160000 1'b0;
	DATAIN[19] = #140000 1'b1;
	DATAIN[19] = #160000 1'b0;
end 
// DATAIN[ 18 ]
initial
begin
	repeat(2)
	begin
		DATAIN[18] = 1'b0;
		DATAIN[18] = #80000 1'b1;
		# 80000;
	end
	DATAIN[18] = 1'b0;
	DATAIN[18] = #60000 1'b1;
	DATAIN[18] = #80000 1'b0;
	DATAIN[18] = #80000 1'b1;
	DATAIN[18] = #80000 1'b0;
end 
// DATAIN[ 17 ]
initial
begin
	repeat(4)
	begin
		DATAIN[17] = 1'b0;
		DATAIN[17] = #40000 1'b1;
		# 40000;
	end
	DATAIN[17] = 1'b0;
	# 20000;
	repeat(3)
	begin
		DATAIN[17] = 1'b1;
		DATAIN[17] = #40000 1'b0;
		# 40000;
	end
	DATAIN[17] = 1'b1;
	DATAIN[17] = #40000 1'b0;
end 
// DATAIN[ 16 ]
initial
begin
	repeat(7)
	begin
		DATAIN[16] = 1'b0;
		DATAIN[16] = #20000 1'b1;
		# 20000;
	end
	DATAIN[16] = 1'b0;
	DATAIN[16] = #20000 1'b1;
	# 40000;
	repeat(6)
	begin
		DATAIN[16] = 1'b0;
		DATAIN[16] = #20000 1'b1;
		# 20000;
	end
	DATAIN[16] = 1'b0;
	DATAIN[16] = #20000 1'b1;
	DATAIN[16] = #40000 1'b0;
end 
// DATAIN[ 15 ]
initial
begin
	DATAIN[15] = 1'b0;
	DATAIN[15] = #160000 1'b1;
	DATAIN[15] = #160000 1'b0;
	DATAIN[15] = #140000 1'b1;
	DATAIN[15] = #160000 1'b0;
end 
// DATAIN[ 14 ]
initial
begin
	repeat(2)
	begin
		DATAIN[14] = 1'b0;
		DATAIN[14] = #80000 1'b1;
		# 80000;
	end
	DATAIN[14] = 1'b0;
	DATAIN[14] = #60000 1'b1;
	DATAIN[14] = #80000 1'b0;
	DATAIN[14] = #80000 1'b1;
	DATAIN[14] = #80000 1'b0;
end 
// DATAIN[ 13 ]
initial
begin
	repeat(4)
	begin
		DATAIN[13] = 1'b0;
		DATAIN[13] = #40000 1'b1;
		# 40000;
	end
	DATAIN[13] = 1'b0;
	# 20000;
	repeat(3)
	begin
		DATAIN[13] = 1'b1;
		DATAIN[13] = #40000 1'b0;
		# 40000;
	end
	DATAIN[13] = 1'b1;
	DATAIN[13] = #40000 1'b0;
end 
// DATAIN[ 12 ]
initial
begin
	repeat(7)
	begin
		DATAIN[12] = 1'b0;
		DATAIN[12] = #20000 1'b1;
		# 20000;
	end
	DATAIN[12] = 1'b0;
	DATAIN[12] = #20000 1'b1;
	# 40000;
	repeat(6)
	begin
		DATAIN[12] = 1'b0;
		DATAIN[12] = #20000 1'b1;
		# 20000;
	end
	DATAIN[12] = 1'b0;
	DATAIN[12] = #20000 1'b1;
	DATAIN[12] = #40000 1'b0;
end 
// DATAIN[ 11 ]
initial
begin
	DATAIN[11] = 1'b0;
	DATAIN[11] = #160000 1'b1;
	DATAIN[11] = #160000 1'b0;
	DATAIN[11] = #140000 1'b1;
	DATAIN[11] = #160000 1'b0;
end 
// DATAIN[ 10 ]
initial
begin
	repeat(2)
	begin
		DATAIN[10] = 1'b0;
		DATAIN[10] = #80000 1'b1;
		# 80000;
	end
	DATAIN[10] = 1'b0;
	DATAIN[10] = #60000 1'b1;
	DATAIN[10] = #80000 1'b0;
	DATAIN[10] = #80000 1'b1;
	DATAIN[10] = #80000 1'b0;
end 
// DATAIN[ 9 ]
initial
begin
	repeat(4)
	begin
		DATAIN[9] = 1'b0;
		DATAIN[9] = #40000 1'b1;
		# 40000;
	end
	DATAIN[9] = 1'b0;
	# 20000;
	repeat(3)
	begin
		DATAIN[9] = 1'b1;
		DATAIN[9] = #40000 1'b0;
		# 40000;
	end
	DATAIN[9] = 1'b1;
	DATAIN[9] = #40000 1'b0;
end 
// DATAIN[ 8 ]
initial
begin
	repeat(7)
	begin
		DATAIN[8] = 1'b0;
		DATAIN[8] = #20000 1'b1;
		# 20000;
	end
	DATAIN[8] = 1'b0;
	DATAIN[8] = #20000 1'b1;
	# 40000;
	repeat(6)
	begin
		DATAIN[8] = 1'b0;
		DATAIN[8] = #20000 1'b1;
		# 20000;
	end
	DATAIN[8] = 1'b0;
	DATAIN[8] = #20000 1'b1;
	DATAIN[8] = #40000 1'b0;
end 
// DATAIN[ 7 ]
initial
begin
	DATAIN[7] = 1'b0;
	DATAIN[7] = #160000 1'b1;
	DATAIN[7] = #160000 1'b0;
	DATAIN[7] = #140000 1'b1;
	DATAIN[7] = #160000 1'b0;
end 
// DATAIN[ 6 ]
initial
begin
	repeat(2)
	begin
		DATAIN[6] = 1'b0;
		DATAIN[6] = #80000 1'b1;
		# 80000;
	end
	DATAIN[6] = 1'b0;
	DATAIN[6] = #60000 1'b1;
	DATAIN[6] = #80000 1'b0;
	DATAIN[6] = #80000 1'b1;
	DATAIN[6] = #80000 1'b0;
end 
// DATAIN[ 5 ]
initial
begin
	repeat(4)
	begin
		DATAIN[5] = 1'b0;
		DATAIN[5] = #40000 1'b1;
		# 40000;
	end
	DATAIN[5] = 1'b0;
	# 20000;
	repeat(3)
	begin
		DATAIN[5] = 1'b1;
		DATAIN[5] = #40000 1'b0;
		# 40000;
	end
	DATAIN[5] = 1'b1;
	DATAIN[5] = #40000 1'b0;
end 
// DATAIN[ 4 ]
initial
begin
	repeat(7)
	begin
		DATAIN[4] = 1'b0;
		DATAIN[4] = #20000 1'b1;
		# 20000;
	end
	DATAIN[4] = 1'b0;
	DATAIN[4] = #20000 1'b1;
	# 40000;
	repeat(7)
	begin
		DATAIN[4] = 1'b0;
		DATAIN[4] = #20000 1'b1;
		# 20000;
	end
	DATAIN[4] = 1'b0;
end 
// DATAIN[ 3 ]
initial
begin
	repeat(2)
	begin
		DATAIN[3] = 1'b0;
		DATAIN[3] = #160000 1'b1;
		# 160000;
	end
	DATAIN[3] = 1'b0;
end 
// DATAIN[ 2 ]
initial
begin
	repeat(4)
	begin
		DATAIN[2] = 1'b0;
		DATAIN[2] = #80000 1'b1;
		# 80000;
	end
	DATAIN[2] = 1'b0;
end 
// DATAIN[ 1 ]
initial
begin
	repeat(8)
	begin
		DATAIN[1] = 1'b0;
		DATAIN[1] = #40000 1'b1;
		# 40000;
	end
	DATAIN[1] = 1'b0;
end 
// DATAIN[ 0 ]
initial
begin
	repeat(16)
	begin
		DATAIN[0] = 1'b0;
		DATAIN[0] = #20000 1'b1;
		# 20000;
	end
	DATAIN[0] = 1'b0;
end 

// LD
initial
begin
	LD = 1'b1;
	LD = #640000 1'b0;
end 

regfile_vlg_sample_tst tb_sample (
	.ADDRIN(ADDRIN),
	.ADDROUT1(ADDROUT1),
	.ADDROUT2(ADDROUT2),
	.CLK(CLK),
	.CLR(CLR),
	.DATAIN(DATAIN),
	.LD(LD),
	.sampler_tx(sampler)
);

regfile_vlg_check_tst tb_out(
	.DATAOUT1(DATAOUT1),
	.DATAOUT2(DATAOUT2),
	.sampler_rx(sampler)
);
endmodule

