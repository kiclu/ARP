// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/26/2023 21:45:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ARP
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ARP_vlg_sample_tst(
	CLK,
	DBUS,
	sampler_tx
);
input  CLK;
input [31:0] DBUS;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or DBUS)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ARP_vlg_check_tst (
	ABUS,
	DBUS,
	LEN,
	RD,
	VGA_B,
	VGA_G,
	VGA_HS,
	VGA_R,
	VGA_VS,
	WR,
	sampler_rx
);
input [31:0] ABUS;
input [31:0] DBUS;
input [1:0] LEN;
input  RD;
input [3:0] VGA_B;
input [3:0] VGA_G;
input  VGA_HS;
input [3:0] VGA_R;
input  VGA_VS;
input  WR;
input sampler_rx;

reg [31:0] ABUS_expected;
reg [31:0] DBUS_expected;
reg [1:0] LEN_expected;
reg  RD_expected;
reg [3:0] VGA_B_expected;
reg [3:0] VGA_G_expected;
reg  VGA_HS_expected;
reg [3:0] VGA_R_expected;
reg  VGA_VS_expected;
reg  WR_expected;

reg [31:0] ABUS_prev;
reg [31:0] DBUS_prev;
reg [1:0] LEN_prev;
reg  RD_prev;
reg [3:0] VGA_B_prev;
reg [3:0] VGA_G_prev;
reg  VGA_HS_prev;
reg [3:0] VGA_R_prev;
reg  VGA_VS_prev;
reg  WR_prev;

reg [31:0] ABUS_expected_prev;
reg [31:0] DBUS_expected_prev;
reg [1:0] LEN_expected_prev;
reg  RD_expected_prev;
reg [3:0] VGA_B_expected_prev;
reg [3:0] VGA_G_expected_prev;
reg  VGA_HS_expected_prev;
reg [3:0] VGA_R_expected_prev;
reg  VGA_VS_expected_prev;
reg  WR_expected_prev;

reg [31:0] last_ABUS_exp;
reg [31:0] last_DBUS_exp;
reg [1:0] last_LEN_exp;
reg  last_RD_exp;
reg [3:0] last_VGA_B_exp;
reg [3:0] last_VGA_G_exp;
reg  last_VGA_HS_exp;
reg [3:0] last_VGA_R_exp;
reg  last_VGA_VS_exp;
reg  last_WR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	ABUS_prev = ABUS;
	DBUS_prev = DBUS;
	LEN_prev = LEN;
	RD_prev = RD;
	VGA_B_prev = VGA_B;
	VGA_G_prev = VGA_G;
	VGA_HS_prev = VGA_HS;
	VGA_R_prev = VGA_R;
	VGA_VS_prev = VGA_VS;
	WR_prev = WR;
end

// update expected /o prevs

always @(trigger)
begin
	ABUS_expected_prev = ABUS_expected;
	DBUS_expected_prev = DBUS_expected;
	LEN_expected_prev = LEN_expected;
	RD_expected_prev = RD_expected;
	VGA_B_expected_prev = VGA_B_expected;
	VGA_G_expected_prev = VGA_G_expected;
	VGA_HS_expected_prev = VGA_HS_expected;
	VGA_R_expected_prev = VGA_R_expected;
	VGA_VS_expected_prev = VGA_VS_expected;
	WR_expected_prev = WR_expected;
end


// expected ABUS[ 31 ]
initial
begin
	ABUS_expected[31] = 1'bX;
end 
// expected ABUS[ 30 ]
initial
begin
	ABUS_expected[30] = 1'bX;
end 
// expected ABUS[ 29 ]
initial
begin
	ABUS_expected[29] = 1'bX;
end 
// expected ABUS[ 28 ]
initial
begin
	ABUS_expected[28] = 1'bX;
end 
// expected ABUS[ 27 ]
initial
begin
	ABUS_expected[27] = 1'bX;
end 
// expected ABUS[ 26 ]
initial
begin
	ABUS_expected[26] = 1'bX;
end 
// expected ABUS[ 25 ]
initial
begin
	ABUS_expected[25] = 1'bX;
end 
// expected ABUS[ 24 ]
initial
begin
	ABUS_expected[24] = 1'bX;
end 
// expected ABUS[ 23 ]
initial
begin
	ABUS_expected[23] = 1'bX;
end 
// expected ABUS[ 22 ]
initial
begin
	ABUS_expected[22] = 1'bX;
end 
// expected ABUS[ 21 ]
initial
begin
	ABUS_expected[21] = 1'bX;
end 
// expected ABUS[ 20 ]
initial
begin
	ABUS_expected[20] = 1'bX;
end 
// expected ABUS[ 19 ]
initial
begin
	ABUS_expected[19] = 1'bX;
end 
// expected ABUS[ 18 ]
initial
begin
	ABUS_expected[18] = 1'bX;
end 
// expected ABUS[ 17 ]
initial
begin
	ABUS_expected[17] = 1'bX;
end 
// expected ABUS[ 16 ]
initial
begin
	ABUS_expected[16] = 1'bX;
end 
// expected ABUS[ 15 ]
initial
begin
	ABUS_expected[15] = 1'bX;
end 
// expected ABUS[ 14 ]
initial
begin
	ABUS_expected[14] = 1'bX;
end 
// expected ABUS[ 13 ]
initial
begin
	ABUS_expected[13] = 1'bX;
end 
// expected ABUS[ 12 ]
initial
begin
	ABUS_expected[12] = 1'bX;
end 
// expected ABUS[ 11 ]
initial
begin
	ABUS_expected[11] = 1'bX;
end 
// expected ABUS[ 10 ]
initial
begin
	ABUS_expected[10] = 1'bX;
end 
// expected ABUS[ 9 ]
initial
begin
	ABUS_expected[9] = 1'bX;
end 
// expected ABUS[ 8 ]
initial
begin
	ABUS_expected[8] = 1'bX;
end 
// expected ABUS[ 7 ]
initial
begin
	ABUS_expected[7] = 1'bX;
end 
// expected ABUS[ 6 ]
initial
begin
	ABUS_expected[6] = 1'bX;
end 
// expected ABUS[ 5 ]
initial
begin
	ABUS_expected[5] = 1'bX;
end 
// expected ABUS[ 4 ]
initial
begin
	ABUS_expected[4] = 1'bX;
end 
// expected ABUS[ 3 ]
initial
begin
	ABUS_expected[3] = 1'bX;
end 
// expected ABUS[ 2 ]
initial
begin
	ABUS_expected[2] = 1'bX;
end 
// expected ABUS[ 1 ]
initial
begin
	ABUS_expected[1] = 1'bX;
end 
// expected ABUS[ 0 ]
initial
begin
	ABUS_expected[0] = 1'bX;
end 

// expected DBUS[31]
initial
begin
	DBUS_expected[31] = 1'b1;
	DBUS_expected[31] = #20000 1'bX;
end 

// expected DBUS[30]
initial
begin
	DBUS_expected[30] = 1'b1;
	DBUS_expected[30] = #20000 1'bX;
end 

// expected DBUS[29]
initial
begin
	DBUS_expected[29] = 1'b1;
	DBUS_expected[29] = #20000 1'bX;
end 

// expected DBUS[28]
initial
begin
	DBUS_expected[28] = 1'b0;
	DBUS_expected[28] = #20000 1'bX;
end 

// expected DBUS[27]
initial
begin
	DBUS_expected[27] = 1'b1;
	DBUS_expected[27] = #20000 1'bX;
end 

// expected DBUS[26]
initial
begin
	DBUS_expected[26] = 1'b1;
	DBUS_expected[26] = #20000 1'bX;
end 

// expected DBUS[25]
initial
begin
	DBUS_expected[25] = 1'b1;
	DBUS_expected[25] = #20000 1'bX;
end 

// expected DBUS[24]
initial
begin
	DBUS_expected[24] = 1'b1;
	DBUS_expected[24] = #20000 1'bX;
end 

// expected DBUS[23]
initial
begin
	DBUS_expected[23] = 1'b0;
	DBUS_expected[23] = #20000 1'bX;
end 

// expected DBUS[22]
initial
begin
	DBUS_expected[22] = 1'b0;
	DBUS_expected[22] = #20000 1'bX;
end 

// expected DBUS[21]
initial
begin
	DBUS_expected[21] = 1'b0;
	DBUS_expected[21] = #20000 1'bX;
end 

// expected DBUS[20]
initial
begin
	DBUS_expected[20] = 1'b0;
	DBUS_expected[20] = #20000 1'bX;
end 

// expected DBUS[19]
initial
begin
	DBUS_expected[19] = 1'b0;
	DBUS_expected[19] = #20000 1'bX;
end 

// expected DBUS[18]
initial
begin
	DBUS_expected[18] = 1'b0;
	DBUS_expected[18] = #20000 1'bX;
end 

// expected DBUS[17]
initial
begin
	DBUS_expected[17] = 1'b0;
	DBUS_expected[17] = #20000 1'bX;
end 

// expected DBUS[16]
initial
begin
	DBUS_expected[16] = 1'b0;
	DBUS_expected[16] = #20000 1'bX;
end 

// expected DBUS[15]
initial
begin
	DBUS_expected[15] = 1'b0;
	DBUS_expected[15] = #20000 1'bX;
end 

// expected DBUS[14]
initial
begin
	DBUS_expected[14] = 1'b0;
	DBUS_expected[14] = #20000 1'bX;
end 

// expected DBUS[13]
initial
begin
	DBUS_expected[13] = 1'b0;
	DBUS_expected[13] = #20000 1'bX;
end 

// expected DBUS[12]
initial
begin
	DBUS_expected[12] = 1'b0;
	DBUS_expected[12] = #20000 1'bX;
end 

// expected DBUS[11]
initial
begin
	DBUS_expected[11] = 1'b1;
	DBUS_expected[11] = #20000 1'bX;
end 

// expected DBUS[10]
initial
begin
	DBUS_expected[10] = 1'b1;
	DBUS_expected[10] = #20000 1'bX;
end 

// expected DBUS[9]
initial
begin
	DBUS_expected[9] = 1'b0;
	DBUS_expected[9] = #20000 1'bX;
end 

// expected DBUS[8]
initial
begin
	DBUS_expected[8] = 1'b0;
	DBUS_expected[8] = #20000 1'bX;
end 

// expected DBUS[7]
initial
begin
	DBUS_expected[7] = 1'b0;
	DBUS_expected[7] = #20000 1'bX;
end 

// expected DBUS[6]
initial
begin
	DBUS_expected[6] = 1'b0;
	DBUS_expected[6] = #20000 1'bX;
end 

// expected DBUS[5]
initial
begin
	DBUS_expected[5] = 1'b0;
	DBUS_expected[5] = #20000 1'bX;
end 

// expected DBUS[4]
initial
begin
	DBUS_expected[4] = 1'b0;
	DBUS_expected[4] = #20000 1'bX;
end 

// expected DBUS[3]
initial
begin
	DBUS_expected[3] = 1'b0;
	DBUS_expected[3] = #20000 1'bX;
end 

// expected DBUS[2]
initial
begin
	DBUS_expected[2] = 1'b1;
	DBUS_expected[2] = #20000 1'bX;
end 

// expected DBUS[1]
initial
begin
	DBUS_expected[1] = 1'b1;
	DBUS_expected[1] = #20000 1'bX;
end 

// expected DBUS[0]
initial
begin
	DBUS_expected[0] = 1'b0;
	DBUS_expected[0] = #20000 1'bX;
end 

// expected RD
initial
begin
	RD_expected = 1'bX;
end 

// expected WR
initial
begin
	WR_expected = 1'bX;
end 
// expected LEN[ 1 ]
initial
begin
	LEN_expected[1] = 1'bX;
end 
// expected LEN[ 0 ]
initial
begin
	LEN_expected[0] = 1'bX;
end 

// expected VGA_HS
initial
begin
	VGA_HS_expected = 1'bX;
end 

// expected VGA_VS
initial
begin
	VGA_VS_expected = 1'bX;
end 
// expected VGA_R[ 3 ]
initial
begin
	VGA_R_expected[3] = 1'bX;
end 
// expected VGA_R[ 2 ]
initial
begin
	VGA_R_expected[2] = 1'bX;
end 
// expected VGA_R[ 1 ]
initial
begin
	VGA_R_expected[1] = 1'bX;
end 
// expected VGA_R[ 0 ]
initial
begin
	VGA_R_expected[0] = 1'bX;
end 
// expected VGA_G[ 3 ]
initial
begin
	VGA_G_expected[3] = 1'bX;
end 
// expected VGA_G[ 2 ]
initial
begin
	VGA_G_expected[2] = 1'bX;
end 
// expected VGA_G[ 1 ]
initial
begin
	VGA_G_expected[1] = 1'bX;
end 
// expected VGA_G[ 0 ]
initial
begin
	VGA_G_expected[0] = 1'bX;
end 
// expected VGA_B[ 3 ]
initial
begin
	VGA_B_expected[3] = 1'bX;
end 
// expected VGA_B[ 2 ]
initial
begin
	VGA_B_expected[2] = 1'bX;
end 
// expected VGA_B[ 1 ]
initial
begin
	VGA_B_expected[1] = 1'bX;
end 
// expected VGA_B[ 0 ]
initial
begin
	VGA_B_expected[0] = 1'bX;
end 
// generate trigger
always @(ABUS_expected or ABUS or DBUS_expected or DBUS or LEN_expected or LEN or RD_expected or RD or VGA_B_expected or VGA_B or VGA_G_expected or VGA_G or VGA_HS_expected or VGA_HS or VGA_R_expected or VGA_R or VGA_VS_expected or VGA_VS or WR_expected or WR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ABUS = %b | expected DBUS = %b | expected LEN = %b | expected RD = %b | expected VGA_B = %b | expected VGA_G = %b | expected VGA_HS = %b | expected VGA_R = %b | expected VGA_VS = %b | expected WR = %b | ",ABUS_expected_prev,DBUS_expected_prev,LEN_expected_prev,RD_expected_prev,VGA_B_expected_prev,VGA_G_expected_prev,VGA_HS_expected_prev,VGA_R_expected_prev,VGA_VS_expected_prev,WR_expected_prev);
	$display("| real ABUS = %b | real DBUS = %b | real LEN = %b | real RD = %b | real VGA_B = %b | real VGA_G = %b | real VGA_HS = %b | real VGA_R = %b | real VGA_VS = %b | real WR = %b | ",ABUS_prev,DBUS_prev,LEN_prev,RD_prev,VGA_B_prev,VGA_G_prev,VGA_HS_prev,VGA_R_prev,VGA_VS_prev,WR_prev);
`endif
	if (
		( ABUS_expected_prev[0] !== 1'bx ) && ( ABUS_prev[0] !== ABUS_expected_prev[0] )
		&& ((ABUS_expected_prev[0] !== last_ABUS_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[0] = ABUS_expected_prev[0];
	end
	if (
		( ABUS_expected_prev[1] !== 1'bx ) && ( ABUS_prev[1] !== ABUS_expected_prev[1] )
		&& ((ABUS_expected_prev[1] !== last_ABUS_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[1] = ABUS_expected_prev[1];
	end
	if (
		( ABUS_expected_prev[2] !== 1'bx ) && ( ABUS_prev[2] !== ABUS_expected_prev[2] )
		&& ((ABUS_expected_prev[2] !== last_ABUS_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[2] = ABUS_expected_prev[2];
	end
	if (
		( ABUS_expected_prev[3] !== 1'bx ) && ( ABUS_prev[3] !== ABUS_expected_prev[3] )
		&& ((ABUS_expected_prev[3] !== last_ABUS_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[3] = ABUS_expected_prev[3];
	end
	if (
		( ABUS_expected_prev[4] !== 1'bx ) && ( ABUS_prev[4] !== ABUS_expected_prev[4] )
		&& ((ABUS_expected_prev[4] !== last_ABUS_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[4] = ABUS_expected_prev[4];
	end
	if (
		( ABUS_expected_prev[5] !== 1'bx ) && ( ABUS_prev[5] !== ABUS_expected_prev[5] )
		&& ((ABUS_expected_prev[5] !== last_ABUS_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[5] = ABUS_expected_prev[5];
	end
	if (
		( ABUS_expected_prev[6] !== 1'bx ) && ( ABUS_prev[6] !== ABUS_expected_prev[6] )
		&& ((ABUS_expected_prev[6] !== last_ABUS_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[6] = ABUS_expected_prev[6];
	end
	if (
		( ABUS_expected_prev[7] !== 1'bx ) && ( ABUS_prev[7] !== ABUS_expected_prev[7] )
		&& ((ABUS_expected_prev[7] !== last_ABUS_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[7] = ABUS_expected_prev[7];
	end
	if (
		( ABUS_expected_prev[8] !== 1'bx ) && ( ABUS_prev[8] !== ABUS_expected_prev[8] )
		&& ((ABUS_expected_prev[8] !== last_ABUS_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[8] = ABUS_expected_prev[8];
	end
	if (
		( ABUS_expected_prev[9] !== 1'bx ) && ( ABUS_prev[9] !== ABUS_expected_prev[9] )
		&& ((ABUS_expected_prev[9] !== last_ABUS_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[9] = ABUS_expected_prev[9];
	end
	if (
		( ABUS_expected_prev[10] !== 1'bx ) && ( ABUS_prev[10] !== ABUS_expected_prev[10] )
		&& ((ABUS_expected_prev[10] !== last_ABUS_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[10] = ABUS_expected_prev[10];
	end
	if (
		( ABUS_expected_prev[11] !== 1'bx ) && ( ABUS_prev[11] !== ABUS_expected_prev[11] )
		&& ((ABUS_expected_prev[11] !== last_ABUS_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[11] = ABUS_expected_prev[11];
	end
	if (
		( ABUS_expected_prev[12] !== 1'bx ) && ( ABUS_prev[12] !== ABUS_expected_prev[12] )
		&& ((ABUS_expected_prev[12] !== last_ABUS_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[12] = ABUS_expected_prev[12];
	end
	if (
		( ABUS_expected_prev[13] !== 1'bx ) && ( ABUS_prev[13] !== ABUS_expected_prev[13] )
		&& ((ABUS_expected_prev[13] !== last_ABUS_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[13] = ABUS_expected_prev[13];
	end
	if (
		( ABUS_expected_prev[14] !== 1'bx ) && ( ABUS_prev[14] !== ABUS_expected_prev[14] )
		&& ((ABUS_expected_prev[14] !== last_ABUS_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[14] = ABUS_expected_prev[14];
	end
	if (
		( ABUS_expected_prev[15] !== 1'bx ) && ( ABUS_prev[15] !== ABUS_expected_prev[15] )
		&& ((ABUS_expected_prev[15] !== last_ABUS_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[15] = ABUS_expected_prev[15];
	end
	if (
		( ABUS_expected_prev[16] !== 1'bx ) && ( ABUS_prev[16] !== ABUS_expected_prev[16] )
		&& ((ABUS_expected_prev[16] !== last_ABUS_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[16] = ABUS_expected_prev[16];
	end
	if (
		( ABUS_expected_prev[17] !== 1'bx ) && ( ABUS_prev[17] !== ABUS_expected_prev[17] )
		&& ((ABUS_expected_prev[17] !== last_ABUS_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[17] = ABUS_expected_prev[17];
	end
	if (
		( ABUS_expected_prev[18] !== 1'bx ) && ( ABUS_prev[18] !== ABUS_expected_prev[18] )
		&& ((ABUS_expected_prev[18] !== last_ABUS_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[18] = ABUS_expected_prev[18];
	end
	if (
		( ABUS_expected_prev[19] !== 1'bx ) && ( ABUS_prev[19] !== ABUS_expected_prev[19] )
		&& ((ABUS_expected_prev[19] !== last_ABUS_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[19] = ABUS_expected_prev[19];
	end
	if (
		( ABUS_expected_prev[20] !== 1'bx ) && ( ABUS_prev[20] !== ABUS_expected_prev[20] )
		&& ((ABUS_expected_prev[20] !== last_ABUS_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[20] = ABUS_expected_prev[20];
	end
	if (
		( ABUS_expected_prev[21] !== 1'bx ) && ( ABUS_prev[21] !== ABUS_expected_prev[21] )
		&& ((ABUS_expected_prev[21] !== last_ABUS_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[21] = ABUS_expected_prev[21];
	end
	if (
		( ABUS_expected_prev[22] !== 1'bx ) && ( ABUS_prev[22] !== ABUS_expected_prev[22] )
		&& ((ABUS_expected_prev[22] !== last_ABUS_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[22] = ABUS_expected_prev[22];
	end
	if (
		( ABUS_expected_prev[23] !== 1'bx ) && ( ABUS_prev[23] !== ABUS_expected_prev[23] )
		&& ((ABUS_expected_prev[23] !== last_ABUS_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[23] = ABUS_expected_prev[23];
	end
	if (
		( ABUS_expected_prev[24] !== 1'bx ) && ( ABUS_prev[24] !== ABUS_expected_prev[24] )
		&& ((ABUS_expected_prev[24] !== last_ABUS_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[24] = ABUS_expected_prev[24];
	end
	if (
		( ABUS_expected_prev[25] !== 1'bx ) && ( ABUS_prev[25] !== ABUS_expected_prev[25] )
		&& ((ABUS_expected_prev[25] !== last_ABUS_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[25] = ABUS_expected_prev[25];
	end
	if (
		( ABUS_expected_prev[26] !== 1'bx ) && ( ABUS_prev[26] !== ABUS_expected_prev[26] )
		&& ((ABUS_expected_prev[26] !== last_ABUS_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[26] = ABUS_expected_prev[26];
	end
	if (
		( ABUS_expected_prev[27] !== 1'bx ) && ( ABUS_prev[27] !== ABUS_expected_prev[27] )
		&& ((ABUS_expected_prev[27] !== last_ABUS_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[27] = ABUS_expected_prev[27];
	end
	if (
		( ABUS_expected_prev[28] !== 1'bx ) && ( ABUS_prev[28] !== ABUS_expected_prev[28] )
		&& ((ABUS_expected_prev[28] !== last_ABUS_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[28] = ABUS_expected_prev[28];
	end
	if (
		( ABUS_expected_prev[29] !== 1'bx ) && ( ABUS_prev[29] !== ABUS_expected_prev[29] )
		&& ((ABUS_expected_prev[29] !== last_ABUS_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[29] = ABUS_expected_prev[29];
	end
	if (
		( ABUS_expected_prev[30] !== 1'bx ) && ( ABUS_prev[30] !== ABUS_expected_prev[30] )
		&& ((ABUS_expected_prev[30] !== last_ABUS_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[30] = ABUS_expected_prev[30];
	end
	if (
		( ABUS_expected_prev[31] !== 1'bx ) && ( ABUS_prev[31] !== ABUS_expected_prev[31] )
		&& ((ABUS_expected_prev[31] !== last_ABUS_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_expected_prev);
		$display ("     Real value = %b", ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_exp[31] = ABUS_expected_prev[31];
	end
	if (
		( DBUS_expected_prev[0] !== 1'bx ) && ( DBUS_prev[0] !== DBUS_expected_prev[0] )
		&& ((DBUS_expected_prev[0] !== last_DBUS_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[0] = DBUS_expected_prev[0];
	end
	if (
		( DBUS_expected_prev[1] !== 1'bx ) && ( DBUS_prev[1] !== DBUS_expected_prev[1] )
		&& ((DBUS_expected_prev[1] !== last_DBUS_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[1] = DBUS_expected_prev[1];
	end
	if (
		( DBUS_expected_prev[2] !== 1'bx ) && ( DBUS_prev[2] !== DBUS_expected_prev[2] )
		&& ((DBUS_expected_prev[2] !== last_DBUS_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[2] = DBUS_expected_prev[2];
	end
	if (
		( DBUS_expected_prev[3] !== 1'bx ) && ( DBUS_prev[3] !== DBUS_expected_prev[3] )
		&& ((DBUS_expected_prev[3] !== last_DBUS_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[3] = DBUS_expected_prev[3];
	end
	if (
		( DBUS_expected_prev[4] !== 1'bx ) && ( DBUS_prev[4] !== DBUS_expected_prev[4] )
		&& ((DBUS_expected_prev[4] !== last_DBUS_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[4] = DBUS_expected_prev[4];
	end
	if (
		( DBUS_expected_prev[5] !== 1'bx ) && ( DBUS_prev[5] !== DBUS_expected_prev[5] )
		&& ((DBUS_expected_prev[5] !== last_DBUS_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[5] = DBUS_expected_prev[5];
	end
	if (
		( DBUS_expected_prev[6] !== 1'bx ) && ( DBUS_prev[6] !== DBUS_expected_prev[6] )
		&& ((DBUS_expected_prev[6] !== last_DBUS_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[6] = DBUS_expected_prev[6];
	end
	if (
		( DBUS_expected_prev[7] !== 1'bx ) && ( DBUS_prev[7] !== DBUS_expected_prev[7] )
		&& ((DBUS_expected_prev[7] !== last_DBUS_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[7] = DBUS_expected_prev[7];
	end
	if (
		( DBUS_expected_prev[8] !== 1'bx ) && ( DBUS_prev[8] !== DBUS_expected_prev[8] )
		&& ((DBUS_expected_prev[8] !== last_DBUS_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[8] = DBUS_expected_prev[8];
	end
	if (
		( DBUS_expected_prev[9] !== 1'bx ) && ( DBUS_prev[9] !== DBUS_expected_prev[9] )
		&& ((DBUS_expected_prev[9] !== last_DBUS_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[9] = DBUS_expected_prev[9];
	end
	if (
		( DBUS_expected_prev[10] !== 1'bx ) && ( DBUS_prev[10] !== DBUS_expected_prev[10] )
		&& ((DBUS_expected_prev[10] !== last_DBUS_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[10] = DBUS_expected_prev[10];
	end
	if (
		( DBUS_expected_prev[11] !== 1'bx ) && ( DBUS_prev[11] !== DBUS_expected_prev[11] )
		&& ((DBUS_expected_prev[11] !== last_DBUS_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[11] = DBUS_expected_prev[11];
	end
	if (
		( DBUS_expected_prev[12] !== 1'bx ) && ( DBUS_prev[12] !== DBUS_expected_prev[12] )
		&& ((DBUS_expected_prev[12] !== last_DBUS_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[12] = DBUS_expected_prev[12];
	end
	if (
		( DBUS_expected_prev[13] !== 1'bx ) && ( DBUS_prev[13] !== DBUS_expected_prev[13] )
		&& ((DBUS_expected_prev[13] !== last_DBUS_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[13] = DBUS_expected_prev[13];
	end
	if (
		( DBUS_expected_prev[14] !== 1'bx ) && ( DBUS_prev[14] !== DBUS_expected_prev[14] )
		&& ((DBUS_expected_prev[14] !== last_DBUS_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[14] = DBUS_expected_prev[14];
	end
	if (
		( DBUS_expected_prev[15] !== 1'bx ) && ( DBUS_prev[15] !== DBUS_expected_prev[15] )
		&& ((DBUS_expected_prev[15] !== last_DBUS_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[15] = DBUS_expected_prev[15];
	end
	if (
		( DBUS_expected_prev[16] !== 1'bx ) && ( DBUS_prev[16] !== DBUS_expected_prev[16] )
		&& ((DBUS_expected_prev[16] !== last_DBUS_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[16] = DBUS_expected_prev[16];
	end
	if (
		( DBUS_expected_prev[17] !== 1'bx ) && ( DBUS_prev[17] !== DBUS_expected_prev[17] )
		&& ((DBUS_expected_prev[17] !== last_DBUS_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[17] = DBUS_expected_prev[17];
	end
	if (
		( DBUS_expected_prev[18] !== 1'bx ) && ( DBUS_prev[18] !== DBUS_expected_prev[18] )
		&& ((DBUS_expected_prev[18] !== last_DBUS_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[18] = DBUS_expected_prev[18];
	end
	if (
		( DBUS_expected_prev[19] !== 1'bx ) && ( DBUS_prev[19] !== DBUS_expected_prev[19] )
		&& ((DBUS_expected_prev[19] !== last_DBUS_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[19] = DBUS_expected_prev[19];
	end
	if (
		( DBUS_expected_prev[20] !== 1'bx ) && ( DBUS_prev[20] !== DBUS_expected_prev[20] )
		&& ((DBUS_expected_prev[20] !== last_DBUS_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[20] = DBUS_expected_prev[20];
	end
	if (
		( DBUS_expected_prev[21] !== 1'bx ) && ( DBUS_prev[21] !== DBUS_expected_prev[21] )
		&& ((DBUS_expected_prev[21] !== last_DBUS_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[21] = DBUS_expected_prev[21];
	end
	if (
		( DBUS_expected_prev[22] !== 1'bx ) && ( DBUS_prev[22] !== DBUS_expected_prev[22] )
		&& ((DBUS_expected_prev[22] !== last_DBUS_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[22] = DBUS_expected_prev[22];
	end
	if (
		( DBUS_expected_prev[23] !== 1'bx ) && ( DBUS_prev[23] !== DBUS_expected_prev[23] )
		&& ((DBUS_expected_prev[23] !== last_DBUS_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[23] = DBUS_expected_prev[23];
	end
	if (
		( DBUS_expected_prev[24] !== 1'bx ) && ( DBUS_prev[24] !== DBUS_expected_prev[24] )
		&& ((DBUS_expected_prev[24] !== last_DBUS_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[24] = DBUS_expected_prev[24];
	end
	if (
		( DBUS_expected_prev[25] !== 1'bx ) && ( DBUS_prev[25] !== DBUS_expected_prev[25] )
		&& ((DBUS_expected_prev[25] !== last_DBUS_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[25] = DBUS_expected_prev[25];
	end
	if (
		( DBUS_expected_prev[26] !== 1'bx ) && ( DBUS_prev[26] !== DBUS_expected_prev[26] )
		&& ((DBUS_expected_prev[26] !== last_DBUS_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[26] = DBUS_expected_prev[26];
	end
	if (
		( DBUS_expected_prev[27] !== 1'bx ) && ( DBUS_prev[27] !== DBUS_expected_prev[27] )
		&& ((DBUS_expected_prev[27] !== last_DBUS_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[27] = DBUS_expected_prev[27];
	end
	if (
		( DBUS_expected_prev[28] !== 1'bx ) && ( DBUS_prev[28] !== DBUS_expected_prev[28] )
		&& ((DBUS_expected_prev[28] !== last_DBUS_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[28] = DBUS_expected_prev[28];
	end
	if (
		( DBUS_expected_prev[29] !== 1'bx ) && ( DBUS_prev[29] !== DBUS_expected_prev[29] )
		&& ((DBUS_expected_prev[29] !== last_DBUS_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[29] = DBUS_expected_prev[29];
	end
	if (
		( DBUS_expected_prev[30] !== 1'bx ) && ( DBUS_prev[30] !== DBUS_expected_prev[30] )
		&& ((DBUS_expected_prev[30] !== last_DBUS_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[30] = DBUS_expected_prev[30];
	end
	if (
		( DBUS_expected_prev[31] !== 1'bx ) && ( DBUS_prev[31] !== DBUS_expected_prev[31] )
		&& ((DBUS_expected_prev[31] !== last_DBUS_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBUS_exp[31] = DBUS_expected_prev[31];
	end
	if (
		( LEN_expected_prev[0] !== 1'bx ) && ( LEN_prev[0] !== LEN_expected_prev[0] )
		&& ((LEN_expected_prev[0] !== last_LEN_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEN[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEN_expected_prev);
		$display ("     Real value = %b", LEN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEN_exp[0] = LEN_expected_prev[0];
	end
	if (
		( LEN_expected_prev[1] !== 1'bx ) && ( LEN_prev[1] !== LEN_expected_prev[1] )
		&& ((LEN_expected_prev[1] !== last_LEN_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEN[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEN_expected_prev);
		$display ("     Real value = %b", LEN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEN_exp[1] = LEN_expected_prev[1];
	end
	if (
		( RD_expected_prev !== 1'bx ) && ( RD_prev !== RD_expected_prev )
		&& ((RD_expected_prev !== last_RD_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_expected_prev);
		$display ("     Real value = %b", RD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RD_exp = RD_expected_prev;
	end
	if (
		( VGA_B_expected_prev[0] !== 1'bx ) && ( VGA_B_prev[0] !== VGA_B_expected_prev[0] )
		&& ((VGA_B_expected_prev[0] !== last_VGA_B_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VGA_B_exp[0] = VGA_B_expected_prev[0];
	end
	if (
		( VGA_B_expected_prev[1] !== 1'bx ) && ( VGA_B_prev[1] !== VGA_B_expected_prev[1] )
		&& ((VGA_B_expected_prev[1] !== last_VGA_B_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VGA_B_exp[1] = VGA_B_expected_prev[1];
	end
	if (
		( VGA_B_expected_prev[2] !== 1'bx ) && ( VGA_B_prev[2] !== VGA_B_expected_prev[2] )
		&& ((VGA_B_expected_prev[2] !== last_VGA_B_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VGA_B_exp[2] = VGA_B_expected_prev[2];
	end
	if (
		( VGA_B_expected_prev[3] !== 1'bx ) && ( VGA_B_prev[3] !== VGA_B_expected_prev[3] )
		&& ((VGA_B_expected_prev[3] !== last_VGA_B_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VGA_B_exp[3] = VGA_B_expected_prev[3];
	end
	if (
		( VGA_G_expected_prev[0] !== 1'bx ) && ( VGA_G_prev[0] !== VGA_G_expected_prev[0] )
		&& ((VGA_G_expected_prev[0] !== last_VGA_G_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_VGA_G_exp[0] = VGA_G_expected_prev[0];
	end
	if (
		( VGA_G_expected_prev[1] !== 1'bx ) && ( VGA_G_prev[1] !== VGA_G_expected_prev[1] )
		&& ((VGA_G_expected_prev[1] !== last_VGA_G_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_VGA_G_exp[1] = VGA_G_expected_prev[1];
	end
	if (
		( VGA_G_expected_prev[2] !== 1'bx ) && ( VGA_G_prev[2] !== VGA_G_expected_prev[2] )
		&& ((VGA_G_expected_prev[2] !== last_VGA_G_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_VGA_G_exp[2] = VGA_G_expected_prev[2];
	end
	if (
		( VGA_G_expected_prev[3] !== 1'bx ) && ( VGA_G_prev[3] !== VGA_G_expected_prev[3] )
		&& ((VGA_G_expected_prev[3] !== last_VGA_G_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_VGA_G_exp[3] = VGA_G_expected_prev[3];
	end
	if (
		( VGA_HS_expected_prev !== 1'bx ) && ( VGA_HS_prev !== VGA_HS_expected_prev )
		&& ((VGA_HS_expected_prev !== last_VGA_HS_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_HS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_HS_expected_prev);
		$display ("     Real value = %b", VGA_HS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_VGA_HS_exp = VGA_HS_expected_prev;
	end
	if (
		( VGA_R_expected_prev[0] !== 1'bx ) && ( VGA_R_prev[0] !== VGA_R_expected_prev[0] )
		&& ((VGA_R_expected_prev[0] !== last_VGA_R_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_VGA_R_exp[0] = VGA_R_expected_prev[0];
	end
	if (
		( VGA_R_expected_prev[1] !== 1'bx ) && ( VGA_R_prev[1] !== VGA_R_expected_prev[1] )
		&& ((VGA_R_expected_prev[1] !== last_VGA_R_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_VGA_R_exp[1] = VGA_R_expected_prev[1];
	end
	if (
		( VGA_R_expected_prev[2] !== 1'bx ) && ( VGA_R_prev[2] !== VGA_R_expected_prev[2] )
		&& ((VGA_R_expected_prev[2] !== last_VGA_R_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_VGA_R_exp[2] = VGA_R_expected_prev[2];
	end
	if (
		( VGA_R_expected_prev[3] !== 1'bx ) && ( VGA_R_prev[3] !== VGA_R_expected_prev[3] )
		&& ((VGA_R_expected_prev[3] !== last_VGA_R_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_VGA_R_exp[3] = VGA_R_expected_prev[3];
	end
	if (
		( VGA_VS_expected_prev !== 1'bx ) && ( VGA_VS_prev !== VGA_VS_expected_prev )
		&& ((VGA_VS_expected_prev !== last_VGA_VS_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_VS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_VS_expected_prev);
		$display ("     Real value = %b", VGA_VS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_VGA_VS_exp = VGA_VS_expected_prev;
	end
	if (
		( WR_expected_prev !== 1'bx ) && ( WR_prev !== WR_expected_prev )
		&& ((WR_expected_prev !== last_WR_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WR_expected_prev);
		$display ("     Real value = %b", WR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_WR_exp = WR_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ARP_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [31:0] treg_DBUS;
// wires                                               
wire [31:0] ABUS;
wire [31:0] DBUS;
wire [1:0] LEN;
wire RD;
wire [3:0] VGA_B;
wire [3:0] VGA_G;
wire VGA_HS;
wire [3:0] VGA_R;
wire VGA_VS;
wire WR;

wire sampler;                             

// assign statements (if any)                          
assign DBUS = treg_DBUS;
ARP i1 (
// port map - connection between master ports and signals/registers   
	.ABUS(ABUS),
	.CLK(CLK),
	.DBUS(DBUS),
	.LEN(LEN),
	.RD(RD),
	.VGA_B(VGA_B),
	.VGA_G(VGA_G),
	.VGA_HS(VGA_HS),
	.VGA_R(VGA_R),
	.VGA_VS(VGA_VS),
	.WR(WR)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// DBUS[ 31 ]
initial
begin
	treg_DBUS[31] = 1'b1;
	treg_DBUS[31] = #20000 1'bX;
end 
// DBUS[ 30 ]
initial
begin
	treg_DBUS[30] = 1'b1;
	treg_DBUS[30] = #20000 1'bX;
end 
// DBUS[ 29 ]
initial
begin
	treg_DBUS[29] = 1'b1;
	treg_DBUS[29] = #20000 1'bX;
end 
// DBUS[ 28 ]
initial
begin
	treg_DBUS[28] = 1'b0;
	treg_DBUS[28] = #20000 1'bX;
end 
// DBUS[ 27 ]
initial
begin
	treg_DBUS[27] = 1'b1;
	treg_DBUS[27] = #20000 1'bX;
end 
// DBUS[ 26 ]
initial
begin
	treg_DBUS[26] = 1'b1;
	treg_DBUS[26] = #20000 1'bX;
end 
// DBUS[ 25 ]
initial
begin
	treg_DBUS[25] = 1'b1;
	treg_DBUS[25] = #20000 1'bX;
end 
// DBUS[ 24 ]
initial
begin
	treg_DBUS[24] = 1'b1;
	treg_DBUS[24] = #20000 1'bX;
end 
// DBUS[ 23 ]
initial
begin
	treg_DBUS[23] = 1'b0;
	treg_DBUS[23] = #20000 1'bX;
end 
// DBUS[ 22 ]
initial
begin
	treg_DBUS[22] = 1'b0;
	treg_DBUS[22] = #20000 1'bX;
end 
// DBUS[ 21 ]
initial
begin
	treg_DBUS[21] = 1'b0;
	treg_DBUS[21] = #20000 1'bX;
end 
// DBUS[ 20 ]
initial
begin
	treg_DBUS[20] = 1'b0;
	treg_DBUS[20] = #20000 1'bX;
end 
// DBUS[ 19 ]
initial
begin
	treg_DBUS[19] = 1'b0;
	treg_DBUS[19] = #20000 1'bX;
end 
// DBUS[ 18 ]
initial
begin
	treg_DBUS[18] = 1'b0;
	treg_DBUS[18] = #20000 1'bX;
end 
// DBUS[ 17 ]
initial
begin
	treg_DBUS[17] = 1'b0;
	treg_DBUS[17] = #20000 1'bX;
end 
// DBUS[ 16 ]
initial
begin
	treg_DBUS[16] = 1'b0;
	treg_DBUS[16] = #20000 1'bX;
end 
// DBUS[ 15 ]
initial
begin
	treg_DBUS[15] = 1'b0;
	treg_DBUS[15] = #20000 1'bX;
end 
// DBUS[ 14 ]
initial
begin
	treg_DBUS[14] = 1'b0;
	treg_DBUS[14] = #20000 1'bX;
end 
// DBUS[ 13 ]
initial
begin
	treg_DBUS[13] = 1'b0;
	treg_DBUS[13] = #20000 1'bX;
end 
// DBUS[ 12 ]
initial
begin
	treg_DBUS[12] = 1'b0;
	treg_DBUS[12] = #20000 1'bX;
end 
// DBUS[ 11 ]
initial
begin
	treg_DBUS[11] = 1'b1;
	treg_DBUS[11] = #20000 1'bX;
end 
// DBUS[ 10 ]
initial
begin
	treg_DBUS[10] = 1'b1;
	treg_DBUS[10] = #20000 1'bX;
end 
// DBUS[ 9 ]
initial
begin
	treg_DBUS[9] = 1'b0;
	treg_DBUS[9] = #20000 1'bX;
end 
// DBUS[ 8 ]
initial
begin
	treg_DBUS[8] = 1'b0;
	treg_DBUS[8] = #20000 1'bX;
end 
// DBUS[ 7 ]
initial
begin
	treg_DBUS[7] = 1'b0;
	treg_DBUS[7] = #20000 1'bX;
end 
// DBUS[ 6 ]
initial
begin
	treg_DBUS[6] = 1'b0;
	treg_DBUS[6] = #20000 1'bX;
end 
// DBUS[ 5 ]
initial
begin
	treg_DBUS[5] = 1'b0;
	treg_DBUS[5] = #20000 1'bX;
end 
// DBUS[ 4 ]
initial
begin
	treg_DBUS[4] = 1'b0;
	treg_DBUS[4] = #20000 1'bX;
end 
// DBUS[ 3 ]
initial
begin
	treg_DBUS[3] = 1'b0;
	treg_DBUS[3] = #20000 1'bX;
end 
// DBUS[ 2 ]
initial
begin
	treg_DBUS[2] = 1'b1;
	treg_DBUS[2] = #20000 1'bX;
end 
// DBUS[ 1 ]
initial
begin
	treg_DBUS[1] = 1'b1;
	treg_DBUS[1] = #20000 1'bX;
end 
// DBUS[ 0 ]
initial
begin
	treg_DBUS[0] = 1'b0;
	treg_DBUS[0] = #20000 1'bX;
end 

ARP_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.DBUS(DBUS),
	.sampler_tx(sampler)
);

ARP_vlg_check_tst tb_out(
	.ABUS(ABUS),
	.DBUS(DBUS),
	.LEN(LEN),
	.RD(RD),
	.VGA_B(VGA_B),
	.VGA_G(VGA_G),
	.VGA_HS(VGA_HS),
	.VGA_R(VGA_R),
	.VGA_VS(VGA_VS),
	.WR(WR),
	.sampler_rx(sampler)
);
endmodule

