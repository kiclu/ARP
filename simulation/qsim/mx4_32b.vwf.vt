// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/06/2023 17:50:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mx4_32b
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mx4_32b_vlg_sample_tst(
	I0,
	I1,
	I2,
	I3,
	S,
	sampler_tx
);
input [31:0] I0;
input [31:0] I1;
input [31:0] I2;
input [31:0] I3;
input [1:0] S;
output sampler_tx;

reg sample;
time current_time;
always @(I0 or I1 or I2 or I3 or S)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mx4_32b_vlg_check_tst (
	O,
	sampler_rx
);
input [31:0] O;
input sampler_rx;

reg [31:0] O_expected;

reg [31:0] O_prev;

reg [31:0] O_expected_prev;

reg [31:0] last_O_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	O_prev = O;
end

// update expected /o prevs

always @(trigger)
begin
	O_expected_prev = O_expected;
end


// expected O[ 31 ]
initial
begin
	O_expected[31] = 1'bX;
end 
// expected O[ 30 ]
initial
begin
	O_expected[30] = 1'bX;
end 
// expected O[ 29 ]
initial
begin
	O_expected[29] = 1'bX;
end 
// expected O[ 28 ]
initial
begin
	O_expected[28] = 1'bX;
end 
// expected O[ 27 ]
initial
begin
	O_expected[27] = 1'bX;
end 
// expected O[ 26 ]
initial
begin
	O_expected[26] = 1'bX;
end 
// expected O[ 25 ]
initial
begin
	O_expected[25] = 1'bX;
end 
// expected O[ 24 ]
initial
begin
	O_expected[24] = 1'bX;
end 
// expected O[ 23 ]
initial
begin
	O_expected[23] = 1'bX;
end 
// expected O[ 22 ]
initial
begin
	O_expected[22] = 1'bX;
end 
// expected O[ 21 ]
initial
begin
	O_expected[21] = 1'bX;
end 
// expected O[ 20 ]
initial
begin
	O_expected[20] = 1'bX;
end 
// expected O[ 19 ]
initial
begin
	O_expected[19] = 1'bX;
end 
// expected O[ 18 ]
initial
begin
	O_expected[18] = 1'bX;
end 
// expected O[ 17 ]
initial
begin
	O_expected[17] = 1'bX;
end 
// expected O[ 16 ]
initial
begin
	O_expected[16] = 1'bX;
end 
// expected O[ 15 ]
initial
begin
	O_expected[15] = 1'bX;
end 
// expected O[ 14 ]
initial
begin
	O_expected[14] = 1'bX;
end 
// expected O[ 13 ]
initial
begin
	O_expected[13] = 1'bX;
end 
// expected O[ 12 ]
initial
begin
	O_expected[12] = 1'bX;
end 
// expected O[ 11 ]
initial
begin
	O_expected[11] = 1'bX;
end 
// expected O[ 10 ]
initial
begin
	O_expected[10] = 1'bX;
end 
// expected O[ 9 ]
initial
begin
	O_expected[9] = 1'bX;
end 
// expected O[ 8 ]
initial
begin
	O_expected[8] = 1'bX;
end 
// expected O[ 7 ]
initial
begin
	O_expected[7] = 1'bX;
end 
// expected O[ 6 ]
initial
begin
	O_expected[6] = 1'bX;
end 
// expected O[ 5 ]
initial
begin
	O_expected[5] = 1'bX;
end 
// expected O[ 4 ]
initial
begin
	O_expected[4] = 1'bX;
end 
// expected O[ 3 ]
initial
begin
	O_expected[3] = 1'bX;
end 
// expected O[ 2 ]
initial
begin
	O_expected[2] = 1'bX;
end 
// expected O[ 1 ]
initial
begin
	O_expected[1] = 1'bX;
end 
// expected O[ 0 ]
initial
begin
	O_expected[0] = 1'bX;
end 
// generate trigger
always @(O_expected or O)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected O = %b | ",O_expected_prev);
	$display("| real O = %b | ",O_prev);
`endif
	if (
		( O_expected_prev[0] !== 1'bx ) && ( O_prev[0] !== O_expected_prev[0] )
		&& ((O_expected_prev[0] !== last_O_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[0] = O_expected_prev[0];
	end
	if (
		( O_expected_prev[1] !== 1'bx ) && ( O_prev[1] !== O_expected_prev[1] )
		&& ((O_expected_prev[1] !== last_O_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[1] = O_expected_prev[1];
	end
	if (
		( O_expected_prev[2] !== 1'bx ) && ( O_prev[2] !== O_expected_prev[2] )
		&& ((O_expected_prev[2] !== last_O_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[2] = O_expected_prev[2];
	end
	if (
		( O_expected_prev[3] !== 1'bx ) && ( O_prev[3] !== O_expected_prev[3] )
		&& ((O_expected_prev[3] !== last_O_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[3] = O_expected_prev[3];
	end
	if (
		( O_expected_prev[4] !== 1'bx ) && ( O_prev[4] !== O_expected_prev[4] )
		&& ((O_expected_prev[4] !== last_O_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[4] = O_expected_prev[4];
	end
	if (
		( O_expected_prev[5] !== 1'bx ) && ( O_prev[5] !== O_expected_prev[5] )
		&& ((O_expected_prev[5] !== last_O_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[5] = O_expected_prev[5];
	end
	if (
		( O_expected_prev[6] !== 1'bx ) && ( O_prev[6] !== O_expected_prev[6] )
		&& ((O_expected_prev[6] !== last_O_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[6] = O_expected_prev[6];
	end
	if (
		( O_expected_prev[7] !== 1'bx ) && ( O_prev[7] !== O_expected_prev[7] )
		&& ((O_expected_prev[7] !== last_O_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[7] = O_expected_prev[7];
	end
	if (
		( O_expected_prev[8] !== 1'bx ) && ( O_prev[8] !== O_expected_prev[8] )
		&& ((O_expected_prev[8] !== last_O_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[8] = O_expected_prev[8];
	end
	if (
		( O_expected_prev[9] !== 1'bx ) && ( O_prev[9] !== O_expected_prev[9] )
		&& ((O_expected_prev[9] !== last_O_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[9] = O_expected_prev[9];
	end
	if (
		( O_expected_prev[10] !== 1'bx ) && ( O_prev[10] !== O_expected_prev[10] )
		&& ((O_expected_prev[10] !== last_O_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[10] = O_expected_prev[10];
	end
	if (
		( O_expected_prev[11] !== 1'bx ) && ( O_prev[11] !== O_expected_prev[11] )
		&& ((O_expected_prev[11] !== last_O_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[11] = O_expected_prev[11];
	end
	if (
		( O_expected_prev[12] !== 1'bx ) && ( O_prev[12] !== O_expected_prev[12] )
		&& ((O_expected_prev[12] !== last_O_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[12] = O_expected_prev[12];
	end
	if (
		( O_expected_prev[13] !== 1'bx ) && ( O_prev[13] !== O_expected_prev[13] )
		&& ((O_expected_prev[13] !== last_O_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[13] = O_expected_prev[13];
	end
	if (
		( O_expected_prev[14] !== 1'bx ) && ( O_prev[14] !== O_expected_prev[14] )
		&& ((O_expected_prev[14] !== last_O_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[14] = O_expected_prev[14];
	end
	if (
		( O_expected_prev[15] !== 1'bx ) && ( O_prev[15] !== O_expected_prev[15] )
		&& ((O_expected_prev[15] !== last_O_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[15] = O_expected_prev[15];
	end
	if (
		( O_expected_prev[16] !== 1'bx ) && ( O_prev[16] !== O_expected_prev[16] )
		&& ((O_expected_prev[16] !== last_O_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[16] = O_expected_prev[16];
	end
	if (
		( O_expected_prev[17] !== 1'bx ) && ( O_prev[17] !== O_expected_prev[17] )
		&& ((O_expected_prev[17] !== last_O_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[17] = O_expected_prev[17];
	end
	if (
		( O_expected_prev[18] !== 1'bx ) && ( O_prev[18] !== O_expected_prev[18] )
		&& ((O_expected_prev[18] !== last_O_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[18] = O_expected_prev[18];
	end
	if (
		( O_expected_prev[19] !== 1'bx ) && ( O_prev[19] !== O_expected_prev[19] )
		&& ((O_expected_prev[19] !== last_O_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[19] = O_expected_prev[19];
	end
	if (
		( O_expected_prev[20] !== 1'bx ) && ( O_prev[20] !== O_expected_prev[20] )
		&& ((O_expected_prev[20] !== last_O_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[20] = O_expected_prev[20];
	end
	if (
		( O_expected_prev[21] !== 1'bx ) && ( O_prev[21] !== O_expected_prev[21] )
		&& ((O_expected_prev[21] !== last_O_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[21] = O_expected_prev[21];
	end
	if (
		( O_expected_prev[22] !== 1'bx ) && ( O_prev[22] !== O_expected_prev[22] )
		&& ((O_expected_prev[22] !== last_O_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[22] = O_expected_prev[22];
	end
	if (
		( O_expected_prev[23] !== 1'bx ) && ( O_prev[23] !== O_expected_prev[23] )
		&& ((O_expected_prev[23] !== last_O_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[23] = O_expected_prev[23];
	end
	if (
		( O_expected_prev[24] !== 1'bx ) && ( O_prev[24] !== O_expected_prev[24] )
		&& ((O_expected_prev[24] !== last_O_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[24] = O_expected_prev[24];
	end
	if (
		( O_expected_prev[25] !== 1'bx ) && ( O_prev[25] !== O_expected_prev[25] )
		&& ((O_expected_prev[25] !== last_O_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[25] = O_expected_prev[25];
	end
	if (
		( O_expected_prev[26] !== 1'bx ) && ( O_prev[26] !== O_expected_prev[26] )
		&& ((O_expected_prev[26] !== last_O_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[26] = O_expected_prev[26];
	end
	if (
		( O_expected_prev[27] !== 1'bx ) && ( O_prev[27] !== O_expected_prev[27] )
		&& ((O_expected_prev[27] !== last_O_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[27] = O_expected_prev[27];
	end
	if (
		( O_expected_prev[28] !== 1'bx ) && ( O_prev[28] !== O_expected_prev[28] )
		&& ((O_expected_prev[28] !== last_O_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[28] = O_expected_prev[28];
	end
	if (
		( O_expected_prev[29] !== 1'bx ) && ( O_prev[29] !== O_expected_prev[29] )
		&& ((O_expected_prev[29] !== last_O_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[29] = O_expected_prev[29];
	end
	if (
		( O_expected_prev[30] !== 1'bx ) && ( O_prev[30] !== O_expected_prev[30] )
		&& ((O_expected_prev[30] !== last_O_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[30] = O_expected_prev[30];
	end
	if (
		( O_expected_prev[31] !== 1'bx ) && ( O_prev[31] !== O_expected_prev[31] )
		&& ((O_expected_prev[31] !== last_O_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[31] = O_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mx4_32b_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] I0;
reg [31:0] I1;
reg [31:0] I2;
reg [31:0] I3;
reg [1:0] S;
// wires                                               
wire [31:0] O;

wire sampler;                             

// assign statements (if any)                          
mx4_32b i1 (
// port map - connection between master ports and signals/registers   
	.I0(I0),
	.I1(I1),
	.I2(I2),
	.I3(I3),
	.O(O),
	.S(S)
);
// I0[ 31 ]
initial
begin
	I0[31] = 1'b1;
end 
// I0[ 30 ]
initial
begin
	I0[30] = 1'b0;
end 
// I0[ 29 ]
initial
begin
	I0[29] = 1'b1;
end 
// I0[ 28 ]
initial
begin
	I0[28] = 1'b0;
end 
// I0[ 27 ]
initial
begin
	I0[27] = 1'b1;
end 
// I0[ 26 ]
initial
begin
	I0[26] = 1'b0;
end 
// I0[ 25 ]
initial
begin
	I0[25] = 1'b1;
end 
// I0[ 24 ]
initial
begin
	I0[24] = 1'b0;
end 
// I0[ 23 ]
initial
begin
	I0[23] = 1'b1;
end 
// I0[ 22 ]
initial
begin
	I0[22] = 1'b0;
end 
// I0[ 21 ]
initial
begin
	I0[21] = 1'b1;
end 
// I0[ 20 ]
initial
begin
	I0[20] = 1'b0;
end 
// I0[ 19 ]
initial
begin
	I0[19] = 1'b1;
end 
// I0[ 18 ]
initial
begin
	I0[18] = 1'b0;
end 
// I0[ 17 ]
initial
begin
	I0[17] = 1'b1;
end 
// I0[ 16 ]
initial
begin
	I0[16] = 1'b0;
end 
// I0[ 15 ]
initial
begin
	I0[15] = 1'b1;
end 
// I0[ 14 ]
initial
begin
	I0[14] = 1'b0;
end 
// I0[ 13 ]
initial
begin
	I0[13] = 1'b1;
end 
// I0[ 12 ]
initial
begin
	I0[12] = 1'b0;
end 
// I0[ 11 ]
initial
begin
	I0[11] = 1'b1;
end 
// I0[ 10 ]
initial
begin
	I0[10] = 1'b0;
end 
// I0[ 9 ]
initial
begin
	I0[9] = 1'b1;
end 
// I0[ 8 ]
initial
begin
	I0[8] = 1'b0;
end 
// I0[ 7 ]
initial
begin
	I0[7] = 1'b1;
end 
// I0[ 6 ]
initial
begin
	I0[6] = 1'b0;
end 
// I0[ 5 ]
initial
begin
	I0[5] = 1'b1;
end 
// I0[ 4 ]
initial
begin
	I0[4] = 1'b0;
end 
// I0[ 3 ]
initial
begin
	I0[3] = 1'b1;
end 
// I0[ 2 ]
initial
begin
	I0[2] = 1'b0;
end 
// I0[ 1 ]
initial
begin
	I0[1] = 1'b1;
end 
// I0[ 0 ]
initial
begin
	I0[0] = 1'b0;
end 
// I1[ 31 ]
initial
begin
	I1[31] = 1'b1;
end 
// I1[ 30 ]
initial
begin
	I1[30] = 1'b0;
end 
// I1[ 29 ]
initial
begin
	I1[29] = 1'b1;
end 
// I1[ 28 ]
initial
begin
	I1[28] = 1'b1;
end 
// I1[ 27 ]
initial
begin
	I1[27] = 1'b1;
end 
// I1[ 26 ]
initial
begin
	I1[26] = 1'b0;
end 
// I1[ 25 ]
initial
begin
	I1[25] = 1'b1;
end 
// I1[ 24 ]
initial
begin
	I1[24] = 1'b1;
end 
// I1[ 23 ]
initial
begin
	I1[23] = 1'b1;
end 
// I1[ 22 ]
initial
begin
	I1[22] = 1'b0;
end 
// I1[ 21 ]
initial
begin
	I1[21] = 1'b1;
end 
// I1[ 20 ]
initial
begin
	I1[20] = 1'b1;
end 
// I1[ 19 ]
initial
begin
	I1[19] = 1'b1;
end 
// I1[ 18 ]
initial
begin
	I1[18] = 1'b0;
end 
// I1[ 17 ]
initial
begin
	I1[17] = 1'b1;
end 
// I1[ 16 ]
initial
begin
	I1[16] = 1'b1;
end 
// I1[ 15 ]
initial
begin
	I1[15] = 1'b1;
end 
// I1[ 14 ]
initial
begin
	I1[14] = 1'b0;
end 
// I1[ 13 ]
initial
begin
	I1[13] = 1'b1;
end 
// I1[ 12 ]
initial
begin
	I1[12] = 1'b1;
end 
// I1[ 11 ]
initial
begin
	I1[11] = 1'b1;
end 
// I1[ 10 ]
initial
begin
	I1[10] = 1'b0;
end 
// I1[ 9 ]
initial
begin
	I1[9] = 1'b1;
end 
// I1[ 8 ]
initial
begin
	I1[8] = 1'b1;
end 
// I1[ 7 ]
initial
begin
	I1[7] = 1'b1;
end 
// I1[ 6 ]
initial
begin
	I1[6] = 1'b0;
end 
// I1[ 5 ]
initial
begin
	I1[5] = 1'b1;
end 
// I1[ 4 ]
initial
begin
	I1[4] = 1'b1;
end 
// I1[ 3 ]
initial
begin
	I1[3] = 1'b1;
end 
// I1[ 2 ]
initial
begin
	I1[2] = 1'b0;
end 
// I1[ 1 ]
initial
begin
	I1[1] = 1'b1;
end 
// I1[ 0 ]
initial
begin
	I1[0] = 1'b1;
end 
// I2[ 31 ]
initial
begin
	I2[31] = 1'b1;
end 
// I2[ 30 ]
initial
begin
	I2[30] = 1'b1;
end 
// I2[ 29 ]
initial
begin
	I2[29] = 1'b0;
end 
// I2[ 28 ]
initial
begin
	I2[28] = 1'b0;
end 
// I2[ 27 ]
initial
begin
	I2[27] = 1'b1;
end 
// I2[ 26 ]
initial
begin
	I2[26] = 1'b1;
end 
// I2[ 25 ]
initial
begin
	I2[25] = 1'b0;
end 
// I2[ 24 ]
initial
begin
	I2[24] = 1'b0;
end 
// I2[ 23 ]
initial
begin
	I2[23] = 1'b1;
end 
// I2[ 22 ]
initial
begin
	I2[22] = 1'b1;
end 
// I2[ 21 ]
initial
begin
	I2[21] = 1'b0;
end 
// I2[ 20 ]
initial
begin
	I2[20] = 1'b0;
end 
// I2[ 19 ]
initial
begin
	I2[19] = 1'b1;
end 
// I2[ 18 ]
initial
begin
	I2[18] = 1'b1;
end 
// I2[ 17 ]
initial
begin
	I2[17] = 1'b0;
end 
// I2[ 16 ]
initial
begin
	I2[16] = 1'b0;
end 
// I2[ 15 ]
initial
begin
	I2[15] = 1'b1;
end 
// I2[ 14 ]
initial
begin
	I2[14] = 1'b1;
end 
// I2[ 13 ]
initial
begin
	I2[13] = 1'b0;
end 
// I2[ 12 ]
initial
begin
	I2[12] = 1'b0;
end 
// I2[ 11 ]
initial
begin
	I2[11] = 1'b1;
end 
// I2[ 10 ]
initial
begin
	I2[10] = 1'b1;
end 
// I2[ 9 ]
initial
begin
	I2[9] = 1'b0;
end 
// I2[ 8 ]
initial
begin
	I2[8] = 1'b0;
end 
// I2[ 7 ]
initial
begin
	I2[7] = 1'b1;
end 
// I2[ 6 ]
initial
begin
	I2[6] = 1'b1;
end 
// I2[ 5 ]
initial
begin
	I2[5] = 1'b0;
end 
// I2[ 4 ]
initial
begin
	I2[4] = 1'b0;
end 
// I2[ 3 ]
initial
begin
	I2[3] = 1'b1;
end 
// I2[ 2 ]
initial
begin
	I2[2] = 1'b1;
end 
// I2[ 1 ]
initial
begin
	I2[1] = 1'b0;
end 
// I2[ 0 ]
initial
begin
	I2[0] = 1'b0;
end 
// I3[ 31 ]
initial
begin
	I3[31] = 1'b1;
end 
// I3[ 30 ]
initial
begin
	I3[30] = 1'b1;
end 
// I3[ 29 ]
initial
begin
	I3[29] = 1'b0;
end 
// I3[ 28 ]
initial
begin
	I3[28] = 1'b1;
end 
// I3[ 27 ]
initial
begin
	I3[27] = 1'b1;
end 
// I3[ 26 ]
initial
begin
	I3[26] = 1'b1;
end 
// I3[ 25 ]
initial
begin
	I3[25] = 1'b0;
end 
// I3[ 24 ]
initial
begin
	I3[24] = 1'b1;
end 
// I3[ 23 ]
initial
begin
	I3[23] = 1'b1;
end 
// I3[ 22 ]
initial
begin
	I3[22] = 1'b1;
end 
// I3[ 21 ]
initial
begin
	I3[21] = 1'b0;
end 
// I3[ 20 ]
initial
begin
	I3[20] = 1'b1;
end 
// I3[ 19 ]
initial
begin
	I3[19] = 1'b1;
end 
// I3[ 18 ]
initial
begin
	I3[18] = 1'b1;
end 
// I3[ 17 ]
initial
begin
	I3[17] = 1'b0;
end 
// I3[ 16 ]
initial
begin
	I3[16] = 1'b1;
end 
// I3[ 15 ]
initial
begin
	I3[15] = 1'b1;
end 
// I3[ 14 ]
initial
begin
	I3[14] = 1'b1;
end 
// I3[ 13 ]
initial
begin
	I3[13] = 1'b0;
end 
// I3[ 12 ]
initial
begin
	I3[12] = 1'b1;
end 
// I3[ 11 ]
initial
begin
	I3[11] = 1'b1;
end 
// I3[ 10 ]
initial
begin
	I3[10] = 1'b1;
end 
// I3[ 9 ]
initial
begin
	I3[9] = 1'b0;
end 
// I3[ 8 ]
initial
begin
	I3[8] = 1'b1;
end 
// I3[ 7 ]
initial
begin
	I3[7] = 1'b1;
end 
// I3[ 6 ]
initial
begin
	I3[6] = 1'b1;
end 
// I3[ 5 ]
initial
begin
	I3[5] = 1'b0;
end 
// I3[ 4 ]
initial
begin
	I3[4] = 1'b1;
end 
// I3[ 3 ]
initial
begin
	I3[3] = 1'b1;
end 
// I3[ 2 ]
initial
begin
	I3[2] = 1'b1;
end 
// I3[ 1 ]
initial
begin
	I3[1] = 1'b0;
end 
// I3[ 0 ]
initial
begin
	I3[0] = 1'b1;
end 
// S[ 1 ]
initial
begin
	repeat(12)
	begin
		S[1] = 1'b0;
		S[1] = #40000 1'b1;
		# 40000;
	end
	S[1] = 1'b0;
end 
// S[ 0 ]
always
begin
	S[0] = 1'b0;
	S[0] = #20000 1'b1;
	#20000;
end 

mx4_32b_vlg_sample_tst tb_sample (
	.I0(I0),
	.I1(I1),
	.I2(I2),
	.I3(I3),
	.S(S),
	.sampler_tx(sampler)
);

mx4_32b_vlg_check_tst tb_out(
	.O(O),
	.sampler_rx(sampler)
);
endmodule

